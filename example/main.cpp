/*------------------------------------------------------------------------------/
/  C++ UART EXAMPLE driver for Curiosity PIC32MZ EF aka PIC32UARTC++  r0.001    /
/  Creator Miguel                                                               /
/  Created on February 10, 2019, 11:51 PM                                       /
/-------------------------------------------------------------------------------/
/  This file is part of C++ UART driver for Curiosity PIC32MZ EF. PIC32UARTC++
/
/  PIC32UARTC++ is free software: you can redistribute it and/or modify
/  it under the terms of the GNU General Public License as published by
/  the Free Software Foundation, either version 3 of the License, or
/  (at your option) any later version.
/
/  PIC32UARTC++ is distributed in the hope that it will be useful,
/  but WITHOUT ANY WARRANTY; without even the implied warranty of
/  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
/  GNU General Public License for more details.
/
/  You should have received a copy of the GNU General Public License
/  along with PIC32UARTC++.  If not, see <https://www.gnu.org/licenses/>..
/----------------------------------------------------------------------------*/



//config settings for clock and peripherals 
//code autogenerated by MPLAB see config bits. in MPLAB manual
//MPLAB harmony can also autogenerate this

// DEVCFG0
#pragma config DEBUG = OFF              // Background Debugger Enable (Debugger is disabled)
#pragma config JTAGEN = OFF             // JTAG Enable (JTAG Disabled)
#pragma config ICESEL = ICS_PGx2        // ICE/ICD Comm Channel Select (Communicate on PGEC1/PGED1)
#pragma config TRCEN = OFF              // Trace Enable (Trace features in the CPU are disabled)
#pragma config BOOTISA = MIPS32         // Boot ISA Selection (Boot code and Exception code is MIPS32)
#pragma config FECCCON = OFF_UNLOCKED   // Dynamic Flash ECC Configuration (ECC and Dynamic ECC are disabled (ECCCON bits are writable))
#pragma config FSLEEP = OFF             // Flash Sleep Mode (Flash is powered down when the device is in Sleep mode)
#pragma config DBGPER = PG_ALL          // Debug Mode CPU Access Permission (Allow CPU access to all permission regions)
#pragma config SMCLR = MCLR_NORM        // Soft Master Clear Enable bit (MCLR pin generates a normal system Reset)
#pragma config SOSCGAIN = GAIN_2X       // Secondary Oscillator Gain Control bits (2x gain setting)
#pragma config SOSCBOOST = OFF           // Secondary Oscillator Boost Kick Start Enable bit (Boost the kick start of the oscillator)
#pragma config POSCGAIN = GAIN_2X       // Primary Oscillator Gain Control bits (2x gain setting)
#pragma config POSCBOOST = OFF           // Primary Oscillator Boost Kick Start Enable bit (Boost the kick start of the oscillator)
#pragma config EJTAGBEN = NORMAL        // EJTAG Boot (Normal EJTAG functionality)
#pragma config CP = OFF                 // Code Protect (Protection Disabled)


// DEVCFG1
#pragma config FNOSC = SPLL             // Oscillator Selection Bits (System PLL)
#pragma config DMTINTV = WIN_127_128    // DMT Count Window Interval (Window/Interval value is 127/128 counter value)
#pragma config FSOSCEN = OFF            // Secondary Oscillator Enable (Disable SOSC)
#pragma config IESO = OFF               // Internal/External Switch Over (Disabled)
#pragma config POSCMOD = EC             // Primary Oscillator Configuration (External clock mode)
#pragma config OSCIOFNC = OFF           // CLKO Output Signal Active on the OSCO Pin (Disabled)
#pragma config FCKSM = CSECME           // Clock Switching and Monitor Selection (Clock Switch Enabled, FSCM Enabled)
#pragma config WDTPS = PS1048576        // Watchdog Timer Postscaler (1:1048576)
#pragma config WDTSPGM = STOP           // Watchdog Timer Stop During Flash Programming (WDT stops during Flash programming)
#pragma config WINDIS = NORMAL          // Watchdog Timer Window Mode (Watchdog Timer is in non-Window mode)
#pragma config FWDTEN = OFF             // Watchdog Timer Enable (WDT Disabled)
#pragma config FWDTWINSZ = WINSZ_25     // Watchdog Timer Window Size (Window size is 25%)
#pragma config DMTCNT = DMT31           // Deadman Timer Count Selection (2^31 (2147483648))
#pragma config FDMTEN = OFF             // Deadman Timer Enable (Deadman Timer is disabled)

// DEVCFG2
#pragma config FPLLIDIV = DIV_3         // System PLL Input Divider (3x Divider)
#pragma config FPLLRNG = RANGE_5_10_MHZ // System PLL Input Range (5-10 MHz Input)
#pragma config FPLLICLK = PLL_POSC      // System PLL Input Clock Selection (POSC is input to the System PLL)
#pragma config FPLLMULT = MUL_50        // System PLL Multiplier (PLL Multiply by 50)
#pragma config FPLLODIV = DIV_2         // System PLL Output Clock Divider (2x Divider)
#pragma config UPLLFSEL = FREQ_24MHZ    // USB PLL Input Frequency Selection (USB PLL input is 24 MHz)


/*** DEVCFG3 ***/
#pragma config FMIIEN = ON              // Ethernet RMII/MII Enable (MII Enabled)
#pragma config FETHIO = ON              // Ethernet I/O Pin Select (Default Ethernet I/O)
#pragma config PGL1WAY = OFF            // Permission Group Lock One Way Configuration (Allow multiple reconfigurations)
#pragma config PMDL1WAY = OFF           // Peripheral Module Disable Configuration (Allow multiple reconfigurations)
#pragma config IOL1WAY = OFF            // Peripheral Pin Select Configuration (Allow multiple reconfigurations)
#pragma config FUSBIDIO = OFF           // USB USBID Selection (Controlled by Port Function)

/*** BF1SEQ0 ***/

#pragma config TSEQ =       0x0000
#pragma config CSEQ =       0xffff






#define SYS_FREQ 200000000 // Running at 200MHz

#include <cstdlib>
#include <cstdint>
//#include <iostream>
//#include <sstream>
//#include <string>
#include "serial.h"
using namespace std;

//function prototypes
void delay_us(unsigned int us);
void delay_ms(int ms);
//inline string tostring(int _Val);
//string toString(int n);
//string toString(double n);

int main(int argc, char** argv) {
 
    //create the first instance of the serial object
    serial serial1(0);
    //turn on the serial port, next version I'll implement turn off
    serial1.turnON();
    //set baud rate
    serial1.baudRate(4800);
    
    
    //create 2nd instnace of uart. Then repeat above
    serial serial2(1);
    serial2.turnON();
    serial2.baudRate(4800);
    
    //stringstream ss;
      //create 2nd instnace of uart. Then repeat above
    serial serial3(2);
    serial3.turnON();
    serial3.baudRate(57600);

    string tester2;
 
      while(1)
      {
          tester2=serial1.ReadString();
        // string tester2(1,serial1.ReadChar());
        // tester2=tester1;
          serial1.transmit("serial 1 " +tester2);
         
          serial2.transmit( tester2);
         // serial1.transmit("1. Serial Instance #1 transmitting "+ to_string(9876543210) +" \n");
         // serial2.transmit("2. Serial Instance #2 transmitting "+ to_string(123456789) +" \n");
          serial3.transmit("serial 3 " + tester2);
          //   serial3.transmit("3. Serial Instance #2 transmitting "+ to_string(3333334) +" \n");
          //serial1.transmit("1. Serial Instance #1 transmitting "+ toString(124.55) +" \n");
         //
          delay_ms(100);
    
      }
    return 0;
}

//delay_us function copied from MPLAB IDE
void delay_us(unsigned int us)
{
    // Convert microseconds us into how many clock ticks it will take
	us *= SYS_FREQ / 1000000 / 2; // Core Timer updates every 2 ticks
       
    __builtin_mtc0( 9 , 0 , 0 ); // Set Core Timer count to 0
    
    while (us > __builtin_mfc0( 9 , 0 )); // Wait until Core Timer count reaches the number we calculated earlier
}

void delay_ms(int ms)
{
    delay_us(ms * 1000);
}

/*
string toString(int n){
    stringstream ss;
    ss<<n;
    return ss.str(); 
}
  */
/*
string toString(double n){
    stringstream ss;
    ss<<n;
    return ss.str(); 
}
 */
 