# 1 "serial.cpp"
# 1 "/home/miguel/MPLABXProjects/MZCPPdrivers.X//"
# 1 "<command-line>"
# 1 "serial.cpp"
# 24 "serial.cpp"
# 1 "serial.h" 1
# 22 "serial.h"
# 1 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/c/cstdlib" 1 3



# 1 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/c/yvals.h" 1 3


# 1 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/c/xkeycheck.h" 1 3
# 4 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/c/yvals.h" 2 3
# 369 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/c/yvals.h" 3
typedef long _Int32t;
typedef unsigned long _Uint32t;



typedef long _Ptrdifft;






typedef unsigned long _Sizet;
# 703 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/c/yvals.h" 3
namespace std {}
# 849 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/c/yvals.h" 3
namespace std {
typedef bool _Bool;
}


# 1 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/c/stdarg.h" 1 3
# 61 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/c/stdarg.h" 3
extern "C" {
# 75 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/c/stdarg.h" 3
typedef __builtin_va_list __va_list;





typedef __builtin_va_list __gnuc_va_list;
# 126 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/c/stdarg.h" 3
typedef __va_list va_list;






}
# 855 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/c/yvals.h" 2 3
# 981 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/c/yvals.h" 3
typedef long long _Longlong;
typedef unsigned long long _ULonglong;
# 994 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/c/yvals.h" 3
namespace std {
 namespace tr1 {
using ::_Longlong;
using ::_ULonglong;
 }
}
# 1017 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/c/yvals.h" 3
typedef wchar_t _Wchart;
typedef wchar_t _Wintt;
# 1079 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/c/yvals.h" 3
typedef va_list _Va_list;
# 1096 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/c/yvals.h" 3




extern "C" {
void _Atexit(void (*)(void));
}
# 1114 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/c/yvals.h" 3
typedef char _Sysch_t;
# 1128 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/c/yvals.h" 3

# 1177 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/c/yvals.h" 3
namespace std {
enum _Uninitialized
 {
 _Noinit
 };

extern "C++" {

class _Lockit
 {
public:

 _Lockit()
  {
  }

 explicit _Lockit(int)
  {
  }

 ~_Lockit()
  {
  }
# 1224 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/c/yvals.h" 3
 _Lockit(const _Lockit&);
 _Lockit& operator=(const _Lockit&);

private:
 int _Locktype;
 };


class _Mutex
 {
public:
 _Mutex(_Uninitialized)
     {
     }

 _Mutex()
     {
     }

 void _Lock()
  {
  }

 void _Unlock()
  {
  }
 };
# 1271 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/c/yvals.h" 3
}
}
# 5 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/c/cstdlib" 2 3







# 1 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/c/stdlib.h" 1 3








# 39 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/c/stdlib.h" 3
typedef _Sizet size_t;
# 48 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/c/stdlib.h" 3
typedef struct
 {
 int quot;
 int rem;
 } div_t;

typedef struct
 {
 long quot;
 long rem;
 } ldiv_t;


typedef struct
 {
 _Longlong quot;
 _Longlong rem;
 } _Lldiv_t;



typedef _Lldiv_t lldiv_t;



extern "C" {
void exit(int) __attribute__((__noreturn__));

void _Exit(int) __attribute__((__noreturn__));
char *getenv(const char *);
int system(const char *);
}

extern "C" {
int abs(int);
long labs(long);

void abort(void) __attribute__((__noreturn__));
void *calloc(size_t, size_t);
div_t div(int, int);
void free(void *);
ldiv_t ldiv(long, long);
void *malloc(size_t);
int mblen(const char *, size_t);
size_t mbstowcs(wchar_t *,
 const char *, size_t);
int mbtowc(wchar_t *, const char *, size_t);
int rand(void);
void srand(unsigned int);
void *realloc(void *, size_t);
long strtol(const char *, char **, int);
size_t wcstombs(char *,
 const wchar_t *, size_t);
int wctomb(char *, wchar_t);


void lcong48(unsigned short [7]);
unsigned short *seed48(unsigned short [3]);
void srand48(long);

double drand48(void);
long lrand48(void);
long mrand48(void);

double erand48(unsigned short [3]);
long nrand48(unsigned short [3]);
long jrand48(unsigned short [3]);

int getopt(int, char *const *, const char *);
void *memalign(size_t, size_t);
char *mktemp(char *);
int putenv(char *);
int rand_r(unsigned *);
char *tempnam(const char *, const char *);

extern char *optarg;
extern int optind, opterr, optopt;


unsigned long _Stoul(const char *, char **, int);
float _Stof(const char *, char **, long);
double _Stod(const char *, char **, long);
long double _Stold(const char *, char **, long);
_Longlong _Stoll(const char *, char **, int);
_ULonglong _Stoull(const char *, char **, int);

float _Stofx(const char *, char **, long, int *);
double _Stodx(const char *, char **, long, int *);
long double _Stoldx(const char *, char **, long, int *);
long _Stolx(const char *, char **, int, int *);
unsigned long _Stoulx(const char *, char **, int, int *);
_Longlong _Stollx(const char *, char **, int, int *);
_ULonglong _Stoullx(const char *, char **, int, int *);

size_t _Getmbcurmax(void);


_Longlong llabs(_Longlong);
lldiv_t lldiv(_Longlong, _Longlong);



int at_quick_exit(void (*)(void));
void quick_exit(int) __attribute__((__noreturn__));


}


extern "C" {
typedef void _Atexfun(void);
typedef int _Cmpfun(const void *, const void *);

int atexit(void (*)(void));
void *bsearch(const void *, const void *,
 size_t, size_t, _Cmpfun *);
void qsort(void *, size_t, size_t, _Cmpfun *);

}

extern "C++" {
# 199 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/c/stdlib.h" 3
extern "C" {

inline double atof(const char *_Str)
 {



 return (_Stof(_Str, 0, 0));

 }

inline int atoi(const char *_Str)
 {
 return ((int)_Stoul(_Str, 0, 10));
 }

inline long atol(const char *_Str)
 {
 return ((long)_Stoul(_Str, 0, 10));
 }
# 227 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/c/stdlib.h" 3
inline double strtod(const char * _Str,
 char ** _Endptr)
 {
 return (_Stod(_Str, _Endptr, 0));
 }

inline unsigned long strtoul(const char * _Str,
 char ** _Endptr, int _Base)
 {
 return (_Stoul(_Str, _Endptr, _Base));
 }



inline _Longlong atoll(const char *_Str)
 {
 return ((_Longlong)_Stoull(_Str, 0, 10));
 }

inline float strtof(const char * _Str,
 char ** _Endptr)
 {
 return (_Stof(_Str, _Endptr, 0));
 }

inline long double strtold(const char * _Str,
 char ** _Endptr)
 {
 return (_Stold(_Str, _Endptr, 0));
 }

inline _Longlong strtoll(const char * _Str,
 char ** _Endptr, int _Base)
 {
 return (_Stoll(_Str, _Endptr, _Base));
 }

inline _ULonglong strtoull(const char * _Str,
 char ** _Endptr, int _Base)
 {
 return (_Stoull(_Str, _Endptr, _Base));
 }


}



inline long abs(long _Left)
 {
 return (labs(_Left));
 }

inline ldiv_t div(long _Left, long _Right)
 {
 return (ldiv(_Left, _Right));
 }




inline _Longlong abs(_Longlong _Left)
 {
 return (llabs(_Left));
 }

inline _Lldiv_t div(_Longlong _Left, _Longlong _Right)
 {
 return (lldiv(_Left, _Right));
 }



}
# 351 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/c/stdlib.h" 3
extern "C" {


int (_Fail_s)(const char *, size_t);



typedef int errno_t;




typedef size_t rsize_t;


typedef void (*constraint_handler_t)(const char *,
 void *, errno_t);

constraint_handler_t set_constraint_handler_s(
 constraint_handler_t);
void abort_handler_s(const char *,
 void *, errno_t);
void ignore_handler_s(const char *,
 void *, errno_t);

errno_t getenv_s(size_t *, char *,
 rsize_t, const char *);
}


extern "C" {
typedef int _Cmpfun_s(const void *, const void *, void *);

void *bsearch_s(const void *, const void *,
 rsize_t, rsize_t, _Cmpfun_s *, void *);
errno_t qsort_s(void *,
 rsize_t, rsize_t, _Cmpfun_s *, void *);
}

extern "C++" {
# 407 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/c/stdlib.h" 3
}
# 420 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/c/stdlib.h" 3
extern "C" {
errno_t wctomb_s(int *,
 char *, rsize_t,
 wchar_t);
errno_t mbstowcs_s(size_t *,
 wchar_t *, rsize_t,
 const char *, rsize_t);
errno_t wcstombs_s(size_t *,
 char *, rsize_t,
 const wchar_t *, rsize_t);
}






# 13 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/c/cstdlib" 2 3



namespace std {
using :: size_t; using :: div_t; using :: ldiv_t;

using :: abort; using :: abs; using :: atexit;
using :: atof; using :: atoi; using :: atol;
using :: bsearch; using :: calloc; using :: div;
using :: exit; using :: free; using :: getenv;
using :: labs; using :: ldiv; using :: malloc;
using :: mblen; using :: mbstowcs; using :: mbtowc;
using :: qsort; using :: rand; using :: realloc;
using :: srand; using :: strtod; using :: strtol;
using :: strtoul; using :: system;
using :: wcstombs; using :: wctomb;


using :: lldiv_t;

using :: atoll; using :: llabs; using :: lldiv;
using :: strtof; using :: strtold;
using :: strtoll; using :: strtoull;
using :: _Exit;



 namespace tr1 {
using :: lldiv_t;

using :: atoll; using :: llabs; using :: lldiv;
using :: strtof; using :: strtold;
using :: strtoll; using :: strtoull;
using :: _Exit;

using :: abs; using :: div;
 }

}
# 23 "serial.h" 2
# 1 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/string" 1 3



# 1 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/istream" 1 3



# 1 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/ostream" 1 3



# 1 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/ios" 1 3



# 1 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/xlocnum" 1 3



# 1 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/climits" 1 3



# 1 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/c/yvals.h" 1 3
# 5 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/climits" 2 3

# 1 "/opt/microchip/xc32/v2.15/lib/gcc/pic32mx/4.8.3/include-fixed/limits.h" 1 3 4
# 7 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/climits" 2 3
# 5 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/xlocnum" 2 3
# 1 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/c/cmath" 1 3



# 1 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/c/yvals.h" 1 3
# 5 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/c/cmath" 2 3







# 1 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/c/math.h" 1 3



# 1 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/c/xtgmath.h" 1 3
# 23 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/c/xtgmath.h" 3
extern "C++" {

# 117 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/c/xtgmath.h" 3
template<class _From,
 class _To,
 class _From_rc,
 class _To_rc>
 _To _Rc_convert(const _From& _Val, _To *, _From_rc *, _To_rc *)
 {
 return ((_To)_Val);
 }
# 151 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/c/xtgmath.h" 3
template<class _Ty>
 struct _Rc_type
 {
 typedef float _Type;
 };


template<class _Ty, class _T2>
 struct _Rc_widened
 {
 typedef char _Type;
 };

template<> struct _Rc_widened<float, float>
 {
 typedef float _Type;
 };
# 201 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/c/xtgmath.h" 3
template<class _Ty>
 struct _Real_type
 {
 typedef double _Type;
 };


template<> struct _Real_type<float>
 {
 typedef float _Type;
 };

template<> struct _Real_type<long double>
 {
 typedef long double _Type;
 };


template<class _Ty, class _T2>
 struct _Real_widened
 {
 typedef long double _Type;
 };

template<> struct _Real_widened<float, float>
 {
 typedef float _Type;
 };

template<> struct _Real_widened<float, double>
 {
 typedef double _Type;
 };

template<> struct _Real_widened<double, float>
 {
 typedef double _Type;
 };

template<> struct _Real_widened<double, double>
 {
 typedef double _Type;
 };


template<class _Trc, class _Tre>
 struct _Combined_type
 {
 typedef float _Type;
 };

template<> struct _Combined_type<float, double>
 {
 typedef double _Type;
 };

template<> struct _Combined_type<float, long double>
 {
 typedef long double _Type;
 };







}
# 5 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/c/math.h" 2 3

# 1 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/c/ymath.h" 1 3



# 1 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/c/yvals.h" 1 3
# 5 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/c/ymath.h" 2 3

 extern "C" {
# 127 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/c/ymath.h" 3
typedef union
 {
 unsigned short _Word[8];
 float _Float;
 double _Double;
 long double _Long_double;
 } _Dconst;


void _Feraise(int);


double _Cosh(double, double);
short _Dtest(double *);
short _Exp(double *, double, long);
double _Log(double, int);
double _Sin(double, unsigned int);
double _Sinh(double, double);
extern _Dconst _Denorm, _Hugeval, _Inf,
 _Nan, _Snan;


float _FCosh(float, float);
short _FDtest(float *);
short _FExp(float *, float, long);
float _FLog(float, int);
float _FSin(float, unsigned int);
float _FSinh(float, float);
extern _Dconst _FDenorm, _FInf, _FNan, _FSnan;


long double _LCosh(long double, long double);
short _LDtest(long double *);
short _LExp(long double *, long double, long);
long double _LLog(long double, int);
long double _LSin(long double, unsigned int);
long double _LSinh(long double, long double);
extern _Dconst _LDenorm, _LInf, _LNan, _LSnan;
# 176 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/c/ymath.h" 3
}

# 7 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/c/math.h" 2 3






# 41 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/c/math.h" 3
typedef float float_t;
typedef double double_t;
# 92 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/c/math.h" 3
extern "C" {
int _FFpcomp(float, float);
int _Fpcomp(double, double);
int _LFpcomp(long double, long double);

int _FDclass(float);
int _Dclass(double);
int _LDclass(long double);

int _FDsign(float);
int _Dsign(double);
int _LDsign(long double);
}


extern "C++" {

static inline int _FPCOMP(float _Left, float _Right)
 {
 return (_FFpcomp(_Left, _Right));
 }

static inline int _FPCOMP(double _Left, double _Right)
 {
 return (_Fpcomp(_Left, _Right));
 }

static inline int _FPCOMP(long double _Left, long double _Right)
 {
 return (_LFpcomp(_Left, _Right));
 }

template<class _T1, class _T2> static inline
 int _FPCOMP(_T1 _Left, _T2 _Right)
 {
 typedef typename _Combined_type<float,
  typename _Real_widened<
   typename _Real_type<_T1>::_Type,
   typename _Real_type<_T2>::_Type>::_Type>::_Type _Tw;
 return (_FPCOMP((_Tw)_Left, (_Tw)_Right));
 }


static inline int fpclassify(float _Left)
 {
 return (_FDtest(&_Left));
 }

static inline int fpclassify(double _Left)
 {
 return (_Dtest(&_Left));
 }

static inline int fpclassify(long double _Left)
 {
 return (_LDtest(&_Left));
 }


static inline bool signbit(float _Left)
 {
 return (_FDsign(_Left) != 0);
 }

static inline bool signbit(double _Left)
 {
 return (_Dsign(_Left) != 0);
 }

static inline bool signbit(long double _Left)
 {
 return (_LDsign(_Left) != 0);
 }

template<class _Ty> static inline
 bool isfinite(_Ty _Left)
 {
 return (fpclassify(_Left) <= 0);
 }

template<class _Ty> static inline
 bool isinf(_Ty _Left)
 {
 return (fpclassify(_Left) == 1);
 }


template<class _Ty> static inline
 bool isinfl(_Ty _Left)
 {
 return (fpclassify(_Left) == 1);
 }


template<class _Ty> static inline
 bool isnan(_Ty _Left)
 {
 return (fpclassify(_Left) == 2);
 }

template<class _Ty> static inline
 bool isnormal(_Ty _Left)
 {
 return (fpclassify(_Left) == (-1));
 }

template<class _Ty1, class _Ty2> static inline
 bool isgreater(_Ty1 _Left, _Ty2 _Right)
 {
 return ((_FPCOMP(_Left, _Right) & 4) != 0);
 }

template<class _Ty1, class _Ty2> static inline
 bool isgreaterequal(_Ty1 _Left, _Ty2 _Right)
 {
 return ((_FPCOMP(_Left, _Right) & (2 | 4)) != 0);
 }

template<class _Ty1, class _Ty2> static inline
 bool isless(_Ty1 _Left, _Ty2 _Right)
 {
 return ((_FPCOMP(_Left, _Right) & 1) != 0);
 }

template<class _Ty1, class _Ty2> static inline
 bool islessequal(_Ty1 _Left, _Ty2 _Right)
 {
 return ((_FPCOMP(_Left, _Right) & (1 | 2)) != 0);
 }

template<class _Ty1, class _Ty2> static inline
 bool islessgreater(_Ty1 _Left, _Ty2 _Right)
 {
 return ((_FPCOMP(_Left, _Right) & (1 | 4)) != 0);
 }

template<class _Ty1, class _Ty2> static inline
 bool isunordered(_Ty1 _Left, _Ty2 _Right)
 {
 return (_FPCOMP(_Left, _Right) == 0);
 }
# 249 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/c/math.h" 3
}
# 332 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/c/math.h" 3
extern "C" {


float acosf(float);
float asinf(float);
float atanf(float);
float atan2f(float, float);
float ceilf(float);
float expf(float);
float fabsf(float);
float floorf(float);
float fmodf(float, float);
float frexpf(float, int *);
float ldexpf(float, int);
float modff(float, float *);
float powf(float, float);
float sqrtf(float);
float tanf(float);
float tanhf(float);


float acoshf(float);
float asinhf(float);
float atanhf(float);
float cbrtf(float);
float copysignf(float, float);
float erff(float);
float erfcf(float);
float expm1f(float);
float exp2f(float);
float fdimf(float, float);
float fmaf(float, float, float);
float fmaxf(float, float);
float fminf(float, float);
float hypotf(float, float);
int ilogbf(float);
float lgammaf(float);
_Longlong llrintf(float);
_Longlong llroundf(float);
float log1pf(float);
float logbf(float);
long lrintf(float);
long lroundf(float);
float nanf(const char *);
float nearbyintf(float);
float nextafterf(float, float);
float nexttowardf(float, long double);
float remainderf(float, float);
float remquof(float, float, int *);
float rintf(float);
float roundf(float);
float scalbnf(float, int);
float scalblnf(float, long);
float tgammaf(float);
float truncf(float);



float assoc_laguerref(unsigned, unsigned, float);
float assoc_legendref(unsigned, unsigned, float);
float betaf(float, float);
float comp_ellint_1f(float);
float comp_ellint_2f(float);
float comp_ellint_3f(float, float);
float cyl_bessel_if(float, float);
float cyl_bessel_jf(float, float);
float cyl_bessel_kf(float, float);
float cyl_neumannf(float, float);
float ellint_1f(float, float);
float ellint_2f(float, float);
float ellint_3f(float, float, float);
float expintf(float);
float hermitef(unsigned, float);
float laguerref(unsigned, float);
float legendref(unsigned, float);
float riemann_zetaf(float);
float sph_besself(unsigned, float);
float sph_legendref(unsigned, unsigned, float);
float sph_neumannf(unsigned, float);
# 434 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/c/math.h" 3
long double acosl(long double);
long double asinl(long double);
long double atanl(long double);
long double atan2l(long double, long double);
long double ceill(long double);
long double expl(long double);
long double fabsl(long double);
long double floorl(long double);
long double fmodl(long double, long double);
long double frexpl(long double, int *);
long double ldexpl(long double, int);
long double modfl(long double, long double *);
long double powl(long double, long double);
long double sqrtl(long double);
long double tanl(long double);
long double tanhl(long double);


long double acoshl(long double);
long double asinhl(long double);
long double atanhl(long double);
long double cbrtl(long double);
long double copysignl(long double, long double);
long double erfl(long double);
long double erfcl(long double);
long double exp2l(long double);
long double expm1l(long double);
long double fdiml(long double, long double);
long double fmal(long double, long double, long double);
long double fmaxl(long double, long double);
long double fminl(long double, long double);
long double hypotl(long double, long double);
int ilogbl(long double);
long double lgammal(long double);
_Longlong llrintl(long double);
_Longlong llroundl(long double);
long double log1pl(long double);
long double logbl(long double);
long lrintl(long double);
long lroundl(long double);
long double nanl(const char *);
long double nearbyintl(long double);
long double nextafterl(long double, long double);
long double nexttowardl(long double, long double);
long double remainderl(long double, long double);
long double remquol(long double, long double, int *);
long double rintl(long double);
long double roundl(long double);
long double scalbnl(long double, int);
long double scalblnl(long double, long);
long double tgammal(long double);
long double truncl(long double);



long double assoc_laguerrel(unsigned, unsigned, long double);
long double assoc_legendrel(unsigned, unsigned, long double);
long double betal(long double, long double);
long double comp_ellint_1l(long double);
long double comp_ellint_2l(long double);
long double comp_ellint_3l(long double, long double);
long double cyl_bessel_il(long double, long double);
long double cyl_bessel_jl(long double, long double);
long double cyl_bessel_kl(long double, long double);
long double cyl_neumannl(long double, long double);
long double ellint_1l(long double, long double);
long double ellint_2l(long double, long double);
long double ellint_3l(long double, long double, long double);
long double expintl(long double);
long double hermitel(unsigned, long double);
long double laguerrel(unsigned, long double);
long double legendrel(unsigned, long double);
long double riemann_zetal(long double);
long double sph_bessell(unsigned, long double);
long double sph_legendrel(unsigned, unsigned, long double);
long double sph_neumannl(unsigned, long double);
# 532 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/c/math.h" 3
double acos(double);
double asin(double);
double atan(double);
double atan2(double, double);
double ceil(double);
double exp(double);
double fabs(double);
double floor(double);
double fmod(double, double);
double frexp(double, int *);
double ldexp(double, int);
double modf(double, double *);
double pow(double, double);
double sqrt(double);
double tan(double);
double tanh(double);


double acosh(double);
double asinh(double);
double atanh(double);
double cbrt(double);
double copysign(double, double);
double erf(double);
double erfc(double);
double exp2(double);
double expm1(double);
double fdim(double, double);
double fma(double, double, double);
double fmax(double, double);
double fmin(double, double);
double hypot(double, double);
int ilogb(double);
double lgamma(double);
_Longlong llrint(double);
_Longlong llround(double);
double log1p(double);
double logb(double);
long lrint(double);
long lround(double);
double nan(const char *);
double nearbyint(double);
double nextafter(double, double);
double nexttoward(double, long double);
double remainder(double, double);
double remquo(double, double, int *);
double rint(double);
double round(double);
double scalbn(double, int);
double scalbln(double, long);
double tgamma(double);
double trunc(double);



double assoc_laguerre(unsigned, unsigned, double);
double assoc_legendre(unsigned, unsigned, double);
double beta(double, double);
double comp_ellint_1(double);
double comp_ellint_2(double);
double comp_ellint_3(double, double);
double cyl_bessel_i(double, double);
double cyl_bessel_j(double, double);
double cyl_bessel_k(double, double);
double cyl_neumann(double, double);
double ellint_1(double, double);
double ellint_2(double, double);
double ellint_3(double, double, double);
double expint(double);
double hermite(unsigned, double);
double laguerre(unsigned, double);
double legendre(unsigned, double);
double riemann_zeta(double);
double sph_bessel(unsigned, double);
double sph_legendre(unsigned, unsigned, double);
double sph_neumann(unsigned, double);
# 629 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/c/math.h" 3
}


extern "C++" {

extern "C" {

static inline double cos(double _Left)
 {



 return (_FSin((float)_Left, 1));

 }

static inline double cosh(double _Left)
 {



 return (_FCosh((float)_Left, 1.0F));

 }

static inline double log(double _Left)
 {



 return (_FLog((float)_Left, 0));

 }

static inline double log10(double _Left)
 {



 return (_FLog((float)_Left, 1));

 }

static inline double sin(double _Left)
 {



 return (_FSin((float)_Left, 0));

 }

static inline double sinh(double _Left)
 {



 return (_FSinh((float)_Left, 1.0F));

 }


static inline double log2(double _Left)
 {



 return (_FLog((float)_Left, -1));

 }


}


static inline double abs(double _Left)
 {



 return (fabsf((float)_Left));

 }


extern "C" {



static inline float cosf(float _Left)
 {
 return (_FSin(_Left, 1));
 }

static inline float coshf(float _Left)
 {
 return (_FCosh(_Left, 1.0F));
 }

static inline float logf(float _Left)
 {
 return (_FLog(_Left, 0));
 }

static inline float log10f(float _Left)
 {
 return (_FLog(_Left, 1));
 }

static inline float sinf(float _Left)
 {
 return (_FSin(_Left, 0));
 }

static inline float sinhf(float _Left)
 {
 return (_FSinh(_Left, 1.0F));
 }


static inline float log2f(float _Left)
 {
 return (_FLog(_Left, -1));
 }


}

static inline float abs(float _Left)
 {
 return (fabsf(_Left));
 }

static inline float acos(float _Left)
 {
 return (acosf(_Left));
 }

static inline float asin(float _Left)
 {
 return (asinf(_Left));
 }

static inline float atan(float _Left)
 {
 return (atanf(_Left));
 }

static inline float atan2(float _Left, float _Right)
 {
 return (atan2f(_Left, _Right));
 }

static inline float ceil(float _Left)
 {
 return (ceilf(_Left));
 }

static inline float cos(float _Left)
 {
 return (_FSin(_Left, 1));
 }

static inline float cosh(float _Left)
 {
 return (_FCosh(_Left, 1.0F));
 }

static inline float exp(float _Left)
 {
 return (expf(_Left));
 }

static inline float fabs(float _Left)
 {
 return (fabsf(_Left));
 }

static inline float floor(float _Left)
 {
 return (floorf(_Left));
 }

static inline float fmod(float _Left, float _Right)
 {
 return (fmodf(_Left, _Right));
 }

static inline float frexp(float _Left, int *_Right)
 {
 return (frexpf(_Left, _Right));
 }

static inline float ldexp(float _Left, int _Right)
 {
 return (ldexpf(_Left, _Right));
 }

static inline float log(float _Left)
 {
 return (_FLog(_Left, 0));
 }

static inline float log10(float _Left)
 {
 return (_FLog(_Left, 1));
 }

static inline float modf(float _Left, float *_Right)
 {
 return (modff(_Left, _Right));
 }

static inline float pow(float _Left, float _Right)
 {
 return (powf(_Left, _Right));
 }

static inline float sin(float _Left)
 {
 return (_FSin(_Left, 0));
 }

static inline float sinh(float _Left)
 {
 return (_FSinh(_Left, 1.0F));
 }

static inline float sqrt(float _Left)
 {

 extern double _sqrtfd(double);
 return _sqrtfd (_Left);




 }

static inline float tan(float _Left)
 {
 return (tanf(_Left));
 }

static inline float tanh(float _Left)
 {
 return (tanhf(_Left));
 }


static inline float acosh(float _Left)
 {
 return (acoshf(_Left));
 }

static inline float asinh(float _Left)
 {
 return (asinhf(_Left));
 }

static inline float atanh(float _Left)
 {
 return (atanhf(_Left));
 }

static inline float cbrt(float _Left)
 {
 return (cbrtf(_Left));
 }

static inline float copysign(float _Left, float _Right)
 {
 return (copysignf(_Left, _Right));
 }

static inline float erf(float _Left)
 {
  return (erff(_Left)); }

static inline float erfc(float _Left)
 {
 return (erfcf(_Left));
 }

static inline float exp2(float _Left)
 {
 return (exp2f(_Left));
 }

static inline float expm1(float _Left)
 {
 return (expm1f(_Left));
 }

static inline float fdim(float _Left, float _Right)
 {
 return (fdimf(_Left, _Right));
 }

static inline float fma(float _Left, float _Right, float _Addend)
 {
 return (fmaf(_Left, _Right, _Addend));
 }

static inline float fmax(float _Left, float _Right)
 {
 return (fmaxf(_Left, _Right));
 }

static inline float fmin(float _Left, float _Right)
 {
 return (fminf(_Left, _Right));
 }

static inline float hypot(float _Left, float _Right)
 {
 return (hypotf(_Left, _Right));
 }

static inline int ilogb(float _Left)
 {
 return (ilogbf(_Left));
 }

static inline float lgamma(float _Left)
 {
 return (lgammaf(_Left));
 }

static inline _Longlong llrint(float _Left)
 {
 return (llrintf(_Left));
 }

static inline _Longlong llround(float _Left)
 {
 return (llroundf(_Left));
 }

static inline float log1p(float _Left)
 {
 return (log1pf(_Left));
 }

static inline float log2(float _Left)
 {
 return (_FLog(_Left, -1));
 }

static inline float logb(float _Left)
 {
 return (logbf(_Left));
 }

static inline long lrint(float _Left)
 {
 return (lrintf(_Left));
 }

static inline long lround(float _Left)
 {
 return (lroundf(_Left));
 }

static inline float nearbyint(float _Left)
 {
 return (nearbyintf(_Left));
 }

static inline float nextafter(float _Left, float _Right)
 {
 return (nextafterf(_Left, _Right));
 }

static inline float nexttoward(float _Left, long double _Right)
 {
 return (nexttowardf(_Left, _Right));
 }

static inline float remainder(float _Left, float _Right)
 {
 return (remainderf(_Left, _Right));
 }

static inline float remquo(float _Left, float _Right, int *_Pval)
 {
 return (remquof(_Left, _Right, _Pval));
 }

static inline float rint(float _Left)
 {
 return (rintf(_Left));
 }

static inline float round(float _Left)
 {
 return (roundf(_Left));
 }

static inline float scalbn(float _Left, int _Right)
 {
 return (scalbnf(_Left, _Right));
 }

static inline float scalbln(float _Left, long _Right)
 {
 return (scalblnf(_Left, _Right));
 }

static inline float tgamma(float _Left)
 {
 return (tgammaf(_Left));
 }

static inline float trunc(float _Left)
 {
 return (truncf(_Left));
 }



static inline float assoc_laguerre(unsigned _Nv, unsigned _Mv,
 float _Xv)
 {
 return (assoc_laguerref(_Nv, _Mv, _Xv));
 }

static inline float assoc_legendre(unsigned _Nv, unsigned _Mv,
 float _Xv)
 {
 return (assoc_legendref(_Nv, _Mv, _Xv));
 }

static inline float beta(float _Xv, float _Yv)
 {
 return (betaf(_Xv, _Yv));
 }

static inline float comp_ellint_1(float _Kv)
 {
 return (comp_ellint_1f(_Kv));
 }

static inline float comp_ellint_2(float _Kv)
 {
 return (comp_ellint_2f(_Kv));
 }

static inline float comp_ellint_3(float _Kv, float _Nu)
 {
 return (comp_ellint_3f(_Kv, _Nu));
 }

static inline float cyl_bessel_i(float _Nu, float _Xv)
 {
 return (cyl_bessel_if(_Nu, _Xv));
 }

static inline float cyl_bessel_j(float _Nu, float _Xv)
 {
 return (cyl_bessel_jf(_Nu, _Xv));
 }

static inline float cyl_bessel_k(float _Nu, float _Xv)
 {
 return (cyl_bessel_kf(_Nu, _Xv));
 }

static inline float cyl_neumann(float _Nu, float _Xv)
 {
 return (cyl_neumannf(_Nu, _Xv));
 }

static inline float ellint_1(float _Kv, float _Phi)
 {
 return (ellint_1f(_Kv, _Phi));
 }

static inline float ellint_2(float _Kv, float _Phi)
 {
 return (ellint_2f(_Kv, _Phi));
 }

static inline float ellint_3(float _Kv, float _Nu, float _Phi)
 {
 return (ellint_3f(_Kv, _Nu, _Phi));
 }

static inline float expint(float _Xv)
 {
 return (expintf(_Xv));
 }

static inline float hermite(unsigned _Nv, float _Xv)
 {
 return (hermitef(_Nv, _Xv));
 }

static inline float laguerre(unsigned _Nv, float _Xv)
 {
 return (laguerref(_Nv, _Xv));
 }

static inline float legendre(unsigned _Lv, float _Xv)
 {
 return (legendref(_Lv, _Xv));
 }

static inline float riemann_zeta(float _Xv)
 {
 return (riemann_zetaf(_Xv));
 }

static inline float sph_bessel(unsigned _Nv, float _Xv)
 {
 return (sph_besself(_Nv, _Xv));
 }

static inline float sph_legendre(unsigned _Lv, unsigned _Mv, float _Xv)
 {
 return (sph_legendref(_Lv, _Mv, _Xv));
 }

static inline float sph_neumann(unsigned _Nv, float _Xv)
 {
 return (sph_neumannf(_Nv, _Xv));
 }
# 1202 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/c/math.h" 3
extern "C" {

static inline long double cosl(long double _Left)
 {
 return (_LSin(_Left, 1));
 }

static inline long double coshl(long double _Left)
 {
 return (_LCosh(_Left, 1.0L));
 }

static inline long double logl(long double _Left)
 {
 return (_LLog(_Left, 0));
 }

static inline long double log10l(long double _Left)
 {
 return (_LLog(_Left, 1));
 }

static inline long double sinl(long double _Left)
 {
 return (_LSin(_Left, 0));
 }

static inline long double sinhl(long double _Left)
 {
 return (_LSinh(_Left, 1.0L));
 }


static inline long double log2l(long double _Left)
 {
 return (_LLog(_Left, -1));
 }


}

static inline long double abs(long double _Left)
 {
 return (fabsl(_Left));
 }

static inline long double acos(long double _Left)
 {
 return (acosl(_Left));
 }

static inline long double asin(long double _Left)
 {
 return (asinl(_Left));
 }

static inline long double atan(long double _Left)
 {
 return (atanl(_Left));
 }

static inline long double atan2(long double _Left, long double _Right)
 {
 return (atan2l(_Left, _Right));
 }

static inline long double ceil(long double _Left)
 {
 return (ceill(_Left));
 }

static inline long double cos(long double _Left)
 {
 return (_LSin(_Left, 1));
 }

static inline long double cosh(long double _Left)
 {
 return (_LCosh(_Left, 1.0L));
 }

static inline long double exp(long double _Left)
 {
 return (expl(_Left));
 }

static inline long double fabs(long double _Left)
 {
 return (fabsl(_Left));
 }

static inline long double floor(long double _Left)
 {
 return (floorl(_Left));
 }

static inline long double fmod(long double _Left, long double _Right)
 {
 return (fmodl(_Left, _Right));
 }

static inline long double frexp(long double _Left, int *_Right)
 {
 return (frexpl(_Left, _Right));
 }

static inline long double ldexp(long double _Left, int _Right)
 {
 return (ldexpl(_Left, _Right));
 }

static inline long double log(long double _Left)
 {
 return (_LLog(_Left, 0));
 }

static inline long double log10(long double _Left)
 {
 return (_LLog(_Left, 1));
 }

static inline long double modf(long double _Left, long double *_Right)
 {
 return (modfl(_Left, _Right));
 }

static inline long double pow(long double _Left, long double _Right)
 {
 return (powl(_Left, _Right));
 }

static inline long double sin(long double _Left)
 {
 return (_LSin(_Left, 0));
 }

static inline long double sinh(long double _Left)
 {
 return (_LSinh(_Left, 1.0L));
 }

static inline long double sqrt(long double _Left)
 {

 extern double _sqrtfd(double);
 return _sqrtfd (_Left);




 }

static inline long double tan(long double _Left)
 {
 return (tanl(_Left));
 }

static inline long double tanh(long double _Left)
 {
 return (tanhl(_Left));
 }


static inline long double acosh(long double _Left)
 {
 return (acoshl(_Left));
 }

static inline long double asinh(long double _Left)
 {
 return (asinhl(_Left));
 }

static inline long double atanh(long double _Left)
 {
 return (atanhl(_Left));
 }

static inline long double cbrt(long double _Left)
 {
 return (cbrtl(_Left));
 }

static inline long double copysign(long double _Left, long double _Right)
 {
 return (copysignl(_Left, _Right));
 }

static inline long double erf(long double _Left)
 {
 return (erfl(_Left));
 }

static inline long double erfc(long double _Left)
 {
 return (erfcl(_Left));
 }

static inline long double exp2(long double _Left)
 {
 return (exp2l(_Left));
 }

static inline long double expm1(long double _Left)
 {
 return (expm1l(_Left));
 }

static inline long double fdim(long double _Left, long double _Right)
 {
 return (fdiml(_Left, _Right));
 }

static inline long double fma(long double _Left, long double _Right,
 long double _Addend)
 {
 return (fmal(_Left, _Right, _Addend));
 }

static inline long double fmax(long double _Left, long double _Right)
 {
 return (fmaxl(_Left, _Right));
 }

static inline long double fmin(long double _Left, long double _Right)
 {
 return (fminl(_Left, _Right));
 }

static inline long double hypot(long double _Left, long double _Right)
 {
 return (hypotl(_Left, _Right));
 }

static inline int ilogb(long double _Left)
 {
 return (ilogbl(_Left));
 }

static inline long double lgamma(long double _Left)
 {
 return (lgammal(_Left));
 }

static inline _Longlong llrint(long double _Left)
 {
 return (llrintl(_Left));
 }

static inline _Longlong llround(long double _Left)
 {
 return (llroundl(_Left));
 }

static inline long double log1p(long double _Left)
 {
 return (log1pl(_Left));
 }

static inline long double log2(long double _Left)
 {
 return (_LLog(_Left, -1));
 }

static inline long double logb(long double _Left)
 {
 return (logbl(_Left));
 }

static inline long lrint(long double _Left)
 {
 return (lrintl(_Left));
 }

static inline long lround(long double _Left)
 {
 return (lroundl(_Left));
 }

static inline long double nearbyint(long double _Left)
 {
 return (nearbyintl(_Left));
 }

static inline long double nextafter(long double _Left, long double _Right)
 {
 return (nextafterl(_Left, _Right));
 }

static inline long double nexttoward(long double _Left, long double _Right)
 {
 return (nexttowardl(_Left, _Right));
 }

static inline long double remainder(long double _Left, long double _Right)
 {
 return (remainderl(_Left, _Right));
 }

static inline long double remquo(long double _Left, long double _Right,
 int *_Pval)
 {
 return (remquol(_Left, _Right, _Pval));
 }

static inline long double rint(long double _Left)
 {
 return (rintl(_Left));
 }

static inline long double round(long double _Left)
 {
 return (roundl(_Left));
 }

static inline long double scalbn(long double _Left, int _Right)
 {
 return (scalbnl(_Left, _Right));
 }

static inline long double scalbln(long double _Left, long _Right)
 {
 return (scalblnl(_Left, _Right));
 }

static inline long double tgamma(long double _Left)
 {
 return (tgammal(_Left));
 }

static inline long double trunc(long double _Left)
 {
 return (truncl(_Left));
 }



static inline long double assoc_laguerre(unsigned _Nv, unsigned _Mv,
 long double _Xv)
 {
 return (assoc_laguerrel(_Nv, _Mv, _Xv));
 }

static inline long double assoc_legendre(unsigned _Nv, unsigned _Mv,
 long double _Xv)
 {
 return (assoc_legendrel(_Nv, _Mv, _Xv));
 }

static inline long double beta(long double _Xv, long double _Yv)
 {
 return (betal(_Xv, _Yv));
 }

static inline long double comp_ellint_1(long double _Kv)
 {
 return (comp_ellint_1l(_Kv));
 }

static inline long double comp_ellint_2(long double _Kv)
 {
 return (comp_ellint_2l(_Kv));
 }

static inline long double comp_ellint_3(long double _Kv, long double _Nu)
 {
 return (comp_ellint_3l(_Kv, _Nu));
 }

static inline long double cyl_bessel_i(long double _Nu, long double _Xv)
 {
 return (cyl_bessel_il(_Nu, _Xv));
 }

static inline long double cyl_bessel_j(long double _Nu, long double _Xv)
 {
 return (cyl_bessel_jl(_Nu, _Xv));
 }

static inline long double cyl_bessel_k(long double _Nu, long double _Xv)
 {
 return (cyl_bessel_kl(_Nu, _Xv));
 }

static inline long double cyl_neumann(long double _Nu, long double _Xv)
 {
 return (cyl_neumannl(_Nu, _Xv));
 }

static inline long double ellint_1(long double _Kv, long double _Phi)
 {
 return (ellint_1l(_Kv, _Phi));
 }

static inline long double ellint_2(long double _Kv, long double _Phi)
 {
 return (ellint_2l(_Kv, _Phi));
 }

static inline long double ellint_3(long double _Kv, long double _Nu,
 long double _Phi)
 {
 return (ellint_3l(_Kv, _Nu, _Phi));
 }

static inline long double expint(long double _Xv)
 {
 return (expintl(_Xv));
 }

static inline long double hermite(unsigned _Nv, long double _Xv)
 {
 return (hermitel(_Nv, _Xv));
 }

static inline long double laguerre(unsigned _Nv, long double _Xv)
 {
 return (laguerrel(_Nv, _Xv));
 }

static inline long double legendre(unsigned _Lv, long double _Xv)
 {
 return (legendrel(_Lv, _Xv));
 }

static inline long double riemann_zeta(long double _Xv)
 {
 return (riemann_zetal(_Xv));
 }

static inline long double sph_bessel(unsigned _Nv, long double _Xv)
 {
 return (sph_bessell(_Nv, _Xv));
 }

static inline long double sph_legendre(unsigned _Lv, unsigned _Mv,
 long double _Xv)
 {
 return (sph_legendrel(_Lv, _Mv, _Xv));
 }

static inline long double sph_neumann(unsigned _Nv, long double _Xv)
 {
 return (sph_neumannl(_Nv, _Xv));
 }
# 1691 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/c/math.h" 3
}
# 1760 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/c/math.h" 3





extern "C++" {

 template<class _T1> inline typename _Combined_type<typename _Rc_type<_T1>::_Type, typename _Real_type<_T1>::_Type>::_Type acos(_T1 _Left) { typedef typename _Combined_type<typename _Rc_type<_T1>::_Type, typename _Real_type<_T1>::_Type>::_Type _Tw; return (acos(_Rc_convert(_Left, (_Tw *)0, (typename _Rc_type<_T1>::_Type *)0, (typename _Rc_type<_T1>::_Type *)0))); }
 template<class _T1> inline typename _Combined_type<typename _Rc_type<_T1>::_Type, typename _Real_type<_T1>::_Type>::_Type acosh(_T1 _Left) { typedef typename _Combined_type<typename _Rc_type<_T1>::_Type, typename _Real_type<_T1>::_Type>::_Type _Tw; return (acosh(_Rc_convert(_Left, (_Tw *)0, (typename _Rc_type<_T1>::_Type *)0, (typename _Rc_type<_T1>::_Type *)0))); }
 template<class _T1> inline typename _Combined_type<typename _Rc_type<_T1>::_Type, typename _Real_type<_T1>::_Type>::_Type asin(_T1 _Left) { typedef typename _Combined_type<typename _Rc_type<_T1>::_Type, typename _Real_type<_T1>::_Type>::_Type _Tw; return (asin(_Rc_convert(_Left, (_Tw *)0, (typename _Rc_type<_T1>::_Type *)0, (typename _Rc_type<_T1>::_Type *)0))); }
 template<class _T1> inline typename _Combined_type<typename _Rc_type<_T1>::_Type, typename _Real_type<_T1>::_Type>::_Type asinh(_T1 _Left) { typedef typename _Combined_type<typename _Rc_type<_T1>::_Type, typename _Real_type<_T1>::_Type>::_Type _Tw; return (asinh(_Rc_convert(_Left, (_Tw *)0, (typename _Rc_type<_T1>::_Type *)0, (typename _Rc_type<_T1>::_Type *)0))); }
 template<class _T1> inline typename _Combined_type<typename _Rc_type<_T1>::_Type, typename _Real_type<_T1>::_Type>::_Type atan(_T1 _Left) { typedef typename _Combined_type<typename _Rc_type<_T1>::_Type, typename _Real_type<_T1>::_Type>::_Type _Tw; return (atan(_Rc_convert(_Left, (_Tw *)0, (typename _Rc_type<_T1>::_Type *)0, (typename _Rc_type<_T1>::_Type *)0))); }
 template<class _T1> inline typename _Combined_type<typename _Rc_type<_T1>::_Type, typename _Real_type<_T1>::_Type>::_Type atanh(_T1 _Left) { typedef typename _Combined_type<typename _Rc_type<_T1>::_Type, typename _Real_type<_T1>::_Type>::_Type _Tw; return (atanh(_Rc_convert(_Left, (_Tw *)0, (typename _Rc_type<_T1>::_Type *)0, (typename _Rc_type<_T1>::_Type *)0))); }
 template<class _T1> inline typename _Combined_type<typename _Rc_type<_T1>::_Type, typename _Real_type<_T1>::_Type>::_Type cos(_T1 _Left) { typedef typename _Combined_type<typename _Rc_type<_T1>::_Type, typename _Real_type<_T1>::_Type>::_Type _Tw; return (cos(_Rc_convert(_Left, (_Tw *)0, (typename _Rc_type<_T1>::_Type *)0, (typename _Rc_type<_T1>::_Type *)0))); }
 template<class _T1> inline typename _Combined_type<typename _Rc_type<_T1>::_Type, typename _Real_type<_T1>::_Type>::_Type cosh(_T1 _Left) { typedef typename _Combined_type<typename _Rc_type<_T1>::_Type, typename _Real_type<_T1>::_Type>::_Type _Tw; return (cosh(_Rc_convert(_Left, (_Tw *)0, (typename _Rc_type<_T1>::_Type *)0, (typename _Rc_type<_T1>::_Type *)0))); }
 template<class _T1> inline typename _Combined_type<typename _Rc_type<_T1>::_Type, typename _Real_type<_T1>::_Type>::_Type exp(_T1 _Left) { typedef typename _Combined_type<typename _Rc_type<_T1>::_Type, typename _Real_type<_T1>::_Type>::_Type _Tw; return (exp(_Rc_convert(_Left, (_Tw *)0, (typename _Rc_type<_T1>::_Type *)0, (typename _Rc_type<_T1>::_Type *)0))); }
 template<class _T1> inline typename _Real_type<_T1>::_Type fabs(_T1 _Left) { typedef typename _Combined_type<typename _Rc_type<_T1>::_Type, typename _Real_type<_T1>::_Type>::_Type _Tw; return (fabs(_Rc_convert(_Left, (_Tw *)0, (typename _Rc_type<_T1>::_Type *)0, (typename _Rc_type<_T1>::_Type *)0))); }
 template<class _T1> inline typename _Combined_type<typename _Rc_type<_T1>::_Type, typename _Real_type<_T1>::_Type>::_Type log(_T1 _Left) { typedef typename _Combined_type<typename _Rc_type<_T1>::_Type, typename _Real_type<_T1>::_Type>::_Type _Tw; return (log(_Rc_convert(_Left, (_Tw *)0, (typename _Rc_type<_T1>::_Type *)0, (typename _Rc_type<_T1>::_Type *)0))); }
 template<class _T1> inline typename _Combined_type<typename _Rc_type<_T1>::_Type, typename _Real_type<_T1>::_Type>::_Type log10(_T1 _Left) { typedef typename _Combined_type<typename _Rc_type<_T1>::_Type, typename _Real_type<_T1>::_Type>::_Type _Tw; return (log10(_Rc_convert(_Left, (_Tw *)0, (typename _Rc_type<_T1>::_Type *)0, (typename _Rc_type<_T1>::_Type *)0))); }
 template<class _T1, class _T2> inline typename _Combined_type< typename _Rc_widened<typename _Rc_type<_T1>::_Type, typename _Rc_type<_T2>::_Type>::_Type, typename _Real_widened<typename _Real_type<_T1>::_Type, typename _Real_type<_T2>::_Type>::_Type>::_Type pow(_T1 _Left, _T2 _Right) { typedef typename _Rc_widened<typename _Rc_type<_T1>::_Type, typename _Rc_type<_T2>::_Type>::_Type Carg; typedef typename _Combined_type<Carg, typename _Real_widened<typename _Real_type<_T1>::_Type, typename _Real_type<_T2>::_Type>::_Type>::_Type _Tw; return (pow(_Rc_convert(_Left, (_Tw *)0, (typename _Rc_type<_T1>::_Type *)0, (Carg *)0), _Rc_convert(_Right, (_Tw *)0, (typename _Rc_type<_T2>::_Type *)0, (Carg *)0))); }
 template<class _T1> inline typename _Combined_type<typename _Rc_type<_T1>::_Type, typename _Real_type<_T1>::_Type>::_Type sin(_T1 _Left) { typedef typename _Combined_type<typename _Rc_type<_T1>::_Type, typename _Real_type<_T1>::_Type>::_Type _Tw; return (sin(_Rc_convert(_Left, (_Tw *)0, (typename _Rc_type<_T1>::_Type *)0, (typename _Rc_type<_T1>::_Type *)0))); }
 template<class _T1> inline typename _Combined_type<typename _Rc_type<_T1>::_Type, typename _Real_type<_T1>::_Type>::_Type sinh(_T1 _Left) { typedef typename _Combined_type<typename _Rc_type<_T1>::_Type, typename _Real_type<_T1>::_Type>::_Type _Tw; return (sinh(_Rc_convert(_Left, (_Tw *)0, (typename _Rc_type<_T1>::_Type *)0, (typename _Rc_type<_T1>::_Type *)0))); }
 template<class _T1> inline typename _Combined_type<typename _Rc_type<_T1>::_Type, typename _Real_type<_T1>::_Type>::_Type sqrt(_T1 _Left) { typedef typename _Combined_type<typename _Rc_type<_T1>::_Type, typename _Real_type<_T1>::_Type>::_Type _Tw; return (sqrt(_Rc_convert(_Left, (_Tw *)0, (typename _Rc_type<_T1>::_Type *)0, (typename _Rc_type<_T1>::_Type *)0))); }
 template<class _T1> inline typename _Combined_type<typename _Rc_type<_T1>::_Type, typename _Real_type<_T1>::_Type>::_Type tan(_T1 _Left) { typedef typename _Combined_type<typename _Rc_type<_T1>::_Type, typename _Real_type<_T1>::_Type>::_Type _Tw; return (tan(_Rc_convert(_Left, (_Tw *)0, (typename _Rc_type<_T1>::_Type *)0, (typename _Rc_type<_T1>::_Type *)0))); }
 template<class _T1> inline typename _Combined_type<typename _Rc_type<_T1>::_Type, typename _Real_type<_T1>::_Type>::_Type tanh(_T1 _Left) { typedef typename _Combined_type<typename _Rc_type<_T1>::_Type, typename _Real_type<_T1>::_Type>::_Type _Tw; return (tanh(_Rc_convert(_Left, (_Tw *)0, (typename _Rc_type<_T1>::_Type *)0, (typename _Rc_type<_T1>::_Type *)0))); }

 template<class _T1, class _T2> inline typename _Combined_type< typename _Rc_widened<float, float>::_Type, typename _Real_widened<typename _Real_type<_T1>::_Type, typename _Real_type<_T2>::_Type>::_Type>::_Type atan2(_T1 _Left, _T2 _Right) { typedef typename _Rc_widened<float, float>::_Type Carg; typedef typename _Combined_type<Carg, typename _Real_widened<typename _Real_type<_T1>::_Type, typename _Real_type<_T2>::_Type>::_Type>::_Type _Tw; return (atan2(_Rc_convert(_Left, (_Tw *)0, (float *)0, (Carg *)0), _Rc_convert(_Right, (_Tw *)0, (float *)0, (Carg *)0))); }
 template<class _T1> inline typename _Real_type<_T1>::_Type cbrt(_T1 _Left) { typedef typename _Combined_type<float, typename _Real_type<_T1>::_Type>::_Type _Tw; return (cbrt(_Rc_convert(_Left, (_Tw *)0, (typename _Rc_type<_T1>::_Type *)0, (float *)0))); }
 template<class _T1> inline typename _Real_type<_T1>::_Type ceil(_T1 _Left) { typedef typename _Combined_type<float, typename _Real_type<_T1>::_Type>::_Type _Tw; return (ceil(_Rc_convert(_Left, (_Tw *)0, (typename _Rc_type<_T1>::_Type *)0, (float *)0))); }
 template<class _T1, class _T2> inline typename _Combined_type< typename _Rc_widened<float, float>::_Type, typename _Real_widened<typename _Real_type<_T1>::_Type, typename _Real_type<_T2>::_Type>::_Type>::_Type copysign(_T1 _Left, _T2 _Right) { typedef typename _Rc_widened<float, float>::_Type Carg; typedef typename _Combined_type<Carg, typename _Real_widened<typename _Real_type<_T1>::_Type, typename _Real_type<_T2>::_Type>::_Type>::_Type _Tw; return (copysign(_Rc_convert(_Left, (_Tw *)0, (float *)0, (Carg *)0), _Rc_convert(_Right, (_Tw *)0, (float *)0, (Carg *)0))); }
 template<class _T1> inline typename _Real_type<_T1>::_Type erf(_T1 _Left) { typedef typename _Combined_type<float, typename _Real_type<_T1>::_Type>::_Type _Tw; return (erf(_Rc_convert(_Left, (_Tw *)0, (typename _Rc_type<_T1>::_Type *)0, (float *)0))); }
 template<class _T1> inline typename _Real_type<_T1>::_Type erfc(_T1 _Left) { typedef typename _Combined_type<float, typename _Real_type<_T1>::_Type>::_Type _Tw; return (erfc(_Rc_convert(_Left, (_Tw *)0, (typename _Rc_type<_T1>::_Type *)0, (float *)0))); }
 template<class _T1> inline typename _Real_type<_T1>::_Type exp2(_T1 _Left) { typedef typename _Combined_type<float, typename _Real_type<_T1>::_Type>::_Type _Tw; return (exp2(_Rc_convert(_Left, (_Tw *)0, (typename _Rc_type<_T1>::_Type *)0, (float *)0))); }
 template<class _T1> inline typename _Real_type<_T1>::_Type expm1(_T1 _Left) { typedef typename _Combined_type<float, typename _Real_type<_T1>::_Type>::_Type _Tw; return (expm1(_Rc_convert(_Left, (_Tw *)0, (typename _Rc_type<_T1>::_Type *)0, (float *)0))); }
 template<class _T1, class _T2> inline typename _Combined_type< typename _Rc_widened<float, float>::_Type, typename _Real_widened<typename _Real_type<_T1>::_Type, typename _Real_type<_T2>::_Type>::_Type>::_Type fdim(_T1 _Left, _T2 _Right) { typedef typename _Rc_widened<float, float>::_Type Carg; typedef typename _Combined_type<Carg, typename _Real_widened<typename _Real_type<_T1>::_Type, typename _Real_type<_T2>::_Type>::_Type>::_Type _Tw; return (fdim(_Rc_convert(_Left, (_Tw *)0, (float *)0, (Carg *)0), _Rc_convert(_Right, (_Tw *)0, (float *)0, (Carg *)0))); }
 template<class _T1> inline typename _Real_type<_T1>::_Type floor(_T1 _Left) { typedef typename _Combined_type<float, typename _Real_type<_T1>::_Type>::_Type _Tw; return (floor(_Rc_convert(_Left, (_Tw *)0, (typename _Rc_type<_T1>::_Type *)0, (float *)0))); }
 template<class _T1, class _T2, class _T3> inline typename _Real_widened< typename _Real_widened< typename _Real_type<_T1>::_Type, typename _Real_type<_T2>::_Type>::_Type, typename _Real_type<_T3>::_Type>::_Type fma(_T1 _Left, _T2 _Right, _T3 _Xtra) { typedef typename _Real_widened< typename _Real_widened< typename _Real_type<_T1>::_Type, typename _Real_type<_T2>::_Type>::_Type, typename _Real_type<_T3>::_Type>::_Type _Tw; return (fma((_Tw)_Left, (_Tw)_Right, (_Tw)_Xtra)); }
 template<class _T1, class _T2> inline typename _Combined_type< typename _Rc_widened<float, float>::_Type, typename _Real_widened<typename _Real_type<_T1>::_Type, typename _Real_type<_T2>::_Type>::_Type>::_Type fmax(_T1 _Left, _T2 _Right) { typedef typename _Rc_widened<float, float>::_Type Carg; typedef typename _Combined_type<Carg, typename _Real_widened<typename _Real_type<_T1>::_Type, typename _Real_type<_T2>::_Type>::_Type>::_Type _Tw; return (fmax(_Rc_convert(_Left, (_Tw *)0, (float *)0, (Carg *)0), _Rc_convert(_Right, (_Tw *)0, (float *)0, (Carg *)0))); }
 template<class _T1, class _T2> inline typename _Combined_type< typename _Rc_widened<float, float>::_Type, typename _Real_widened<typename _Real_type<_T1>::_Type, typename _Real_type<_T2>::_Type>::_Type>::_Type fmin(_T1 _Left, _T2 _Right) { typedef typename _Rc_widened<float, float>::_Type Carg; typedef typename _Combined_type<Carg, typename _Real_widened<typename _Real_type<_T1>::_Type, typename _Real_type<_T2>::_Type>::_Type>::_Type _Tw; return (fmin(_Rc_convert(_Left, (_Tw *)0, (float *)0, (Carg *)0), _Rc_convert(_Right, (_Tw *)0, (float *)0, (Carg *)0))); }
 template<class _T1, class _T2> inline typename _Combined_type< typename _Rc_widened<float, float>::_Type, typename _Real_widened<typename _Real_type<_T1>::_Type, typename _Real_type<_T2>::_Type>::_Type>::_Type fmod(_T1 _Left, _T2 _Right) { typedef typename _Rc_widened<float, float>::_Type Carg; typedef typename _Combined_type<Carg, typename _Real_widened<typename _Real_type<_T1>::_Type, typename _Real_type<_T2>::_Type>::_Type>::_Type _Tw; return (fmod(_Rc_convert(_Left, (_Tw *)0, (float *)0, (Carg *)0), _Rc_convert(_Right, (_Tw *)0, (float *)0, (Carg *)0))); }
 template<class _T1> inline typename _Real_type<_T1>::_Type frexp(_T1 _Left, int * _Xtra) { typedef typename _Real_type<_T1>::_Type _Tw; return (frexp((_Tw)_Left, _Xtra)); }
 template<class _T1, class _T2> inline typename _Combined_type< typename _Rc_widened<float, float>::_Type, typename _Real_widened<typename _Real_type<_T1>::_Type, typename _Real_type<_T2>::_Type>::_Type>::_Type hypot(_T1 _Left, _T2 _Right) { typedef typename _Rc_widened<float, float>::_Type Carg; typedef typename _Combined_type<Carg, typename _Real_widened<typename _Real_type<_T1>::_Type, typename _Real_type<_T2>::_Type>::_Type>::_Type _Tw; return (hypot(_Rc_convert(_Left, (_Tw *)0, (float *)0, (Carg *)0), _Rc_convert(_Right, (_Tw *)0, (float *)0, (Carg *)0))); }
 template<class _T1> inline int ilogb(_T1 _Left) { typedef typename _Combined_type<float, typename _Real_type<_T1>::_Type>::_Type _Tw; return (ilogb(_Rc_convert(_Left, (_Tw *)0, (typename _Rc_type<_T1>::_Type *)0, (float *)0))); }
 template<class _T1> inline typename _Real_type<_T1>::_Type ldexp(_T1 _Left, int _Xtra) { typedef typename _Real_type<_T1>::_Type _Tw; return (ldexp((_Tw)_Left, _Xtra)); }
 template<class _T1> inline typename _Real_type<_T1>::_Type lgamma(_T1 _Left) { typedef typename _Combined_type<float, typename _Real_type<_T1>::_Type>::_Type _Tw; return (lgamma(_Rc_convert(_Left, (_Tw *)0, (typename _Rc_type<_T1>::_Type *)0, (float *)0))); }
 template<class _T1> inline _Longlong llrint(_T1 _Left) { typedef typename _Combined_type<float, typename _Real_type<_T1>::_Type>::_Type _Tw; return (llrint(_Rc_convert(_Left, (_Tw *)0, (typename _Rc_type<_T1>::_Type *)0, (float *)0))); }
 template<class _T1> inline _Longlong llround(_T1 _Left) { typedef typename _Combined_type<float, typename _Real_type<_T1>::_Type>::_Type _Tw; return (llround(_Rc_convert(_Left, (_Tw *)0, (typename _Rc_type<_T1>::_Type *)0, (float *)0))); }
 template<class _T1> inline typename _Real_type<_T1>::_Type log1p(_T1 _Left) { typedef typename _Combined_type<float, typename _Real_type<_T1>::_Type>::_Type _Tw; return (log1p(_Rc_convert(_Left, (_Tw *)0, (typename _Rc_type<_T1>::_Type *)0, (float *)0))); }
 template<class _T1> inline typename _Real_type<_T1>::_Type log2(_T1 _Left) { typedef typename _Combined_type<float, typename _Real_type<_T1>::_Type>::_Type _Tw; return (log2(_Rc_convert(_Left, (_Tw *)0, (typename _Rc_type<_T1>::_Type *)0, (float *)0))); }
 template<class _T1> inline typename _Real_type<_T1>::_Type logb(_T1 _Left) { typedef typename _Combined_type<float, typename _Real_type<_T1>::_Type>::_Type _Tw; return (logb(_Rc_convert(_Left, (_Tw *)0, (typename _Rc_type<_T1>::_Type *)0, (float *)0))); }
 template<class _T1> inline long lrint(_T1 _Left) { typedef typename _Combined_type<float, typename _Real_type<_T1>::_Type>::_Type _Tw; return (lrint(_Rc_convert(_Left, (_Tw *)0, (typename _Rc_type<_T1>::_Type *)0, (float *)0))); }
 template<class _T1> inline long lround(_T1 _Left) { typedef typename _Combined_type<float, typename _Real_type<_T1>::_Type>::_Type _Tw; return (lround(_Rc_convert(_Left, (_Tw *)0, (typename _Rc_type<_T1>::_Type *)0, (float *)0))); }
 template<class _T1> inline typename _Real_type<_T1>::_Type nearbyint(_T1 _Left) { typedef typename _Combined_type<float, typename _Real_type<_T1>::_Type>::_Type _Tw; return (nearbyint(_Rc_convert(_Left, (_Tw *)0, (typename _Rc_type<_T1>::_Type *)0, (float *)0))); }
 template<class _T1, class _T2> inline typename _Combined_type< typename _Rc_widened<float, float>::_Type, typename _Real_widened<typename _Real_type<_T1>::_Type, typename _Real_type<_T2>::_Type>::_Type>::_Type nextafter(_T1 _Left, _T2 _Right) { typedef typename _Rc_widened<float, float>::_Type Carg; typedef typename _Combined_type<Carg, typename _Real_widened<typename _Real_type<_T1>::_Type, typename _Real_type<_T2>::_Type>::_Type>::_Type _Tw; return (nextafter(_Rc_convert(_Left, (_Tw *)0, (float *)0, (Carg *)0), _Rc_convert(_Right, (_Tw *)0, (float *)0, (Carg *)0))); }
 template<class _T1> inline typename _Real_type<_T1>::_Type nexttoward(_T1 _Left, long double _Xtra) { typedef typename _Real_type<_T1>::_Type _Tw; return (nexttoward((_Tw)_Left, _Xtra)); }
 template<class _T1, class _T2> inline typename _Combined_type< typename _Rc_widened<float, float>::_Type, typename _Real_widened<typename _Real_type<_T1>::_Type, typename _Real_type<_T2>::_Type>::_Type>::_Type remainder(_T1 _Left, _T2 _Right) { typedef typename _Rc_widened<float, float>::_Type Carg; typedef typename _Combined_type<Carg, typename _Real_widened<typename _Real_type<_T1>::_Type, typename _Real_type<_T2>::_Type>::_Type>::_Type _Tw; return (remainder(_Rc_convert(_Left, (_Tw *)0, (float *)0, (Carg *)0), _Rc_convert(_Right, (_Tw *)0, (float *)0, (Carg *)0))); }
 template<class _T1, class _T2> inline typename _Real_widened<typename _Real_type<_T1>::_Type, typename _Real_type<_T2>::_Type>::_Type remquo(_T1 _Left, _T2 _Right, int * _Xtra) { typedef typename _Real_widened<typename _Real_type<_T1>::_Type, typename _Real_type<_T2>::_Type>::_Type _Tw; return (remquo((_Tw)_Left, (_Tw)_Right, _Xtra)); }
 template<class _T1> inline typename _Real_type<_T1>::_Type rint(_T1 _Left) { typedef typename _Combined_type<float, typename _Real_type<_T1>::_Type>::_Type _Tw; return (rint(_Rc_convert(_Left, (_Tw *)0, (typename _Rc_type<_T1>::_Type *)0, (float *)0))); }
 template<class _T1> inline typename _Real_type<_T1>::_Type round(_T1 _Left) { typedef typename _Combined_type<float, typename _Real_type<_T1>::_Type>::_Type _Tw; return (round(_Rc_convert(_Left, (_Tw *)0, (typename _Rc_type<_T1>::_Type *)0, (float *)0))); }
 template<class _T1> inline typename _Real_type<_T1>::_Type scalbln(_T1 _Left, long _Xtra) { typedef typename _Real_type<_T1>::_Type _Tw; return (scalbln((_Tw)_Left, _Xtra)); }
 template<class _T1> inline typename _Real_type<_T1>::_Type scalbn(_T1 _Left, int _Xtra) { typedef typename _Real_type<_T1>::_Type _Tw; return (scalbn((_Tw)_Left, _Xtra)); }
 template<class _T1> inline typename _Real_type<_T1>::_Type tgamma(_T1 _Left) { typedef typename _Combined_type<float, typename _Real_type<_T1>::_Type>::_Type _Tw; return (tgamma(_Rc_convert(_Left, (_Tw *)0, (typename _Rc_type<_T1>::_Type *)0, (float *)0))); }
 template<class _T1> inline typename _Real_type<_T1>::_Type trunc(_T1 _Left) { typedef typename _Combined_type<float, typename _Real_type<_T1>::_Type>::_Type _Tw; return (trunc(_Rc_convert(_Left, (_Tw *)0, (typename _Rc_type<_T1>::_Type *)0, (float *)0))); }

}
# 13 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/c/cmath" 2 3



namespace std {
using :: abs; using :: acos; using :: asin;
using :: atan; using :: atan2; using :: ceil;
using :: cos; using :: cosh; using :: exp;
using :: fabs; using :: floor; using :: fmod;
using :: frexp; using :: ldexp; using :: log;
using :: log10; using :: modf; using :: pow;
using :: sin; using :: sinh; using :: sqrt;
using :: tan; using :: tanh;

using :: acosf; using :: asinf;
using :: atanf; using :: atan2f; using :: ceilf;
using :: cosf; using :: coshf; using :: expf;
using :: fabsf; using :: floorf; using :: fmodf;
using :: frexpf; using :: ldexpf; using :: logf;
using :: log10f; using :: modff; using :: powf;
using :: sinf; using :: sinhf; using :: sqrtf;
using :: tanf; using :: tanhf;

using :: acosl; using :: asinl;
using :: atanl; using :: atan2l; using :: ceill;
using :: cosl; using :: coshl; using :: expl;
using :: fabsl; using :: floorl; using :: fmodl;
using :: frexpl; using :: ldexpl; using :: logl;
using :: log10l; using :: modfl; using :: powl;
using :: sinl; using :: sinhl; using :: sqrtl;
using :: tanl; using :: tanhl;


using :: float_t; using :: double_t;

using :: acosh; using :: asinh; using :: atanh;
using :: cbrt; using :: erf; using :: erfc;
using :: expm1; using :: exp2;
using :: hypot; using :: ilogb; using :: lgamma;
using :: log1p; using :: log2; using :: logb;
using :: llrint; using :: lrint; using :: nearbyint;
using :: rint; using :: llround; using :: lround;
using :: fdim; using :: fma; using :: fmax; using :: fmin;
using :: round; using :: trunc;
using :: remainder; using :: remquo;
using :: copysign; using :: nan; using :: nextafter;
using :: scalbn; using :: scalbln;
using :: nexttoward; using :: tgamma;

using :: acoshf; using :: asinhf; using :: atanhf;
using :: cbrtf; using :: erff; using :: erfcf;
using :: expm1f; using :: exp2f;
using :: hypotf; using :: ilogbf; using :: lgammaf;
using :: log1pf; using :: log2f; using :: logbf;
using :: llrintf; using :: lrintf; using :: nearbyintf;
using :: rintf; using :: llroundf; using :: lroundf;
using :: fdimf; using :: fmaf; using :: fmaxf; using :: fminf;
using :: roundf; using :: truncf;
using :: remainderf; using :: remquof;
using :: copysignf; using :: nanf;
using :: nextafterf; using :: scalbnf; using :: scalblnf;
using :: nexttowardf; using :: tgammaf;

using :: acoshl; using :: asinhl; using :: atanhl;
using :: cbrtl; using :: erfl; using :: erfcl;
using :: expm1l; using :: exp2l;
using :: hypotl; using :: ilogbl; using :: lgammal;
using :: log1pl; using :: log2l; using :: logbl;
using :: llrintl; using :: lrintl; using :: nearbyintl;
using :: rintl; using :: llroundl; using :: lroundl;
using :: fdiml; using :: fmal; using :: fmaxl; using :: fminl;
using :: roundl; using :: truncl;
using :: remainderl; using :: remquol;
using :: copysignl; using :: nanl;
using :: nextafterl; using :: scalbnl; using :: scalblnl;
using :: nexttowardl; using :: tgammal;


using :: _Rc_type; using :: _Rc_widened;
using :: _Real_type; using :: _Real_widened;
using :: _Combined_type;

using :: fpclassify;
using :: signbit; using :: isfinite; using :: isinf;
using :: isnan; using :: isnormal;
using :: isgreater; using :: isgreaterequal;
using :: isless; using :: islessequal; using :: islessgreater;
using :: isunordered;





using :: assoc_laguerre; using :: assoc_legendre; using :: beta;
using :: comp_ellint_1; using :: comp_ellint_2;
using :: comp_ellint_3; using :: cyl_bessel_i;
using :: cyl_bessel_j; using :: cyl_bessel_k;
using :: cyl_neumann; using :: ellint_1;
using :: ellint_2; using :: ellint_3;
using :: expint; using :: hermite; using :: laguerre;
using :: legendre; using :: riemann_zeta; using :: sph_bessel;
using :: sph_legendre; using :: sph_neumann;

using :: assoc_laguerref; using :: assoc_legendref; using :: betaf;
using :: comp_ellint_1f; using :: comp_ellint_2f;
using :: comp_ellint_3f; using :: cyl_bessel_if;
using :: cyl_bessel_jf; using :: cyl_bessel_kf;
using :: cyl_neumannf; using :: ellint_1f;
using :: ellint_2f; using :: ellint_3f;
using :: expintf; using :: hermitef;
using :: laguerref; using :: legendref; using :: riemann_zetaf;
using :: sph_besself; using :: sph_legendref; using :: sph_neumannf;

using :: assoc_laguerrel; using :: assoc_legendrel; using :: betal;
using :: comp_ellint_1l; using :: comp_ellint_2l;
using :: comp_ellint_3l; using :: cyl_bessel_il;
using :: cyl_bessel_jl; using :: cyl_bessel_kl;
using :: cyl_neumannl; using :: ellint_1l;
using :: ellint_2l; using :: ellint_3l;
using :: expintl; using :: hermitel;
using :: laguerrel; using :: legendrel; using :: riemann_zetal;
using :: sph_bessell; using :: sph_legendrel; using :: sph_neumannl;
# 158 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/c/cmath" 3
 namespace tr1 {
using :: assoc_laguerre; using :: assoc_legendre; using :: beta;
using :: comp_ellint_1; using :: comp_ellint_2;
using :: comp_ellint_3; using :: cyl_bessel_i;
using :: cyl_bessel_j; using :: cyl_bessel_k;
using :: cyl_neumann; using :: ellint_1;
using :: ellint_2; using :: ellint_3;
using :: expint; using :: hermite; using :: laguerre;
using :: legendre; using :: riemann_zeta; using :: sph_bessel;
using :: sph_legendre; using :: sph_neumann;

using :: assoc_laguerref; using :: assoc_legendref; using :: betaf;
using :: comp_ellint_1f; using :: comp_ellint_2f;
using :: comp_ellint_3f; using :: cyl_bessel_if;
using :: cyl_bessel_jf; using :: cyl_bessel_kf;
using :: cyl_neumannf; using :: ellint_1f;
using :: ellint_2f; using :: ellint_3f;
using :: expintf; using :: hermitef;
using :: laguerref; using :: legendref; using :: riemann_zetaf;
using :: sph_besself; using :: sph_legendref; using :: sph_neumannf;

using :: assoc_laguerrel; using :: assoc_legendrel; using :: betal;
using :: comp_ellint_1l; using :: comp_ellint_2l;
using :: comp_ellint_3l; using :: cyl_bessel_il;
using :: cyl_bessel_jl; using :: cyl_bessel_kl;
using :: cyl_neumannl; using :: ellint_1l;
using :: ellint_2l; using :: ellint_3l;
using :: expintl; using :: hermitel;
using :: laguerrel; using :: legendrel; using :: riemann_zetal;
using :: sph_bessell; using :: sph_legendrel; using :: sph_neumannl;
 }

}
# 6 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/xlocnum" 2 3
# 1 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/c/cstdio" 1 3



# 1 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/c/yvals.h" 1 3
# 5 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/c/cstdio" 2 3







# 1 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/c/stdio.h" 1 3








# 58 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/c/stdio.h" 3
typedef struct _Mbstatet
 {
 unsigned long _Wchar;
 unsigned short _Byte, _State;
 } _Mbstatet;
# 75 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/c/stdio.h" 3
typedef struct fpos_t
 {
 _Longlong _Off;
 _Mbstatet _Wstate;
 } fpos_t;



struct _Dnk_filet
 {
 unsigned short _Mode;
 unsigned char _Idx;
 signed char _Handle;

 unsigned char *_Buf, *_Bend, *_Next;
 unsigned char *_Rend, *_Wend, *_Rback;

 _Wchart *_WRback, _WBack[2];
 unsigned char *_Rsave, *_WRend, *_WWend;

 _Mbstatet _Wstate;
 char *_Tmpnam;
 unsigned char _Back[8], _Cbuf;
 };



typedef struct _Dnk_filet _Filet;


typedef _Filet FILE;


extern "C" {
extern FILE _Stdin, _Stdout, _Stderr;

void clearerr(FILE *);
int fclose(FILE *);
int feof(FILE *);
int ferror(FILE *);
int fflush(FILE *);
int fgetc(FILE *);
int fgetpos(FILE *, fpos_t *);
char *fgets(char *, int, FILE *);
FILE *fopen(const char *, const char *);





int fprintf(FILE *, const char *, ...);
int fputc(int, FILE *);
int fputs(const char *, FILE *);
size_t fread(void *, size_t, size_t, FILE *);
FILE *freopen(const char *, const char *,
 FILE *);





int fscanf(FILE * , const char *, ...);
int fseek(FILE *, long, int);
int fsetpos(FILE *, const fpos_t *);
long ftell(FILE *);
size_t fwrite(const void *, size_t, size_t,
 FILE *);
char *gets(char *);
void perror(const char *);





int printf(const char *, ...);
int puts(const char *);
int remove(const char *);
int rename(const char *, const char *);
void rewind(FILE *);





int scanf(const char *, ...);
void setbuf(FILE * , char *);
int setvbuf(FILE * , char *, int, size_t);





int sprintf(char *, const char *, ...);





int sscanf(const char *, const char *, ...);
FILE *tmpfile(void);
char *tmpnam(char *);
int ungetc(int, FILE *);
int vfprintf(FILE *, const char *, _Va_list);
int vprintf(const char *, _Va_list);
int vsprintf(char *, const char *, _Va_list);


FILE *fdopen(signed char, const char *);
int fileno(FILE *);
int getw(FILE *);
int putw(int, FILE *);


long _Fgpos(FILE *, fpos_t *);
int _Flocale(FILE *, const char *, int);
void _Fsetlocale(FILE *, int);
int _Fspos(FILE *, const fpos_t *, long, int);






extern FILE *_Files[20];







int snprintf(char *, size_t,
 const char *, ...);
int vsnprintf(char *, size_t,
 const char *, _Va_list);
int vfscanf(FILE *,
 const char *, _Va_list);
int vscanf(const char *, _Va_list);
int vsscanf(const char *,
 const char *, _Va_list);
# 231 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/c/stdio.h" 3
}
# 251 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/c/stdio.h" 3
inline int getc(FILE *_Str)
 {
 return ((_Str->_Next < _Str->_Rend
  ? *_Str->_Next++ : fgetc(_Str)));
 }

inline int getchar()
 {
 return ((_Files[0]->_Next < _Files[0]->_Rend
 ? *_Files[0]->_Next++ : fgetc(_Files[0])));
 }

inline int putc(int _Ch, FILE *_Str)
 {
 return ((_Str->_Next < _Str->_Wend
  ? (*_Str->_Next++ = (char)_Ch) : fputc(_Ch, _Str)));
 }

inline int putchar(int _Ch)
 {
 return ((_Files[1]->_Next < _Files[1]->_Wend
 ? (*_Files[1]->_Next++ = (char)_Ch) : fputc(_Ch, _Files[1])));
 }
# 311 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/c/stdio.h" 3
extern "C" {
# 323 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/c/stdio.h" 3
errno_t tmpfile_s(FILE * *);
errno_t tmpnam_s(char *, rsize_t);

errno_t fopen_s(FILE * *,
 const char *, const char *);
errno_t freopen_s(FILE * *,
 const char *, const char *, FILE *);

int fprintf_s(FILE *, const char *, ...);
int fscanf_s(FILE *, const char *, ...);
int printf_s(const char *, ...);
int scanf_s(const char *, ...);
int snprintf_s(char *, rsize_t,
 const char *, ...);
int sscanf_s(const char *,
 const char *, ...);
int sprintf_s(char *, rsize_t,
 const char *, ...);
int vfprintf_s(FILE *,
 const char *,
 _Va_list);
int vfscanf_s(FILE *,
 const char *,
 _Va_list);
int vprintf_s(const char *,
 _Va_list);
int vscanf_s(const char *,
 _Va_list);
int vsnprintf_s(char *, rsize_t,
 const char *,
 _Va_list);
int vsprintf_s(char *, rsize_t,
 const char *,
 _Va_list);
int vsscanf_s(const char *,
 const char *,
 _Va_list);

char *gets_s(char *, rsize_t);
}


# 13 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/c/cstdio" 2 3



namespace std {
using :: _Filet; using :: _Mbstatet;

using :: size_t; using :: fpos_t; using :: FILE;
using :: clearerr; using :: fclose; using :: feof;
using :: ferror; using :: fflush; using :: fgetc;
using :: fgetpos; using :: fgets; using :: fopen;
using :: fprintf; using :: fputc; using :: fputs;
using :: fread; using :: freopen; using :: fscanf;
using :: fseek; using :: fsetpos; using :: ftell;
using :: fwrite; using :: getc; using :: getchar;
using :: gets; using :: perror;
using :: putc; using :: putchar;
using :: printf; using :: puts; using :: remove;
using :: rename; using :: rewind; using :: scanf;
using :: setbuf; using :: setvbuf; using :: sprintf;
using :: sscanf; using :: tmpfile; using :: tmpnam;
using :: ungetc; using :: vfprintf; using :: vprintf;
using :: vsprintf;


using :: snprintf; using :: vsnprintf;
using :: vfscanf; using :: vscanf; using :: vsscanf;



 namespace tr1 {
using :: snprintf; using :: vsnprintf;
using :: vfscanf; using :: vscanf; using :: vsscanf;
 }

}
# 7 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/xlocnum" 2 3

# 1 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/streambuf" 1 3



# 1 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/xiosbase" 1 3



# 1 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/xlocale" 1 3




# 1 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/c/cstring" 1 3



# 1 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/c/yvals.h" 1 3
# 5 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/c/cstring" 2 3







# 1 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/c/string.h" 1 3
# 9 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/c/string.h" 3

# 28 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/c/string.h" 3
extern "C" {
int memcmp(const void *, const void *, size_t);
void *memcpy(void *, const void *, size_t);
void *memset(void *, int, size_t);
char *strcat(char *, const char *);
int strcmp(const char *, const char *);
char *strcpy(char *, const char *);
size_t strlen(const char *);

void *memmove(void *, const void *, size_t);
int strcoll(const char *, const char *);
size_t strcspn(const char *, const char *);
char *strerror(int);
char *strncat(char *, const char *, size_t);
int strncmp(const char *, const char *, size_t);
char *strncpy(char *, const char *, size_t);
size_t strspn(const char *, const char *);
char *strtok(char *, const char *);
size_t strxfrm(char *, const char *, size_t);


char *strdup(const char *);
int strcasecmp(const char *, const char *);
int strncasecmp(const char *, const char *, size_t);
char *strtok_r(char *, const char *, char **);


}





extern "C" {
const char *strchr(const char *, int);
const char *strpbrk(const char *, const char *);
const char *strrchr(const char *, int);
const char *strstr(const char *, const char *);
}

extern "C++" {
inline char *strchr(char *_Str, int _Ch)
 {
 return ((char *):: strchr((const char *)_Str, _Ch));
 }

inline char *strpbrk(char *_Str1, const char *_Str2)
 {
 return ((char *):: strpbrk((const char *)_Str1, _Str2));
 }

inline char *strrchr(char *_Str, int _Ch)
 {
 return ((char *):: strrchr((const char *)_Str, _Ch));
 }

inline char *strstr(char *_Str1, const char *_Str2)
 {
 return ((char *):: strstr((const char *)_Str1, _Str2));
 }
}
# 105 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/c/string.h" 3
extern "C" {
const void *memchr(const void *, int, size_t);
}

extern "C++" {
inline void *memchr(void *_Str, int _Ch, size_t _Num)
 {
 return ((void *):: memchr((const void *)_Str, _Ch, _Num));
 }
}
# 125 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/c/string.h" 3
extern "C" {
# 137 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/c/string.h" 3
errno_t memcpy_s(void *, rsize_t,
 const void *, rsize_t);
errno_t memmove_s(void *, rsize_t,
 const void *, rsize_t);

errno_t strcpy_s(char *, rsize_t,
 const char *);
errno_t strncpy_s(char *, rsize_t,
 const char *, rsize_t);
errno_t strcat_s(char *, rsize_t,
 const char *);
errno_t strncat_s(char *, rsize_t,
 const char *, rsize_t);
char *strtok_s(char *, rsize_t *,
 const char *, char **);

errno_t strerror_s(char *, rsize_t, errno_t);
size_t strerrorlen_s(errno_t);

size_t strnlen_s(const char *, size_t);
}


# 13 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/c/cstring" 2 3



namespace std {
using :: size_t; using :: memchr; using :: memcmp;
using :: memcpy; using :: memmove; using :: memset;
using :: strcat; using :: strchr; using :: strcmp;
using :: strcoll; using :: strcpy; using :: strcspn;
using :: strerror; using :: strlen; using :: strncat;
using :: strncmp; using :: strncpy; using :: strpbrk;
using :: strrchr; using :: strspn; using :: strstr;
using :: strtok; using :: strxfrm;
}
# 6 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/xlocale" 2 3
# 1 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/stdexcept" 1 3



# 1 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/exception" 1 3



# 1 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/xstddef" 1 3



# 1 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/c/yvals.h" 1 3
# 5 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/xstddef" 2 3
# 13 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/xstddef" 3
# 1 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/initializer_list" 1 3
# 11 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/initializer_list" 3
# 1 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/cstddef" 1 3



# 1 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/c/yvals.h" 1 3
# 5 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/cstddef" 2 3







# 1 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/c/stddef.h" 1 3








# 44 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/c/stddef.h" 3
typedef _Ptrdifft ptrdiff_t;
# 79 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/c/stddef.h" 3

# 13 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/cstddef" 2 3



namespace std {
using :: ptrdiff_t; using :: size_t;
}
# 12 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/initializer_list" 2 3

namespace std {

template<class _Elem>
 class initializer_list
 {
public:
 typedef _Elem value_type;
 typedef const _Elem& reference;
 typedef const _Elem& const_reference;
 typedef size_t size_type;

 typedef const _Elem* iterator;
 typedef const _Elem* const_iterator;


 constexpr initializer_list() noexcept
  : _M_array(0), _M_len(0)
  {
  }

 constexpr initializer_list(const_iterator __a, size_type __l)
  : _M_array(__a), _M_len(__l)
  {
  }

 constexpr const_iterator
  begin() const noexcept
  {
  return _M_array;
  }

 constexpr const_iterator end() const noexcept
  {
  return begin() + size();
  }

 constexpr size_type size() const noexcept
  {
  return
  _M_len;
  }
# 83 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/initializer_list" 3
private:

 iterator _M_array;
 size_type _M_len;




 };


template<class _Elem> inline
 const _Elem *begin(initializer_list<_Elem> _Ilist)
 {
 return (_Ilist.begin());
 }


template<class _Elem> inline
 const _Elem *end(initializer_list<_Elem> _Ilist)
 {
 return (_Ilist.end());
 }
}
# 14 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/xstddef" 2 3




namespace std {
# 103 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/xstddef" 3
template<bool _Test,
 class _Ty1,
 class _Ty2>
 class _If
 {
public:
 typedef _Ty2 _Type;
 };

template<class _Ty1,
 class _Ty2>
 class _If<true, _Ty1, _Ty2>
 {
public:
 typedef _Ty1 _Type;
 };




 namespace tr1 {
typedef char (&_No)[1];
typedef char (&_Yes)[2];
 }
# 166 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/xstddef" 3
template<class _Arg,
 class _Result>
 struct unary_function
 {
 typedef _Arg argument_type;
 typedef _Result result_type;
 };


template<class _Arg1,
 class _Arg2,
 class _Result>
 struct binary_function
 {
 typedef _Arg1 first_argument_type;
 typedef _Arg2 second_argument_type;
 typedef _Result result_type;
 };
}
# 5 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/exception" 2 3

namespace std {

class exception;
typedef void (*_Prhand)(const exception&);
extern _Prhand _Raise_handler;
void _Throw(const exception&);
# 105 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/exception" 3
class exception
 {
public:
 static _Prhand _Set_raise_handler(_Prhand _Pnew);

 exception() throw ()
  {
  }

 explicit exception(const char *) throw ()
  {
  }

 virtual ~exception() throw ();


 virtual const char *what() const;
# 136 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/exception" 3
 };


class bad_exception
 : public exception
 {
public:
 bad_exception() throw ()
  {
  }





 virtual ~bad_exception() throw ()
  {
  }
# 165 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/exception" 3
 };



typedef void (*terminate_handler)();
typedef void (*unexpected_handler)();


terminate_handler set_terminate(terminate_handler) throw ();
unexpected_handler set_unexpected(unexpected_handler) throw ();
bool uncaught_exception() throw ();
void terminate() __attribute__((__noreturn__));
void unexpected() __attribute__((__noreturn__));
}


# 1 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/xxexception" 1 3




namespace std {
typedef void *exception_ptr;


inline exception_ptr current_exception()
 {
 return (0);
 }

inline void rethrow_exception(exception_ptr)
 {
 int zero = 0;
 if (zero)
  throw;
 }
}

namespace std {

template<class _Excep> inline
 exception_ptr copy_exception(_Excep _Ex)
 {
 try {
 throw _Ex;
 } catch (...) {
 int zero = 0;
 if (zero == 0)
  return (current_exception());
 }
 return (0);
 }


class nested_exception
 {
public:
 nested_exception() throw ()
  : _Myptr(current_exception())
  {
  }

 nested_exception(const nested_exception& _Right)
  : _Myptr(_Right._Myptr)
  {
  }

 const nested_exception& operator=(const nested_exception& _Right)
  {
  _Myptr = _Right._Myptr;
  return (*this);
  }

 virtual ~nested_exception()
  {
  }

 exception_ptr nested_ptr() const
  {
  return (_Myptr);
  }

 void rethrow_nested() const
  {
  rethrow_exception(_Myptr);
  }

private:
 exception_ptr _Myptr;
 };


template<class _Ty>
 struct _Wrapped_with_nested
  : _Ty, nested_exception
 {
 _Wrapped_with_nested(const _Ty _Val)
  : _Ty((_Ty )(_Val))
  {
  }
 };

template <class _Ty> inline
 void _Throw_with_nested0(_Ty _Val, ...)
 {
 throw (_Ty )(_Val);
 }

template <class _Ty> inline
 void _Throw_with_nested0(_Ty _Val,
  const _Wrapped_with_nested<_Ty>*)
 {
 throw _Wrapped_with_nested<_Ty>((_Ty )(_Val));
 }

template <class _Ty> inline
 void _Throw_with_nested(_Ty _Val,
  const volatile void*)
 {
 _Throw_with_nested0(_Val, 0);
 }

template <class _Ty> inline
 void _Throw_with_nested(_Ty _Val,
  const volatile nested_exception*)
 {
 throw (_Ty )(_Val);
 }

template <class _Ty> inline
 void throw_with_nested(_Ty _Val)
 {
 _Throw_with_nested(_Val, &_Val);
 }


inline void _Rethrow_if_nested(const nested_exception *_Val)
 {
 _Val->rethrow_nested();
 }

inline void _Rethrow_if_nested(const void *)
 {
 }

template<class _Ex> inline
 void rethrow_if_nested(const _Ex& _Val)
 {
 _Rethrow_if_nested(&_Val);
 }
}
# 182 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/exception" 2 3
# 5 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/stdexcept" 2 3
# 1 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/xstring" 1 3



# 1 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/xmemory" 1 3




# 1 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/new" 1 3
# 9 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/new" 3
namespace std {



class bad_alloc
 : public ::std:: exception
 {
public:







 bad_alloc() throw ()
  {
  }

 bad_alloc(const char *_Message) throw ()
  {
  }

 virtual const char *what() const throw ()
  {
  return ("bad allocation");
  }
# 51 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/new" 3
 };



class bad_array_new_length
 : public bad_alloc
 {
public:
 bad_array_new_length() throw ()
  : bad_alloc("bad array new length")
  {
  }
 };






}
# 80 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/new" 3
namespace std {

typedef void (*new_handler)();

struct nothrow_t
 {
 };

extern const nothrow_t nothrow;


new_handler set_new_handler(new_handler)
 throw ();

extern new_handler _New_hand;
}
# 106 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/new" 3
void operator delete(void *) throw ();

void *operator new(:: size_t)
 throw (::std:: bad_alloc);


void *operator new(:: size_t, const ::std:: nothrow_t&)
 throw ();

inline void *operator new(:: size_t, void *_Where) throw ()
 {
 return (_Where);
 }
# 127 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/new" 3
void operator delete[](void *) throw ();

void *operator new[](:: size_t)
 throw (::std:: bad_alloc);


void *operator new[](:: size_t, const ::std:: nothrow_t&)
 throw ();

inline void *operator new[](:: size_t, void *_Where) throw ()
 {
 return (_Where);
 }

void operator delete(void *, const ::std:: nothrow_t&)
 throw ();

void operator delete[](void *, const ::std:: nothrow_t&)
 throw ();

void operator delete(void *, void *) throw ();



void operator delete[](void *, void *) throw ();
# 6 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/xmemory" 2 3
# 1 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/xutility" 1 3





# 1 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/utility" 1 3




# 1 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/iosfwd" 1 3





# 1 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/c/cwchar" 1 3



# 1 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/c/yvals.h" 1 3
# 5 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/c/cwchar" 2 3
# 30 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/c/cwchar" 3
# 1 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/c/wchar.h" 1 3








# 34 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/c/wchar.h" 3
typedef _Mbstatet mbstate_t;
# 46 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/c/wchar.h" 3
struct tm;
struct _Dnk_filet;
# 62 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/c/wchar.h" 3
typedef _Wintt wint_t;


extern "C" {

wint_t fgetwc(_Filet *);
wchar_t *fgetws(wchar_t *, int,
 _Filet *);
wint_t fputwc(wchar_t, _Filet *);
int fputws(const wchar_t *,
 _Filet *);
int fwide(_Filet *, int);
int fwprintf(_Filet *,
 const wchar_t *, ...);
int fwscanf(_Filet *,
 const wchar_t *, ...);
wint_t getwc(_Filet *);
wint_t getwchar(void);
wint_t putwc(wchar_t, _Filet *);
wint_t putwchar(wchar_t);
int swprintf(wchar_t *, size_t,
 const wchar_t *, ...);
int swscanf(const wchar_t *,
 const wchar_t *, ...);
wint_t ungetwc(wint_t, _Filet *);
int vfwprintf(_Filet *,
 const wchar_t *, _Va_list);
int vswprintf(wchar_t *, size_t,
 const wchar_t *, _Va_list);
int vwprintf(const wchar_t *, _Va_list);
int wprintf(const wchar_t *, ...);
int wscanf(const wchar_t *, ...);


int vfwscanf(_Filet *,
 const wchar_t *, _Va_list);
int vswscanf(const wchar_t *,
 const wchar_t *, _Va_list);
int vwscanf(const wchar_t *, _Va_list);



size_t mbrlen(const char *,
 size_t, mbstate_t *);
size_t mbrtowc(wchar_t *, const char *,
 size_t, mbstate_t *);
size_t mbsrtowcs(wchar_t *,
 const char **, size_t, mbstate_t *);
int mbsinit(const mbstate_t *);
size_t wcrtomb(char *,
 wchar_t, mbstate_t *);
size_t wcsrtombs(char *,
 const wchar_t **, size_t, mbstate_t *);
long wcstol(const wchar_t *,
 wchar_t **, int);


_Longlong wcstoll(const wchar_t *,
 wchar_t **, int);
_ULonglong wcstoull(const wchar_t *,
 wchar_t **, int);



wchar_t *wcscat(wchar_t *, const wchar_t *);
int wcscmp(const wchar_t *, const wchar_t *);
wchar_t *wcscpy(wchar_t *, const wchar_t *);
size_t wcslen(const wchar_t *);
int wcsncmp(const wchar_t *, const wchar_t *, size_t);
wchar_t *wcsncpy(wchar_t *,
 const wchar_t *, size_t);

int wcscoll(const wchar_t *, const wchar_t *);
size_t wcscspn(const wchar_t *, const wchar_t *);
wchar_t *wcsncat(wchar_t *,
 const wchar_t *, size_t);
size_t wcsspn(const wchar_t *, const wchar_t *);
wchar_t *wcstok(wchar_t *, const wchar_t *,
 wchar_t **);
size_t wcsxfrm(wchar_t *,
 const wchar_t *, size_t);
int wmemcmp(const wchar_t *, const wchar_t *, size_t);
wchar_t *wmemcpy(wchar_t *,
 const wchar_t *, size_t);
wchar_t *wmemmove(wchar_t *, const wchar_t *, size_t);
wchar_t *wmemset(wchar_t *, wchar_t, size_t);


size_t wcsftime(wchar_t *, size_t,
 const wchar_t *, const struct tm *);

wint_t _Btowc(int);
int _Wctob(wint_t);
double _WStod(const wchar_t *, wchar_t **, long);
float _WStof(const wchar_t *, wchar_t **, long);
long double _WStold(const wchar_t *, wchar_t **, long);
unsigned long _WStoul(const wchar_t *, wchar_t **, int);
}





extern "C" {
const wchar_t *wmemchr(const wchar_t *, wchar_t, size_t);
}

extern "C++" {
inline wchar_t *wmemchr(wchar_t *_Str, wchar_t _Ch, size_t _Num)
 {
 return ((wchar_t *)wmemchr((const wchar_t *)_Str, _Ch, _Num));
 }
}
# 184 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/c/wchar.h" 3
# 1 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/c/xwcstod.h" 1 3






extern "C" {
inline double wcstod(const wchar_t * _Str,
 wchar_t ** _Endptr)
 {return (_WStod(_Str, _Endptr, 0));
 }

inline unsigned long wcstoul(const wchar_t * _Str,
 wchar_t ** _Endptr, int _Base)
 {return (_WStoul(_Str, _Endptr, _Base));
 }
}
# 185 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/c/wchar.h" 2 3
# 1 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/c/xwstr.h" 1 3






extern "C" {
const wchar_t *wcschr(const wchar_t *, wchar_t);
const wchar_t *wcspbrk(const wchar_t *, const wchar_t *);
const wchar_t *wcsrchr(const wchar_t *, wchar_t);
const wchar_t *wcsstr(const wchar_t *, const wchar_t *);
}

extern "C++" {
inline wchar_t *wcschr(wchar_t *_Str, wchar_t _Ch)
 {return ((wchar_t *)wcschr((const wchar_t *)_Str, _Ch));
 }

inline wchar_t *wcspbrk(wchar_t *_Str1, const wchar_t *_Str2)
 {return ((wchar_t *)wcspbrk((const wchar_t *)_Str1, _Str2));
 }

inline wchar_t *wcsrchr(wchar_t *_Str, wchar_t _Ch)
 {return ((wchar_t *)wcsrchr((const wchar_t *)_Str, _Ch));
 }

inline wchar_t *wcsstr(wchar_t *_Str1, const wchar_t *_Str2)
 {return ((wchar_t *)wcsstr((const wchar_t *)_Str1, _Str2));
 }
}

extern "C" {
inline wint_t btowc(int _By)
 {
 return (_Btowc(_By));
 }

inline int wctob(wint_t _Wc)
 {
 return (_Wctob(_Wc));
 }


inline float wcstof(const wchar_t * _Str,
 wchar_t ** _Endptr)
 {
 return (_WStof(_Str, _Endptr, 0));
 }

inline long double wcstold(const wchar_t * _Str,
 wchar_t ** _Endptr)
 {
 return (_WStold(_Str, _Endptr, 0));
 }


}
# 186 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/c/wchar.h" 2 3


extern "C" {
# 200 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/c/wchar.h" 3
int fwprintf_s(_Filet *,
 const wchar_t *, ...);
int fwscanf_s(_Filet *,
 const wchar_t *, ...);
int snwprintf_s(wchar_t *, rsize_t,
 const wchar_t *, ...);
int swprintf_s(wchar_t *, rsize_t,
 const wchar_t *, ...);
int swscanf_s(const wchar_t *,
 const wchar_t *, ...);
int vfwprintf_s(_Filet *,
 const wchar_t *,
 _Va_list);
int vfwscanf_s(_Filet *,
 const wchar_t *,
 _Va_list);
int vsnwprintf_s(wchar_t *, rsize_t,
 const wchar_t *,
 _Va_list);
int vswprintf_s(wchar_t *, rsize_t,
 const wchar_t *,
 _Va_list);
int vswscanf_s(const wchar_t *,
 const wchar_t *,
 _Va_list);
int vwprintf_s(const wchar_t *,
 _Va_list);
int vwscanf_s(const wchar_t *,
 _Va_list);
int wprintf_s(const wchar_t *, ...);
int wscanf_s(const wchar_t *, ...);

errno_t wcscpy_s(wchar_t *, rsize_t,
 const wchar_t *);
errno_t wcsncpy_s(wchar_t *, rsize_t,
 const wchar_t *, rsize_t);
errno_t wmemcpy_s(wchar_t *, rsize_t,
 const wchar_t *, rsize_t);
errno_t wmemmove_s(wchar_t *, rsize_t,
 const wchar_t *, rsize_t);
errno_t wcscat_s(wchar_t *, rsize_t,
 const wchar_t *);
errno_t wcsncat_s(wchar_t *, rsize_t,
 const wchar_t *, rsize_t);
wchar_t *wcstok_s(wchar_t *, rsize_t *,
 const wchar_t *, wchar_t **);

size_t wcsnlen_s(const wchar_t *, size_t);

errno_t wcrtomb_s(size_t *,
 char *, rsize_t,
 wchar_t,
 mbstate_t *);
errno_t mbsrtowcs_s(size_t *,
 wchar_t *, rsize_t,
 const char **, rsize_t,
 mbstate_t *);
errno_t wcsrtombs_s(size_t *,
 char *, rsize_t,
 const wchar_t **, rsize_t,
 mbstate_t *);
}


# 31 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/c/cwchar" 2 3





namespace std {
using :: mbstate_t; using :: size_t; using :: tm; using :: wint_t;

using :: btowc; using :: fgetwc; using :: fgetws; using :: fputwc;
using :: fputws; using :: fwide; using :: fwprintf;
using :: fwscanf; using :: getwc; using :: getwchar;
using :: mbrlen; using :: mbrtowc; using :: mbsrtowcs;
using :: mbsinit; using :: putwc; using :: putwchar;
using :: swprintf; using :: swscanf; using :: ungetwc;
using :: vfwprintf; using :: vswprintf; using :: vwprintf;
using :: wcrtomb; using :: wprintf; using :: wscanf;
using :: wcsrtombs; using :: wcstol; using :: wcscat;
using :: wcschr; using :: wcscmp; using :: wcscoll;
using :: wcscpy; using :: wcscspn; using :: wcslen;
using :: wcsncat; using :: wcsncmp; using :: wcsncpy;
using :: wcspbrk; using :: wcsrchr; using :: wcsspn;
using :: wcstod; using :: wcstoul; using :: wcsstr;
using :: wcstok; using :: wcsxfrm; using :: wctob;
using :: wmemchr; using :: wmemcmp; using :: wmemcpy;
using :: wmemmove; using :: wmemset; using :: wcsftime;


using :: vfwscanf; using :: vswscanf; using :: vwscanf;
using :: wcstof; using :: wcstold;
using :: wcstoll; using :: wcstoull;



 namespace tr1 {
using :: vfwscanf; using :: vswscanf; using :: vwscanf;
using :: wcstof; using :: wcstold;
using :: wcstoll; using :: wcstoull;
 }

}
# 7 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/iosfwd" 2 3


namespace std {





typedef long streamoff;
typedef int streamsize;
# 27 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/iosfwd" 3
extern fpos_t _Fpz;
extern const streamoff _BADOFF;


template<class _Statetype>
 class fpos
 {
 typedef fpos<_Statetype> _Myt;

public:
 fpos(streamoff _Off = 0)
  : _Myoff(_Off), _Fpos(_Fpz), _Mystate(_Stz)
  {
  }

 fpos(_Statetype _State, fpos_t _Fileposition)
  : _Myoff(0), _Fpos(_Fileposition), _Mystate(_State)
  {
  }

 _Statetype state() const
  {
  return (_Mystate);
  }

 void state(_Statetype _State)
  {
  _Mystate = _State;
  }

 fpos_t seekpos() const
  {
  return (_Fpos);
  }

 operator streamoff() const
  {
  return ((streamoff)(_Myoff + ((_Fpos)._Off)));
  }

 streamoff operator-(const _Myt& _Right) const
  {
  return ((streamoff)*this - (streamoff)_Right);
  }

 _Myt& operator+=(streamoff _Off)
  {
  _Myoff += _Off;
  return (*this);
  }

 _Myt& operator-=(streamoff _Off)
  {
  _Myoff -= _Off;
  return (*this);
  }

 _Myt operator+(streamoff _Off) const
  {
  _Myt _Tmp = *this;
  return (_Tmp += _Off);
  }

 _Myt operator-(streamoff _Off) const
  {
  _Myt _Tmp = *this;
  return (_Tmp -= _Off);
  }

 bool operator==(const _Myt& _Right) const
  {
  return ((streamoff)*this == (streamoff)_Right);
  }

 bool operator==(streamoff _Right) const
  {
  return ((streamoff)*this == _Right);
  }

 bool operator!=(const _Myt& _Right) const
  {
  return (!(*this == _Right));
  }

private:
 static const _Statetype _Stz;
 streamoff _Myoff;
 fpos_t _Fpos;
 _Statetype _Mystate;
 };


template<class _Statetype>
 const _Statetype fpos<_Statetype>::_Stz = _Statetype();
# 138 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/iosfwd" 3
typedef fpos<_Mbstatet> streampos;


typedef streampos wstreampos;


template<class _Elem,
 class _Int_type>
 struct _Char_traits
 {
 typedef _Elem char_type;
 typedef _Int_type int_type;
 typedef streampos pos_type;
 typedef streamoff off_type;
 typedef _Mbstatet state_type;

 static int compare(
  const _Elem *_First1,
  const _Elem *_First2, size_t _Count)
  {
  for (; 0 < _Count; --_Count, ++_First1, ++_First2)
   if (!eq(*_First1, *_First2))
    return (lt(*_First1, *_First2) ? -1 : +1);
  return (0);
  }

 static size_t length(const _Elem *_First)
  {
  size_t _Count;
  for (_Count = 0; !eq(*_First, _Elem()); ++_First)
   ++_Count;
  return (_Count);
  }

 static _Elem *copy(
  _Elem *_First1,
  const _Elem *_First2, size_t _Count)
  {
  _Elem *_Next = _First1;
  for (; 0 < _Count; --_Count, ++_Next, ++_First2)
   assign(*_Next, *_First2);
  return (_First1);
  }

 static const _Elem *find(
  const _Elem *_First,
  size_t _Count, const _Elem& _Ch)
  {
  for (; 0 < _Count; --_Count, ++_First)
   if (eq(*_First, _Ch))
    return (_First);
  return (0);
  }

 static _Elem *move(
  _Elem *_First1,
  const _Elem *_First2, size_t _Count)
  {
  _Elem *_Next = _First1;
  if (_First2 < _Next && _Next < _First2 + _Count)
   for (_Next += _Count, _First2 += _Count; 0 < _Count; --_Count)
    assign(*--_Next, *--_First2);
  else
   for (; 0 < _Count; --_Count, ++_Next, ++_First2)
    assign(*_Next, *_First2);
  return (_First1);
  }

 static _Elem *assign(
  _Elem *_First,
  size_t _Count, _Elem _Ch)
  {
  _Elem *_Next = _First;
  for (; 0 < _Count; --_Count, ++_Next)
   assign(*_Next, _Ch);
  return (_First);
  }

 static void assign(_Elem& _Left, const _Elem& _Right)
  {
  _Left = _Right;
  }

 static bool eq(const _Elem& _Left, const _Elem& _Right)
  {
  return (_Left == _Right);
  }

 static bool lt(const _Elem& _Left, const _Elem& _Right)
  {
  return (_Left < _Right);
  }

 static _Elem to_char_type(const int_type& _Meta)
  {
  return ((_Elem)_Meta);
  }

 static int_type to_int_type(const _Elem& _Ch)
  {
  return ((int_type)_Ch);
  }

 static bool eq_int_type(const int_type& _Left,
  const int_type& _Right)
  {
  return (_Left == _Right);
  }

 static int_type not_eof(const int_type& _Meta)
  {
  return (_Meta != eof() ? (int_type)_Meta : (int_type)!eof());
  }

 static int_type eof()
  {
  return ((int_type)(-1));
  }
 };


template<class _Elem>
 struct char_traits
  : public _Char_traits<_Elem, long>
 {
 };



template<>
 struct char_traits<char16_t>
 : public _Char_traits<char16_t, unsigned short>
 {
 };


template<>
 struct char_traits<char32_t>
 : public _Char_traits<char32_t, unsigned long>
 {
 };



template<>
 struct char_traits<wchar_t>
 {
 typedef wchar_t _Elem;
 typedef _Elem char_type;
 typedef wint_t int_type;
 typedef streampos pos_type;
 typedef streamoff off_type;
 typedef _Mbstatet state_type;

 static int compare(const _Elem *_First1, const _Elem *_First2,
  size_t _Count)
  {
  return (:: wmemcmp(_First1, _First2, _Count));
  }

 static size_t length(const _Elem *_First)
  {
  return (:: wcslen(_First));
  }

 static _Elem *copy(_Elem *_First1, const _Elem *_First2,
  size_t _Count)
  {
  return ((_Elem *):: wmemcpy(_First1, _First2, _Count));
  }

 static const _Elem *find(const _Elem *_First, size_t _Count,
  const _Elem& _Ch)
  {
  return ((const _Elem *):: wmemchr(_First, _Ch, _Count));
  }

 static _Elem *move(_Elem *_First1, const _Elem *_First2,
  size_t _Count)
  {
  return ((_Elem *):: wmemmove(_First1, _First2, _Count));
  }

 static _Elem *assign(_Elem *_First, size_t _Count, _Elem _Ch)
  {
  return ((_Elem *):: wmemset(_First, _Ch, _Count));
  }

 static void assign(_Elem& _Left, const _Elem& _Right)
  {
  _Left = _Right;
  }

 static bool eq(const _Elem& _Left, const _Elem& _Right)
  {
  return (_Left == _Right);
  }

 static bool lt(const _Elem& _Left, const _Elem& _Right)
  {
  return (_Left < _Right);
  }

 static _Elem to_char_type(const int_type& _Meta)
  {
  return (_Meta);
  }

 static int_type to_int_type(const _Elem& _Ch)
  {
  return (_Ch);
  }

 static bool eq_int_type(const int_type& _Left,
  const int_type& _Right)
  {
  return (_Left == _Right);
  }

 static int_type not_eof(const int_type& _Meta)
  {
  return (_Meta != eof() ? _Meta : !eof());
  }

 static int_type eof()
  {
  return (((:: wint_t)(-1)));
  }
 };


template<> struct char_traits<char>
 {
 typedef char _Elem;
 typedef _Elem char_type;
 typedef int int_type;
 typedef streampos pos_type;
 typedef streamoff off_type;
 typedef _Mbstatet state_type;

 static int compare(const _Elem *_First1, const _Elem *_First2,
  size_t _Count)
  {
  return (:: memcmp(_First1, _First2, _Count));
  }

 static size_t length(const _Elem *_First)
  {
  return (:: strlen(_First));
  }

 static _Elem *copy(_Elem *_First1, const _Elem *_First2,
  size_t _Count)
  {
  return ((_Elem *):: memcpy(_First1, _First2, _Count));
  }

 static const _Elem *find(const _Elem *_First, size_t _Count,
  const _Elem& _Ch)
  {
  return ((const _Elem *):: memchr(_First, _Ch, _Count));
  }

 static _Elem *move(_Elem *_First1, const _Elem *_First2,
  size_t _Count)
  {
  return ((_Elem *):: memmove(_First1, _First2, _Count));
  }

 static _Elem *assign(_Elem *_First, size_t _Count, _Elem _Ch)
  {
  return ((_Elem *):: memset(_First, _Ch, _Count));
  }

 static void assign(_Elem& _Left, const _Elem& _Right)
  {
  _Left = _Right;
  }

 static bool eq(const _Elem& _Left, const _Elem& _Right)
  {
  return (_Left == _Right);
  }

 static bool lt(const _Elem& _Left, const _Elem& _Right)
  {
  return ((unsigned char)_Left < (unsigned char)_Right);
  }

 static _Elem to_char_type(const int_type& _Meta)
  {
  return ((_Elem)_Meta);
  }

 static int_type to_int_type(const _Elem& _Ch)
  {
  return ((unsigned char)_Ch);
  }

 static bool eq_int_type(const int_type& _Left,
  const int_type& _Right)
  {
  return (_Left == _Right);
  }

 static int_type not_eof(const int_type& _Meta)
  {
  return (_Meta != eof() ? _Meta : !eof());
  }

 static int_type eof()
  {
  return ((-1));
  }
 };


template<class _Ty>
 class allocator;
class ios_base;
template<class _Elem,
 class _Traits = char_traits<_Elem> >
 class basic_ios;
template<class _Elem,
 class _Traits = char_traits<_Elem> >
 class istreambuf_iterator;
template<class _Elem,
 class _Traits = char_traits<_Elem> >
 class ostreambuf_iterator;
template<class _Elem,
 class _Traits = char_traits<_Elem> >
 class basic_streambuf;
template<class _Elem,
 class _Traits = char_traits<_Elem> >
 class basic_istream;
template<class _Elem,
 class _Traits = char_traits<_Elem> >
 class basic_ostream;
template<class _Elem,
 class _Traits = char_traits<_Elem> >
 class basic_iostream;
template<class _Elem,
 class _Traits = char_traits<_Elem>,
 class _Alloc = allocator<_Elem> >
 class basic_stringbuf;
template<class _Elem,
 class _Traits = char_traits<_Elem>,
 class _Alloc = allocator<_Elem> >
 class basic_istringstream;
template<class _Elem,
 class _Traits = char_traits<_Elem>,
 class _Alloc = allocator<_Elem> >
 class basic_ostringstream;
template<class _Elem,
 class _Traits = char_traits<_Elem>,
 class _Alloc = allocator<_Elem> >
 class basic_stringstream;
template<class _Elem,
 class _Traits = char_traits<_Elem> >
 class basic_filebuf;
template<class _Elem,
 class _Traits = char_traits<_Elem> >
 class basic_ifstream;
template<class _Elem,
 class _Traits = char_traits<_Elem> >
 class basic_ofstream;
template<class _Elem,
 class _Traits = char_traits<_Elem> >
 class basic_fstream;


typedef basic_ios<char, char_traits<char> > ios;
typedef basic_streambuf<char, char_traits<char> > streambuf;
typedef basic_istream<char, char_traits<char> > istream;
typedef basic_ostream<char, char_traits<char> > ostream;
typedef basic_iostream<char, char_traits<char> > iostream;
typedef basic_stringbuf<char, char_traits<char>,
 allocator<char> > stringbuf;
typedef basic_istringstream<char, char_traits<char>,
 allocator<char> > istringstream;
typedef basic_ostringstream<char, char_traits<char>,
 allocator<char> > ostringstream;
typedef basic_stringstream<char, char_traits<char>,
 allocator<char> > stringstream;
typedef basic_filebuf<char, char_traits<char> > filebuf;
typedef basic_ifstream<char, char_traits<char> > ifstream;
typedef basic_ofstream<char, char_traits<char> > ofstream;
typedef basic_fstream<char, char_traits<char> > fstream;


typedef basic_filebuf<char, char_traits<char> > stdiobuf;
typedef basic_fstream<char, char_traits<char> > stdiostream;



typedef basic_ios<wchar_t, char_traits<wchar_t> > wios;
typedef basic_streambuf<wchar_t, char_traits<wchar_t> >
 wstreambuf;
typedef basic_istream<wchar_t, char_traits<wchar_t> > wistream;
typedef basic_ostream<wchar_t, char_traits<wchar_t> > wostream;
typedef basic_iostream<wchar_t, char_traits<wchar_t> > wiostream;
typedef basic_stringbuf<wchar_t, char_traits<wchar_t>,
 allocator<wchar_t> > wstringbuf;
typedef basic_istringstream<wchar_t, char_traits<wchar_t>,
 allocator<wchar_t> > wistringstream;
typedef basic_ostringstream<wchar_t, char_traits<wchar_t>,
 allocator<wchar_t> > wostringstream;
typedef basic_stringstream<wchar_t, char_traits<wchar_t>,
 allocator<wchar_t> > wstringstream;
typedef basic_filebuf<wchar_t, char_traits<wchar_t> > wfilebuf;
typedef basic_ifstream<wchar_t, char_traits<wchar_t> > wifstream;
typedef basic_ofstream<wchar_t, char_traits<wchar_t> > wofstream;
typedef basic_fstream<wchar_t, char_traits<wchar_t> > wfstream;
}




using ::std:: ios;
using ::std:: streambuf;
using ::std:: istream;
using ::std:: ostream;
using ::std:: iostream;

using ::std:: filebuf;
using ::std:: ifstream;
using ::std:: ofstream;
using ::std:: fstream;

using ::std:: stdiobuf;
using ::std:: stdiostream;
# 6 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/utility" 2 3


# 1 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/type_traits" 1 3



# 1 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/limits" 1 3




# 1 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/cfloat" 1 3



# 1 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/c/yvals.h" 1 3
# 5 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/cfloat" 2 3

# 1 "/opt/microchip/xc32/v2.15/lib/gcc/pic32mx/4.8.3/include/float.h" 1 3 4
# 7 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/cfloat" 2 3
# 6 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/limits" 2 3





namespace std {
# 24 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/limits" 3
typedef enum
 {
 denorm_indeterminate = -1,
 denorm_absent = 0,
 denorm_present = 1}
  float_denorm_style;


typedef enum
 {
 round_indeterminate = -1,
 round_toward_zero = 0,
 round_to_nearest = 1,
 round_toward_infinity = 2,
 round_toward_neg_infinity = 3}
  float_round_style;


struct _Num_base
 {
 static const float_denorm_style has_denorm = (float_denorm_style)(denorm_absent);
 static const bool has_denorm_loss = (bool)(false);
 static const bool has_infinity = (bool)(false);
 static const bool has_quiet_NaN = (bool)(false);
 static const bool has_signaling_NaN = (bool)(false);
 static const bool is_bounded = (bool)(false);
 static const bool is_exact = (bool)(false);
 static const bool is_iec559 = (bool)(false);
 static const bool is_integer = (bool)(false);
 static const bool is_modulo = (bool)(false);
 static const bool is_signed = (bool)(false);
 static const bool is_specialized = (bool)(false);
 static const bool tinyness_before = (bool)(false);
 static const bool traps = (bool)(false);
 static const float_round_style round_style = (float_round_style)(round_toward_zero);
 static const int digits = (int)(0);
 static const int digits10 = (int)(0);


 static const int max_digits10 = (int)(0);


 static const int max_exponent = (int)(0);
 static const int max_exponent10 = (int)(0);
 static const int min_exponent = (int)(0);
 static const int min_exponent10 = (int)(0);
 static const int radix = (int)(0);
 };


template<class _Ty>
 class numeric_limits
  : public _Num_base
 {
public:
 static _Ty (min)() throw ()
  {
  return (_Ty(0));
  }

 static _Ty (max)() throw ()
  {
  return (_Ty(0));
  }


 static _Ty lowest() throw ()
  {
  return ((min)());
  }


 static _Ty epsilon() throw ()
  {
  return (_Ty(0));
  }

 static _Ty round_error() throw ()
  {
  return (_Ty(0));
  }

 static _Ty denorm_min() throw ()
  {
  return (_Ty(0));
  }

 static _Ty infinity() throw ()
  {
  return (_Ty(0));
  }

 static _Ty quiet_NaN() throw ()
  {
  return (_Ty(0));
  }

 static _Ty signaling_NaN() throw ()
  {
  return (_Ty(0));
  }
 };

template<class _Ty>
 class numeric_limits<const _Ty>
  : public numeric_limits<_Ty>
 {
 };

template<class _Ty>
 class numeric_limits<volatile _Ty>
  : public numeric_limits<_Ty>
 {
 };

template<class _Ty>
 class numeric_limits<const volatile _Ty>
  : public numeric_limits<_Ty>
 {
 };


struct _Num_int_base
 : public _Num_base
 {
 static const bool is_bounded = (bool)(true);
 static const bool is_exact = (bool)(true);
 static const bool is_integer = (bool)(true);
 static const bool is_modulo = (bool)(true);
 static const bool is_specialized = (bool)(true);
 static const int radix = (int)(2);
 };


struct _Num_float_base
 : public _Num_base
 {
 static const float_denorm_style has_denorm = (float_denorm_style)(denorm_present);
 static const bool has_denorm_loss = (bool)(true);
 static const bool has_infinity = (bool)(true);
 static const bool has_quiet_NaN = (bool)(true);
 static const bool has_signaling_NaN = (bool)(true);
 static const bool is_bounded = (bool)(true);
 static const bool is_exact = (bool)(false);
 static const bool is_iec559 = (bool)(true);
 static const bool is_integer = (bool)(false);
 static const bool is_modulo = (bool)(false);
 static const bool is_signed = (bool)(true);
 static const bool is_specialized = (bool)(true);
 static const bool tinyness_before = (bool)(true);
 static const bool traps = (bool)(true);
 static const float_round_style round_style = (float_round_style)(round_to_nearest);
 static const int radix = (int)(2);
 };


template<> class numeric_limits<char>
 : public _Num_int_base
 {
public:
 typedef char _Ty;

 static _Ty (min)() throw ()
  {
  return ((-127 - 1));
  }

 static _Ty (max)() throw ()
  {
  return (127);
  }


 static _Ty lowest() throw ()
  {
  return ((min)());
  }


 static _Ty epsilon() throw ()
  {
  return (0);
  }

 static _Ty round_error() throw ()
  {
  return (0);
  }

 static _Ty denorm_min() throw ()
  {
  return (0);
  }

 static _Ty infinity() throw ()
  {
  return (0);
  }

 static _Ty quiet_NaN() throw ()
  {
  return (0);
  }

 static _Ty signaling_NaN() throw ()
  {
  return (0);
  }

 static const bool is_signed = (bool)((-127 - 1) != 0);
 static const int digits = (int)(8 - ((-127 - 1) != 0 ? 1 : 0));
 static const int digits10 = (int)((8 - ((-127 - 1) != 0 ? 1 : 0)) * 301L / 1000)
                ;


 static const int max_digits10 = (int)(2 + (8 - ((-127 - 1) != 0 ? 1 : 0)) * 301L / 1000)
                ;

 };


template<> class numeric_limits<wchar_t>
 : public _Num_int_base
 {
public:
 typedef wchar_t _Ty;

 static _Ty (min)() throw ()
  {
  return ((_Ty)(-0x7fffffff - 1));
  }

 static _Ty (max)() throw ()
  {
  return ((_Ty)0x7fffffff);
  }


 static _Ty lowest() throw ()
  {
  return ((min)());
  }


 static _Ty epsilon() throw ()
  {
  return (0);
  }

 static _Ty round_error() throw ()
  {
  return (0);
  }

 static _Ty denorm_min() throw ()
  {
  return (0);
  }

 static _Ty infinity() throw ()
  {
  return (0);
  }

 static _Ty quiet_NaN() throw ()
  {
  return (0);
  }

 static _Ty signaling_NaN() throw ()
  {
  return (0);
  }

 static const bool is_signed = (bool)((-0x7fffffff - 1) != 0);
 static const int digits = (int)(8 * sizeof (wchar_t) - ((-0x7fffffff - 1) != 0 ? 1 : 0))
                             ;
 static const int digits10 = (int)((8 * sizeof (wchar_t) - ((-0x7fffffff - 1) != 0 ? 1 : 0)) * 301L / 1000)
                                            ;


 static const int max_digits10 = (int)(2 + (8 * sizeof (wchar_t) - ((-0x7fffffff - 1) != 0 ? 1 : 0)) * 301L / 1000)
                                            ;

 };


template<> class numeric_limits<_Bool>
 : public _Num_int_base
 {
public:
 typedef bool _Ty;

 static _Ty (min)() throw ()
  {
  return (false);
  }

 static _Ty (max)() throw ()
  {
  return (true);
  }


 static _Ty lowest() throw ()
  {
  return ((min)());
  }


 static _Ty epsilon() throw ()
  {
  return (0);
  }

 static _Ty round_error() throw ()
  {
  return (0);
  }

 static _Ty denorm_min() throw ()
  {
  return (0);
  }

 static _Ty infinity() throw ()
  {
  return (0);
  }

 static _Ty quiet_NaN() throw ()
  {
  return (0);
  }

 static _Ty signaling_NaN() throw ()
  {
  return (0);
  }

 static const bool is_modulo = (bool)(false);
 static const bool is_signed = (bool)(false);
 static const int digits = (int)(1);
 static const int digits10 = (int)(0);


 static const int max_digits10 = (int)(0);

 };


template<> class numeric_limits<signed char>
 : public _Num_int_base
 {
public:
 typedef signed char _Ty;

 static _Ty (min)() throw ()
  {
  return ((-127 - 1));
  }

 static _Ty (max)() throw ()
  {
  return (127);
  }


 static _Ty lowest() throw ()
  {
  return ((min)());
  }


 static _Ty epsilon() throw ()
  {
  return (0);
  }

 static _Ty round_error() throw ()
  {
  return (0);
  }

 static _Ty denorm_min() throw ()
  {
  return (0);
  }

 static _Ty infinity() throw ()
  {
  return (0);
  }

 static _Ty quiet_NaN() throw ()
  {
  return (0);
  }

 static _Ty signaling_NaN() throw ()
  {
  return (0);
  }

 static const bool is_signed = (bool)(true);
 static const int digits = (int)(8 - 1);
 static const int digits10 = (int)((8 - 1) * 301L / 1000);


 static const int max_digits10 = (int)(2 + (8 - 1) * 301L / 1000);

 };


template<> class numeric_limits<unsigned char>
 : public _Num_int_base
 {
public:
 typedef unsigned char _Ty;

 static _Ty (min)() throw ()
  {
  return (0);
  }

 static _Ty (max)() throw ()
  {
  return ((127 * 2 + 1));
  }


 static _Ty lowest() throw ()
  {
  return ((min)());
  }


 static _Ty epsilon() throw ()
  {
  return (0);
  }

 static _Ty round_error() throw ()
  {
  return (0);
  }

 static _Ty denorm_min() throw ()
  {
  return (0);
  }

 static _Ty infinity() throw ()
  {
  return (0);
  }

 static _Ty quiet_NaN() throw ()
  {
  return (0);
  }

 static _Ty signaling_NaN() throw ()
  {
  return (0);
  }

 static const bool is_signed = (bool)(false);
 static const int digits = (int)(8);
 static const int digits10 = (int)(8 * 301L / 1000);


 static const int max_digits10 = (int)(2 + (8) * 301L / 1000);

 };


template<> class numeric_limits<short>
 : public _Num_int_base
 {
public:
 typedef short _Ty;

 static _Ty (min)() throw ()
  {
  return ((-32767 - 1));
  }

 static _Ty (max)() throw ()
  {
  return (32767);
  }


 static _Ty lowest() throw ()
  {
  return ((min)());
  }


 static _Ty epsilon() throw ()
  {
  return (0);
  }

 static _Ty round_error() throw ()
  {
  return (0);
  }

 static _Ty denorm_min() throw ()
  {
  return (0);
  }

 static _Ty infinity() throw ()
  {
  return (0);
  }

 static _Ty quiet_NaN() throw ()
  {
  return (0);
  }

 static _Ty signaling_NaN() throw ()
  {
  return (0);
  }

 static const bool is_signed = (bool)(true);
 static const int digits = (int)(8 * sizeof (short) - 1);
 static const int digits10 = (int)((8 * sizeof (short) - 1) * 301L / 1000)
                ;


 static const int max_digits10 = (int)(2 + (8 * sizeof (short) - 1) * 301L / 1000)
                ;

 };


template<> class numeric_limits<unsigned short>
 : public _Num_int_base
 {
public:
 typedef unsigned short _Ty;

 static _Ty (min)() throw ()
  {
  return (0);
  }

 static _Ty (max)() throw ()
  {
  return ((32767 * 2 + 1));
  }


 static _Ty lowest() throw ()
  {
  return ((min)());
  }


 static _Ty epsilon() throw ()
  {
  return (0);
  }

 static _Ty round_error() throw ()
  {
  return (0);
  }

 static _Ty denorm_min() throw ()
  {
  return (0);
  }

 static _Ty infinity() throw ()
  {
  return (0);
  }

 static _Ty quiet_NaN() throw ()
  {
  return (0);
  }

 static _Ty signaling_NaN() throw ()
  {
  return (0);
  }

 static const bool is_signed = (bool)(false);
 static const int digits = (int)(8 * sizeof (unsigned short));
 static const int digits10 = (int)(8 * sizeof (unsigned short) * 301L / 1000)
                ;


 static const int max_digits10 = (int)(2 + (8 * sizeof (unsigned short)) * 301L / 1000)
                ;

 };



template<> class numeric_limits<char16_t>
 : public _Num_int_base
 {
public:
 typedef char16_t _Ty;

 static _Ty (min)() throw ()
  {
  return (0);
  }

 static _Ty (max)() throw ()
  {
  return ((32767 * 2 + 1));
  }

 static _Ty lowest() throw ()
  {
  return ((min)());
  }

 static _Ty epsilon() throw ()
  {
  return (0);
  }

 static _Ty round_error() throw ()
  {
  return (0);
  }

 static _Ty denorm_min() throw ()
  {
  return (0);
  }

 static _Ty infinity() throw ()
  {
  return (0);
  }

 static _Ty quiet_NaN() throw ()
  {
  return (0);
  }

 static _Ty signaling_NaN() throw ()
  {
  return (0);
  }

 static const bool is_signed = (bool)(false);
 static const int digits = (int)(8 * sizeof (char16_t));
 static const int digits10 = (int)(8 * sizeof (char16_t) * 301L / 1000)
                ;
 static const int max_digits10 = (int)(2 + (8 * sizeof (char16_t)) * 301L / 1000)
                ;
 };



template<> class numeric_limits<int>
 : public _Num_int_base
 {
public:
 typedef int _Ty;

 static _Ty (min)() throw ()
  {
  return ((-2147483647 - 1));
  }

 static _Ty (max)() throw ()
  {
  return (2147483647);
  }


 static _Ty lowest() throw ()
  {
  return ((min)());
  }


 static _Ty epsilon() throw ()
  {
  return (0);
  }

 static _Ty round_error() throw ()
  {
  return (0);
  }

 static _Ty denorm_min() throw ()
  {
  return (0);
  }

 static _Ty infinity() throw ()
  {
  return (0);
  }

 static _Ty quiet_NaN() throw ()
  {
  return (0);
  }

 static _Ty signaling_NaN() throw ()
  {
  return (0);
  }

 static const bool is_signed = (bool)(true);
 static const int digits = (int)(8 * sizeof (int) - 1);
 static const int digits10 = (int)((8 * sizeof (int) - 1) * 301L / 1000)
                ;


 static const int max_digits10 = (int)(2 + (8 * sizeof (int) - 1) * 301L / 1000)
                ;

 };


template<> class numeric_limits<unsigned int>
 : public _Num_int_base
 {
public:
 typedef unsigned int _Ty;

 static _Ty (min)() throw ()
  {
  return (0);
  }

 static _Ty (max)() throw ()
  {
  return ((2147483647 * 2U + 1U));
  }


 static _Ty lowest() throw ()
  {
  return ((min)());
  }


 static _Ty epsilon() throw ()
  {
  return (0);
  }

 static _Ty round_error() throw ()
  {
  return (0);
  }

 static _Ty denorm_min() throw ()
  {
  return (0);
  }

 static _Ty infinity() throw ()
  {
  return (0);
  }

 static _Ty quiet_NaN() throw ()
  {
  return (0);
  }

 static _Ty signaling_NaN() throw ()
  {
  return (0);
  }

 static const bool is_signed = (bool)(false);
 static const int digits = (int)(8 * sizeof (unsigned int));
 static const int digits10 = (int)(8 * sizeof (unsigned int) * 301L / 1000)
                ;


 static const int max_digits10 = (int)(2 + (8 * sizeof (unsigned int)) * 301L / 1000)
                ;

 };


template<> class numeric_limits<long>
 : public _Num_int_base
 {
public:
 typedef long _Ty;

 static _Ty (min)() throw ()
  {
  return ((-2147483647L - 1L));
  }

 static _Ty (max)() throw ()
  {
  return (2147483647L);
  }


 static _Ty lowest() throw ()
  {
  return ((min)());
  }


 static _Ty epsilon() throw ()
  {
  return (0);
  }

 static _Ty round_error() throw ()
  {
  return (0);
  }

 static _Ty denorm_min() throw ()
  {
  return (0);
  }

 static _Ty infinity() throw ()
  {
  return (0);
  }

 static _Ty quiet_NaN() throw ()
  {
  return (0);
  }

 static _Ty signaling_NaN() throw ()
  {
  return (0);
  }

 static const bool is_signed = (bool)(true);
 static const int digits = (int)(8 * sizeof (long) - 1);
 static const int digits10 = (int)((8 * sizeof (long) - 1) * 301L / 1000)
                ;


 static const int max_digits10 = (int)(2 + (8 * sizeof (long) - 1) * 301L / 1000)
                ;

 };


template<> class numeric_limits<unsigned long>
 : public _Num_int_base
 {
public:
 typedef unsigned long _Ty;

 static _Ty (min)() throw ()
  {
  return (0);
  }

 static _Ty (max)() throw ()
  {
  return ((2147483647L * 2UL + 1UL));
  }


 static _Ty lowest() throw ()
  {
  return ((min)());
  }


 static _Ty epsilon() throw ()
  {
  return (0);
  }

 static _Ty round_error() throw ()
  {
  return (0);
  }

 static _Ty denorm_min() throw ()
  {
  return (0);
  }

 static _Ty infinity() throw ()
  {
  return (0);
  }

 static _Ty quiet_NaN() throw ()
  {
  return (0);
  }

 static _Ty signaling_NaN() throw ()
  {
  return (0);
  }

 static const bool is_signed = (bool)(false);
 static const int digits = (int)(8 * sizeof (unsigned long));
 static const int digits10 = (int)(8 * sizeof (unsigned long) * 301L / 1000)
                ;


 static const int max_digits10 = (int)(2 + (8 * sizeof (unsigned long)) * 301L / 1000)
                ;

 };



template<> class numeric_limits<char32_t>
 : public _Num_int_base
 {
public:
 typedef char32_t _Ty;

 static _Ty (min)() throw ()
  {
  return (0);
  }

 static _Ty (max)() throw ()
  {
  return ((2147483647L * 2UL + 1UL));
  }

 static _Ty lowest() throw ()
  {
  return ((min)());
  }

 static _Ty epsilon() throw ()
  {
  return (0);
  }

 static _Ty round_error() throw ()
  {
  return (0);
  }

 static _Ty denorm_min() throw ()
  {
  return (0);
  }

 static _Ty infinity() throw ()
  {
  return (0);
  }

 static _Ty quiet_NaN() throw ()
  {
  return (0);
  }

 static _Ty signaling_NaN() throw ()
  {
  return (0);
  }

 static const bool is_signed = (bool)(false);
 static const int digits = (int)(8 * sizeof (char32_t));
 static const int digits10 = (int)(8 * sizeof (char32_t) * 301L / 1000)
                ;
 static const int max_digits10 = (int)(2 + (8 * sizeof (char32_t)) * 301L / 1000)
                ;
 };




template<> class numeric_limits<long long>
 : public _Num_int_base
 {
public:
 typedef long long _Ty;

 static _Ty (min)() throw ()
  {
  return (-0x7fffffffffffffffLL - 1);
  }

 static _Ty (max)() throw ()
  {
  return (0x7fffffffffffffffLL);
  }


 static _Ty lowest() throw ()
  {
  return ((min)());
  }


 static _Ty epsilon() throw ()
  {
  return (0);
  }

 static _Ty round_error() throw ()
  {
  return (0);
  }

 static _Ty denorm_min() throw ()
  {
  return (0);
  }

 static _Ty infinity() throw ()
  {
  return (0);
  }

 static _Ty quiet_NaN() throw ()
  {
  return (0);
  }

 static _Ty signaling_NaN() throw ()
  {
  return (0);
  }

 static const bool is_signed = (bool)(true);
 static const int digits = (int)(8 * sizeof (long long) - 1);
 static const int digits10 = (int)((8 * sizeof (long long) - 1) * 301L / 1000)
                ;


 static const int max_digits10 = (int)(2 + (8 * sizeof (long long) - 1) * 301L / 1000)
                ;

 };


template<> class numeric_limits<unsigned long long>
 : public _Num_int_base
 {
public:
 typedef unsigned long long _Ty;

 static _Ty (min)() throw ()
  {
  return (0);
  }

 static _Ty (max)() throw ()
  {
  return (0xffffffffffffffffULL);
  }


 static _Ty lowest() throw ()
  {
  return ((min)());
  }


 static _Ty epsilon() throw ()
  {
  return (0);
  }

 static _Ty round_error() throw ()
  {
  return (0);
  }

 static _Ty denorm_min() throw ()
  {
  return (0);
  }

 static _Ty infinity() throw ()
  {
  return (0);
  }

 static _Ty quiet_NaN() throw ()
  {
  return (0);
  }

 static _Ty signaling_NaN() throw ()
  {
  return (0);
  }

 static const bool is_signed = (bool)(false);
 static const int digits = (int)(8 * sizeof (unsigned long long));
 static const int digits10 = (int)(8 * sizeof (unsigned long long) * 301L / 1000)
                ;


 static const int max_digits10 = (int)(2 + (8 * sizeof (unsigned long long)) * 301L / 1000)
                ;

 };



template<> class numeric_limits<float>
 : public _Num_float_base
 {
public:
 typedef float _Ty;

 static _Ty (min)() throw ()
  {
  return (1.1754943508222875e-38F);
  }

 static _Ty (max)() throw ()
  {
  return (3.4028234663852886e+38F);
  }


 static _Ty lowest() throw ()
  {
  return (-(max)());
  }


 static _Ty epsilon() throw ()
  {
  return (1.1920928955078125e-7F);
  }

 static _Ty round_error() throw ()
  {
  return (0.5);
  }

 static _Ty denorm_min() throw ()
  {
  return (:: _FDenorm._Float);
  }

 static _Ty infinity() throw ()
  {
  return (:: _FInf._Float);
  }

 static _Ty quiet_NaN() throw ()
  {
  return (:: _FNan._Float);
  }

 static _Ty signaling_NaN() throw ()
  {
  return (:: _FSnan._Float);
  }

 static const int digits = (int)(24);
 static const int digits10 = (int)(6);


 static const int max_digits10 = (int)(2 + 6);


 static const int max_exponent = (int)((int)128);
 static const int max_exponent10 = (int)((int)38);
 static const int min_exponent = (int)((int)(-125));
 static const int min_exponent10 = (int)((int)(-37));
 };


template<> class numeric_limits<double>
 : public _Num_float_base
 {
public:
 typedef double _Ty;

 static _Ty (min)() throw ()
  {
  return (double(1.1754943508222875e-38L));
  }

 static _Ty (max)() throw ()
  {
  return (double(3.4028234663852886e+38L));
  }


 static _Ty lowest() throw ()
  {
  return (-(max)());
  }


 static _Ty epsilon() throw ()
  {
  return (double(1.1920928955078125e-7L));
  }

 static _Ty round_error() throw ()
  {
  return (0.5);
  }

 static _Ty denorm_min() throw ()
  {
  return (:: _Denorm._Double);
  }

 static _Ty infinity() throw ()
  {
  return (:: _Inf._Double);
  }

 static _Ty quiet_NaN() throw ()
  {
  return (:: _Nan._Double);
  }

 static _Ty signaling_NaN() throw ()
  {
  return (:: _Snan._Double);
  }

 static const int digits = (int)(24);
 static const int digits10 = (int)(6);


 static const int max_digits10 = (int)(2 + 6);


 static const int max_exponent = (int)((int)128);
 static const int max_exponent10 = (int)((int)38);
 static const int min_exponent = (int)((int)(-125));
 static const int min_exponent10 = (int)((int)(-37));
 };


template<> class numeric_limits<long double>
 : public _Num_float_base
 {
public:
 typedef long double _Ty;

 static _Ty (min)() throw ()
  {
  return (2.2250738585072014e-308L);
  }

 static _Ty (max)() throw ()
  {
  return (1.7976931348623157e+308L);
  }


 static _Ty lowest() throw ()
  {
  return (-(max)());
  }


 static _Ty epsilon() throw ()
  {
  return (2.2204460492503131e-16L);
  }

 static _Ty round_error() throw ()
  {
  return (0.5);
  }

 static _Ty denorm_min() throw ()
  {
  return (:: _LDenorm._Long_double);
  }

 static _Ty infinity() throw ()
  {
  return (:: _LInf._Long_double);
  }

 static _Ty quiet_NaN() throw ()
  {
  return (:: _LNan._Long_double);
  }

 static _Ty signaling_NaN() throw ()
  {
  return (:: _LSnan._Long_double);
  }

 static const int digits = (int)(53);
 static const int digits10 = (int)(15);


 static const int max_digits10 = (int)(2 + 15);


 static const int max_exponent = (int)((int)1024);
 static const int max_exponent10 = (int)((int)308);
 static const int min_exponent = (int)((int)(-1021));
 static const int min_exponent10 = (int)((int)(-307));
 };
}
# 5 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/type_traits" 2 3
# 1 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/xtr1common" 1 3



# 1 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/c/yvals.h" 1 3
# 5 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/xtr1common" 2 3
# 146 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/xtr1common" 3
namespace std {

template<class _T1,
 class _Ret>
 struct unary_function;


template<class _T1,
 class _T2,
 class _Ret>
 struct binary_function;

 namespace tr1 {

struct _Nil
 {
 };
static _Nil _Nil_obj;


template<class _Ty,
 _Ty _Val>
 struct integral_constant
 {
 static const _Ty value = _Val;

 typedef _Ty value_type;
 typedef integral_constant<_Ty, _Val> type;
 };

typedef integral_constant<bool, true> true_type;
typedef integral_constant<bool, false> false_type;


template<bool _First,
 bool _Second>
 struct _Or;
template<>
 struct _Or<false, false>
  : false_type
  {
  };

template<>
 struct _Or<false, true>
  : true_type
  {
  };

template<>
 struct _Or<true, false>
  : true_type
  {
  };

template<>
 struct _Or<true, true>
  : true_type
  {
  };


template<bool>
 struct _Cat_base;
template<>
 struct _Cat_base<false>
 : false_type
 {
 };

template<>
 struct _Cat_base<true>
 : true_type
 {
 };


template<class _Ty>
 struct _Is_integral
  : false_type
 {
 };

template<>
 struct _Is_integral<bool>
  : true_type
 {
 };

template<>
 struct _Is_integral<char>
  : true_type
 {
 };

template<>
 struct _Is_integral<unsigned char>
  : true_type
 {
 };

template<>
 struct _Is_integral<signed char>
  : true_type
 {
 };

template<>
 struct _Is_integral<wchar_t>
  : true_type
 {
 };

template<>
 struct _Is_integral<unsigned short>
  : true_type
 {
 };

template<>
 struct _Is_integral<signed short>
  : true_type
 {
 };

template<>
 struct _Is_integral<unsigned int>
  : true_type
 {
 };

template<>
 struct _Is_integral<signed int>
  : true_type
 {
 };

template<>
 struct _Is_integral<unsigned long>
  : true_type
 {
 };

template<>
 struct _Is_integral<signed long>
  : true_type
 {
 };


template<>
 struct _Is_integral<long long>
  : true_type
 {
 };

template<>
 struct _Is_integral<unsigned long long>
  : true_type
 {
 };



template<class _Ty>
 struct _Is_floating_point
  : false_type
 {
 };

template<>
 struct _Is_floating_point<float>
  : true_type
 {
 };

template<>
 struct _Is_floating_point<double>
  : true_type
 {
 };

template<>
 struct _Is_floating_point<long double>
  : true_type
 {
 };


template<class _Ty>
 struct _Remove_reference
 {
 typedef _Ty _Type;
 };

template<class _Ty>
 struct _Remove_reference<_Ty&>
 {
 typedef _Ty _Type;
 };
# 356 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/xtr1common" 3
template<class _Ty>
 struct _Remove_rvalue_reference
 {
 typedef _Ty _Type;
 };
# 371 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/xtr1common" 3
template<class _Tgt,
 class _Src>
 struct _Copy_cv
 {
 typedef typename _Remove_reference<_Tgt>::_Type _Tgtx;
 typedef _Tgtx& _Type;
 };

template<class _Tgt,
 class _Src>
 struct _Copy_cv<_Tgt, const _Src>
 {
 typedef typename _Remove_reference<_Tgt>::_Type _Tgtx;
 typedef const _Tgtx& _Type;
 };

template<class _Tgt,
 class _Src>
 struct _Copy_cv<_Tgt, volatile _Src>
 {
 typedef typename _Remove_reference<_Tgt>::_Type _Tgtx;
 typedef volatile _Tgtx& _Type;
 };

template<class _Tgt,
 class _Src>
 struct _Copy_cv<_Tgt, const volatile _Src>
 {
 typedef typename _Remove_reference<_Tgt>::_Type _Tgtx;
 typedef const volatile _Tgtx& _Type;
 };

template<class _Tgt,
 class _Src>
 struct _Copy_cv<_Tgt, _Src&>
 {
 typedef typename _Copy_cv<_Tgt, _Src>::_Type _Type;
 };
# 419 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/xtr1common" 3
_No _Has_result_type(...);

template<class _Ty>
 _Yes _Has_result_type(_Ty *,
  typename _Remove_reference<typename _Ty::result_type>::_Type * = 0);



 }
}
# 6 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/type_traits" 2 3
# 76 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/type_traits" 3
namespace std {
 namespace tr1 {

template<class _Ty>
 struct _Ptr_traits
 {
 };

template<class _Ty>
 struct _Ptr_traits<_Ty *>
 {
 static const bool _Is_const = false;
 static const bool _Is_volatile = false;
 };

template<class _Ty>
 struct _Ptr_traits<const _Ty *>
 {
 static const bool _Is_const = true;
 static const bool _Is_volatile = false;
 };

template<class _Ty>
 struct _Ptr_traits<volatile _Ty *>
 {
 static const bool _Is_const = false;
 static const bool _Is_volatile = true;
 };

template<class _Ty>
 struct _Ptr_traits<const volatile _Ty *>
 {
 static const bool _Is_const = true;
 static const bool _Is_volatile = true;
 };

template<class _Ty>
 struct _Is_funptr
  : false_type
 {
 };

template<class _Ty>
 struct _Is_memfunptr
  : false_type
 {
 };
# 166 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/type_traits" 3
# 1 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/xfwrap" 1 3
# 15 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/xfwrap" 3
# 1 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/xfwrap1" 1 3
# 306 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/xfwrap1" 3
# 1 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/xxtype_traits" 1 3



template<class _Ret >
 struct _Is_funptr<_Ret (*)( )>
 : true_type
 {
 };

template<class _Ret >
 struct _Is_funptr<_Ret (*)( ...)>
 : true_type
 {
 };
# 307 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/xfwrap1" 2 3
# 16 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/xfwrap" 2 3




# 1 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/xfwrap1" 1 3
# 306 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/xfwrap1" 3
# 1 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/xxtype_traits" 1 3



template<class _Ret , class _Arg0 >
 struct _Is_funptr<_Ret (*)(_Arg0 )>
 : true_type
 {
 };

template<class _Ret , class _Arg0 >
 struct _Is_funptr<_Ret (*)(_Arg0 ...)>
 : true_type
 {
 };


template<class _Ret , class _Arg0 >
 struct _Is_memfunptr<_Ret (_Arg0::*)( )>
  : true_type
 {
 };

template<class _Ret , class _Arg0 >
 struct _Is_memfunptr<_Ret (_Arg0::*)( ...)>
  : true_type
 {
 };

template<class _Ret , class _Arg0 >
 struct _Is_memfunptr<_Ret (_Arg0::*)( ) const>
  : true_type
 {
 };

template<class _Ret , class _Arg0 >
 struct _Is_memfunptr<_Ret (_Arg0::*)( ...) const>
  : true_type
 {
 };

template<class _Ret , class _Arg0 >
 struct _Is_memfunptr<_Ret (_Arg0::*)( ) volatile>
  : true_type
 {
 };

template<class _Ret , class _Arg0 >
 struct _Is_memfunptr<_Ret (_Arg0::*)( ...) volatile>
  : true_type
 {
 };

template<class _Ret , class _Arg0 >
 struct _Is_memfunptr<_Ret (_Arg0::*)( ) const volatile>
  : true_type
 {
 };

template<class _Ret , class _Arg0 >
 struct _Is_memfunptr<_Ret (_Arg0::*)( ...) const volatile>
  : true_type
 {
 };
# 307 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/xfwrap1" 2 3
# 21 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/xfwrap" 2 3



# 1 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/xfwrap1" 1 3
# 306 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/xfwrap1" 3
# 1 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/xxtype_traits" 1 3



template<class _Ret , class _Arg0 , class _Arg1>
 struct _Is_funptr<_Ret (*)(_Arg0 , _Arg1)>
 : true_type
 {
 };

template<class _Ret , class _Arg0 , class _Arg1>
 struct _Is_funptr<_Ret (*)(_Arg0 , _Arg1 ...)>
 : true_type
 {
 };


template<class _Ret , class _Arg0 , class _Arg1>
 struct _Is_memfunptr<_Ret (_Arg0::*)( _Arg1)>
  : true_type
 {
 };

template<class _Ret , class _Arg0 , class _Arg1>
 struct _Is_memfunptr<_Ret (_Arg0::*)( _Arg1 ...)>
  : true_type
 {
 };

template<class _Ret , class _Arg0 , class _Arg1>
 struct _Is_memfunptr<_Ret (_Arg0::*)( _Arg1) const>
  : true_type
 {
 };

template<class _Ret , class _Arg0 , class _Arg1>
 struct _Is_memfunptr<_Ret (_Arg0::*)( _Arg1 ...) const>
  : true_type
 {
 };

template<class _Ret , class _Arg0 , class _Arg1>
 struct _Is_memfunptr<_Ret (_Arg0::*)( _Arg1) volatile>
  : true_type
 {
 };

template<class _Ret , class _Arg0 , class _Arg1>
 struct _Is_memfunptr<_Ret (_Arg0::*)( _Arg1 ...) volatile>
  : true_type
 {
 };

template<class _Ret , class _Arg0 , class _Arg1>
 struct _Is_memfunptr<_Ret (_Arg0::*)( _Arg1) const volatile>
  : true_type
 {
 };

template<class _Ret , class _Arg0 , class _Arg1>
 struct _Is_memfunptr<_Ret (_Arg0::*)( _Arg1 ...) const volatile>
  : true_type
 {
 };
# 307 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/xfwrap1" 2 3
# 25 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/xfwrap" 2 3



# 1 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/xfwrap1" 1 3
# 306 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/xfwrap1" 3
# 1 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/xxtype_traits" 1 3



template<class _Ret , class _Arg0 , class _Arg1 , class _Arg2>
 struct _Is_funptr<_Ret (*)(_Arg0 , _Arg1 , _Arg2)>
 : true_type
 {
 };

template<class _Ret , class _Arg0 , class _Arg1 , class _Arg2>
 struct _Is_funptr<_Ret (*)(_Arg0 , _Arg1 , _Arg2 ...)>
 : true_type
 {
 };


template<class _Ret , class _Arg0 , class _Arg1 , class _Arg2>
 struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1 , _Arg2)>
  : true_type
 {
 };

template<class _Ret , class _Arg0 , class _Arg1 , class _Arg2>
 struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1 , _Arg2 ...)>
  : true_type
 {
 };

template<class _Ret , class _Arg0 , class _Arg1 , class _Arg2>
 struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1 , _Arg2) const>
  : true_type
 {
 };

template<class _Ret , class _Arg0 , class _Arg1 , class _Arg2>
 struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1 , _Arg2 ...) const>
  : true_type
 {
 };

template<class _Ret , class _Arg0 , class _Arg1 , class _Arg2>
 struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1 , _Arg2) volatile>
  : true_type
 {
 };

template<class _Ret , class _Arg0 , class _Arg1 , class _Arg2>
 struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1 , _Arg2 ...) volatile>
  : true_type
 {
 };

template<class _Ret , class _Arg0 , class _Arg1 , class _Arg2>
 struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1 , _Arg2) const volatile>
  : true_type
 {
 };

template<class _Ret , class _Arg0 , class _Arg1 , class _Arg2>
 struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1 , _Arg2 ...) const volatile>
  : true_type
 {
 };
# 307 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/xfwrap1" 2 3
# 29 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/xfwrap" 2 3



# 1 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/xfwrap1" 1 3
# 306 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/xfwrap1" 3
# 1 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/xxtype_traits" 1 3



template<class _Ret , class _Arg0 , class _Arg1, class _Arg2 , class _Arg3>
 struct _Is_funptr<_Ret (*)(_Arg0 , _Arg1, _Arg2 , _Arg3)>
 : true_type
 {
 };

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2 , class _Arg3>
 struct _Is_funptr<_Ret (*)(_Arg0 , _Arg1, _Arg2 , _Arg3 ...)>
 : true_type
 {
 };


template<class _Ret , class _Arg0 , class _Arg1, class _Arg2 , class _Arg3>
 struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1, _Arg2 , _Arg3)>
  : true_type
 {
 };

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2 , class _Arg3>
 struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1, _Arg2 , _Arg3 ...)>
  : true_type
 {
 };

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2 , class _Arg3>
 struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1, _Arg2 , _Arg3) const>
  : true_type
 {
 };

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2 , class _Arg3>
 struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1, _Arg2 , _Arg3 ...) const>
  : true_type
 {
 };

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2 , class _Arg3>
 struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1, _Arg2 , _Arg3) volatile>
  : true_type
 {
 };

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2 , class _Arg3>
 struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1, _Arg2 , _Arg3 ...) volatile>
  : true_type
 {
 };

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2 , class _Arg3>
 struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1, _Arg2 , _Arg3) const volatile>
  : true_type
 {
 };

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2 , class _Arg3>
 struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1, _Arg2 , _Arg3 ...) const volatile>
  : true_type
 {
 };
# 307 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/xfwrap1" 2 3
# 33 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/xfwrap" 2 3



# 1 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/xfwrap1" 1 3
# 306 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/xfwrap1" 3
# 1 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/xxtype_traits" 1 3



template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4>
 struct _Is_funptr<_Ret (*)(_Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4)>
 : true_type
 {
 };

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4>
 struct _Is_funptr<_Ret (*)(_Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4 ...)>
 : true_type
 {
 };


template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4>
 struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1, _Arg2, _Arg3 , _Arg4)>
  : true_type
 {
 };

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4>
 struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1, _Arg2, _Arg3 , _Arg4 ...)>
  : true_type
 {
 };

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4>
 struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1, _Arg2, _Arg3 , _Arg4) const>
  : true_type
 {
 };

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4>
 struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1, _Arg2, _Arg3 , _Arg4 ...) const>
  : true_type
 {
 };

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4>
 struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1, _Arg2, _Arg3 , _Arg4) volatile>
  : true_type
 {
 };

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4>
 struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1, _Arg2, _Arg3 , _Arg4 ...) volatile>
  : true_type
 {
 };

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4>
 struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1, _Arg2, _Arg3 , _Arg4) const volatile>
  : true_type
 {
 };

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4>
 struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1, _Arg2, _Arg3 , _Arg4 ...) const volatile>
  : true_type
 {
 };
# 307 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/xfwrap1" 2 3
# 37 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/xfwrap" 2 3



# 1 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/xfwrap1" 1 3
# 306 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/xfwrap1" 3
# 1 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/xxtype_traits" 1 3



template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5>
 struct _Is_funptr<_Ret (*)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5)>
 : true_type
 {
 };

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5>
 struct _Is_funptr<_Ret (*)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5 ...)>
 : true_type
 {
 };


template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5>
 struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5)>
  : true_type
 {
 };

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5>
 struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5 ...)>
  : true_type
 {
 };

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5>
 struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5) const>
  : true_type
 {
 };

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5>
 struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5 ...) const>
  : true_type
 {
 };

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5>
 struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5) volatile>
  : true_type
 {
 };

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5>
 struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5 ...) volatile>
  : true_type
 {
 };

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5>
 struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5) const volatile>
  : true_type
 {
 };

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5>
 struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5 ...) const volatile>
  : true_type
 {
 };
# 307 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/xfwrap1" 2 3
# 41 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/xfwrap" 2 3



# 1 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/xfwrap1" 1 3
# 306 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/xfwrap1" 3
# 1 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/xxtype_traits" 1 3



template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6>
 struct _Is_funptr<_Ret (*)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6)>
 : true_type
 {
 };

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6>
 struct _Is_funptr<_Ret (*)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6 ...)>
 : true_type
 {
 };


template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6>
 struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6)>
  : true_type
 {
 };

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6>
 struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6 ...)>
  : true_type
 {
 };

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6>
 struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6) const>
  : true_type
 {
 };

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6>
 struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6 ...) const>
  : true_type
 {
 };

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6>
 struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6) volatile>
  : true_type
 {
 };

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6>
 struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6 ...) volatile>
  : true_type
 {
 };

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6>
 struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6) const volatile>
  : true_type
 {
 };

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6>
 struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6 ...) const volatile>
  : true_type
 {
 };
# 307 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/xfwrap1" 2 3
# 45 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/xfwrap" 2 3



# 1 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/xfwrap1" 1 3
# 306 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/xfwrap1" 3
# 1 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/xxtype_traits" 1 3



template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7>
 struct _Is_funptr<_Ret (*)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7)>
 : true_type
 {
 };

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7>
 struct _Is_funptr<_Ret (*)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7 ...)>
 : true_type
 {
 };


template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7>
 struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7)>
  : true_type
 {
 };

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7>
 struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7 ...)>
  : true_type
 {
 };

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7>
 struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7) const>
  : true_type
 {
 };

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7>
 struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7 ...) const>
  : true_type
 {
 };

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7>
 struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7) volatile>
  : true_type
 {
 };

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7>
 struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7 ...) volatile>
  : true_type
 {
 };

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7>
 struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7) const volatile>
  : true_type
 {
 };

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7>
 struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7 ...) const volatile>
  : true_type
 {
 };
# 307 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/xfwrap1" 2 3
# 49 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/xfwrap" 2 3



# 1 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/xfwrap1" 1 3
# 306 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/xfwrap1" 3
# 1 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/xxtype_traits" 1 3



template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8>
 struct _Is_funptr<_Ret (*)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8)>
 : true_type
 {
 };

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8>
 struct _Is_funptr<_Ret (*)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8 ...)>
 : true_type
 {
 };


template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8>
 struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8)>
  : true_type
 {
 };

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8>
 struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8 ...)>
  : true_type
 {
 };

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8>
 struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8) const>
  : true_type
 {
 };

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8>
 struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8 ...) const>
  : true_type
 {
 };

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8>
 struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8) volatile>
  : true_type
 {
 };

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8>
 struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8 ...) volatile>
  : true_type
 {
 };

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8>
 struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8) const volatile>
  : true_type
 {
 };

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8>
 struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8 ...) const volatile>
  : true_type
 {
 };
# 307 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/xfwrap1" 2 3
# 53 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/xfwrap" 2 3



# 1 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/xfwrap1" 1 3
# 306 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/xfwrap1" 3
# 1 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/xxtype_traits" 1 3



template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9>
 struct _Is_funptr<_Ret (*)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9)>
 : true_type
 {
 };

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9>
 struct _Is_funptr<_Ret (*)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9 ...)>
 : true_type
 {
 };


template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9>
 struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9)>
  : true_type
 {
 };

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9>
 struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9 ...)>
  : true_type
 {
 };

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9>
 struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9) const>
  : true_type
 {
 };

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9>
 struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9 ...) const>
  : true_type
 {
 };

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9>
 struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9) volatile>
  : true_type
 {
 };

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9>
 struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9 ...) volatile>
  : true_type
 {
 };

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9>
 struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9) const volatile>
  : true_type
 {
 };

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9>
 struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9 ...) const volatile>
  : true_type
 {
 };
# 307 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/xfwrap1" 2 3
# 57 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/xfwrap" 2 3
# 167 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/type_traits" 2 3




template<class _Ty>
 struct remove_const
 {
 typedef _Ty type;
 };

template<class _Ty>
 struct remove_const<const _Ty>
 {
 typedef _Ty type;
 };

template<class _Ty>
 struct remove_const<const _Ty[]>
 {
 typedef _Ty type[];
 };

template<class _Ty, unsigned int _Nx>
 struct remove_const<const _Ty[_Nx]>
 {
 typedef _Ty type[_Nx];
 };


template<class _Ty>
 struct remove_volatile
 {
 typedef _Ty type;
 };

template<class _Ty>
 struct remove_volatile<volatile _Ty>
 {
 typedef _Ty type;
 };

template<class _Ty>
 struct remove_volatile<volatile _Ty[]>
 {
 typedef _Ty type[];
 };

template<class _Ty, unsigned int _Nx>
 struct remove_volatile<volatile _Ty[_Nx]>
 {
 typedef _Ty type[_Nx];
 };


template<class _Ty>
 struct remove_cv
 {
 typedef typename remove_const<typename remove_volatile<_Ty>::type>::type
  type;
 };


template<class _Ty>
 struct add_const
 {
 typedef const _Ty type;
 };

template<class _Ty>
 struct add_const<_Ty&>
 {
 typedef _Ty& type;
 };


template<class _Ty>
 struct add_volatile
 {
 typedef volatile _Ty type;
 };

template<class _Ty>
 struct add_volatile<_Ty&>
 {
 typedef _Ty& type;
 };


template<class _Ty>
 struct add_cv
 {
 typedef typename add_const<typename add_volatile<_Ty>::type>::type type;
 };


template<class _Ty>
 struct remove_reference
 : _Remove_reference<_Ty>
 {
 typedef typename _Remove_reference<_Ty>::_Type type;
 };


template<class _Ty>
 struct add_reference
 {
 typedef typename _Remove_reference<_Ty>::_Type& type;
 };

template<>
 struct add_reference<void>
 {
 typedef void type;
 };

template<>
 struct add_reference<const void>
 {
 typedef const void type;
 };

template<>
 struct add_reference<volatile void>
 {
 typedef volatile void type;
 };

template<>
 struct add_reference<const volatile void>
 {
 typedef const volatile void type;
 };


template<class _Ty>
 struct add_lvalue_reference
 {
 typedef typename add_reference<_Ty>::type type;
 };


template<class _Ty>
 struct add_rvalue_reference
 {
 typedef _Ty & type;
 };

template<class _Ty>
 struct add_rvalue_reference<_Ty&>
 {
 typedef _Ty& type;
 };

template<>
 struct add_rvalue_reference<void>
 {
 typedef void type;
 };

template<>
 struct add_rvalue_reference<const void>
 {
 typedef const void type;
 };

template<>
 struct add_rvalue_reference<volatile void>
 {
 typedef volatile void type;
 };

template<>
 struct add_rvalue_reference<const volatile void>
 {
 typedef const volatile void type;
 };


template<class _Ty>
 struct remove_extent
 {
 typedef _Ty type;
 };

template<class _Ty, unsigned int _Ix>
 struct remove_extent<_Ty[_Ix]>
 {
 typedef _Ty type;
 };

template<class _Ty>
 struct remove_extent<_Ty[]>
 {
 typedef _Ty type;
 };


template<class _Ty>
 struct remove_all_extents
 {
 typedef _Ty type;
 };

template<class _Ty, unsigned int _Ix>
 struct remove_all_extents<_Ty[_Ix]>
 {
 typedef typename remove_all_extents<_Ty>::type type;
 };

template<class _Ty>
 struct remove_all_extents<_Ty[]>
 {
 typedef typename remove_all_extents<_Ty>::type type;
 };


template<class _Ty>
 struct remove_pointer
 {
 typedef _Ty type;
 };

template<class _Ty>
 struct remove_pointer<_Ty *>
 {
 typedef _Ty type;
 };

template<class _Ty>
 struct remove_pointer<_Ty *const>
 {
 typedef _Ty type;
 };

template<class _Ty>
 struct remove_pointer<_Ty *volatile>
 {
 typedef _Ty type;
 };

template<class _Ty>
 struct remove_pointer<_Ty *const volatile>
 {
 typedef _Ty type;
 };


template<class _Ty>
 struct add_pointer
 {
 typedef typename remove_reference<_Ty>::type *type;
 };



template<class _Ty>
 struct _Is_void
 : false_type
 {
 };

template<>
 struct _Is_void<void>
 : true_type
 {
 };

template<class _Ty>
 struct is_void
 : _Is_void<typename remove_cv<_Ty>::type>
 {
 };


template<class _Ty>
 struct is_integral
 : _Is_integral<typename remove_cv<_Ty>::type>
 {
 };


template<class _Ty>
 struct is_floating_point
 : _Is_floating_point<typename remove_cv<_Ty>::type>
 {
 };


template<class _Ty>
 struct is_array
 : false_type
 {
 };

template<class _Ty, size_t _Nx>
 struct is_array<_Ty[_Nx]>
 : true_type
 {
 };

template<class _Ty>
 struct is_array<_Ty[]>
 : true_type
 {
 };



template<class _Ty>
 struct is_lvalue_reference
 : false_type
 {
 };

template<class _Ty>
 struct is_lvalue_reference<_Ty&>
 : true_type
 {
 };


template<class _Ty>
 struct is_rvalue_reference
 : false_type
 {
 };
# 503 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/type_traits" 3
template<class _Ty>
 struct is_reference
 : _Cat_base<is_lvalue_reference<_Ty>::value
  || is_rvalue_reference<_Ty>::value>
 {
 };
# 526 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/type_traits" 3
template<class _Ty>
 struct _Is_member_object_pointer
 : false_type
 {
 };

template<class _Ty1, class _Ty2>
 struct _Is_member_object_pointer<_Ty1 _Ty2::*>
 : _Cat_base<!_Is_memfunptr<_Ty1 _Ty2::*>::value>
 {
 };

template<class _Ty>
 struct is_member_object_pointer
 : _Is_member_object_pointer<typename remove_cv<_Ty>::type>
 {
 };


template<class _Ty>
 struct is_member_function_pointer
 : _Cat_base<_Is_memfunptr<typename remove_cv<_Ty>::type>::value>
 {
 };


template<class _Ty>
 struct _Is_pointer
 : false_type
 {
 };

template<class _Ty>
 struct _Is_pointer<_Ty *>
 : _Cat_base<!is_member_object_pointer<_Ty *>::value
  && !is_member_function_pointer<_Ty *>::value>
 {
 };

template<class _Ty>
 struct is_pointer
 : _Is_pointer<typename remove_cv<_Ty>::type>
 {
 };


template<class _Ty>
 struct is_union
 {
 };


template<class _Ty>
 struct is_class
 {
 };


template<class _Ty>
 struct is_function
 : _Cat_base<_Is_funptr<typename remove_cv<_Ty>::type *>::value>
 {
 };

template<class _Ty>
 struct is_function<_Ty&>
 : false_type
 {
 };


template<class _Ty>
 struct is_arithmetic
 : _Cat_base<is_integral<_Ty>::value
  || is_floating_point<_Ty>::value>
 {
 };


template<class _Ty>
 struct is_fundamental
 : _Cat_base<is_arithmetic<_Ty>::value
  || is_void<_Ty>::value>
 {
 };


template<class _Ty>
 struct is_object
 : _Cat_base<!is_function<_Ty>::value
  && !is_reference<_Ty>::value
  && !is_void<_Ty>::value>
 {
 };


template<class _To>
 _Yes _Cvt_test(_To);

template<class _To>
 _No _Cvt_test(...);

template<class _From, class _To, bool>
 struct _Is_convertible
 {
 static const bool value =
  (sizeof (_Cvt_test<_To>(_From())) == sizeof (::std:: tr1::_Yes));
 };

template<class _From, class _To>
 struct _Is_convertible<_From, _To, false>
 {
 static const bool value = false;
 };

template<class _From, class _To>
 struct is_convertible : _Cat_base<is_void<_From>::value && is_void<_To>::value || _Is_convertible<_From, _To, !is_void<_From>::value && !is_function<_From>::value>::value>
 {
 };


template<class _Ux>
 _Yes _Cl_test(const volatile int _Ux::*);

template<class _Ux>
 _No _Cl_test(...);

template<class _Ty>
 struct _Is_composite
 {
 static const bool _Value =
  (sizeof (_Cl_test<_Ty>(0)) == sizeof (::std:: tr1::_Yes));
 };

template<class _Ty>
 struct _Is_enum
 : _Cat_base<!is_arithmetic<_Ty>::value
  && !_Is_composite<_Ty>::_Value
  && is_convertible<_Ty, int>::value>
 {
 };

template<>
 struct _Is_enum<void>
 : false_type
 {
 };

template<class _Ty>
 struct _Is_enum<_Ty&>
 : false_type
 {
 };

template<class _Ty, size_t _Nx>
 struct _Is_enum<_Ty[_Nx]>
 : false_type
 {
 };

template<class _Ty>
 struct is_enum : _Is_enum<_Ty>
 {
 };


template<class _Ty>
 struct is_compound
 : _Cat_base<!is_fundamental<_Ty>::value>
 {
 };


template<class _Ty>
 struct is_member_pointer
 : _Cat_base<is_member_object_pointer<_Ty>::value
  || is_member_function_pointer<_Ty>::value>
 {
 };


template<class _Ty>
 struct is_scalar
 : _Cat_base<is_arithmetic<_Ty>::value
  || is_enum<_Ty>::value
  || is_pointer<_Ty>::value
  || is_member_pointer<_Ty>::value>
 {
 };

template<class _Ty>
 struct is_scalar<_Ty&>
 : false_type
 {
 };


template<class _Ty>
 struct is_const
 : _Cat_base<_Ptr_traits<_Ty *>::_Is_const
  && !is_function<_Ty>::value>
 {
 };

template<class _Ty, unsigned int _Nx>
 struct is_const<_Ty[_Nx]>
 : false_type
 {
 };

template<class _Ty, unsigned int _Nx>
 struct is_const<const _Ty[_Nx]>
 : true_type
 {
 };

template<class _Ty>
 struct is_const<_Ty&>
 : false_type
 {
 };


template<class _Ty>
 struct is_volatile
 : _Cat_base<_Ptr_traits<_Ty *>::_Is_volatile
  && !is_function<_Ty>::value>
 {
 };

template<class _Ty>
 struct is_volatile<_Ty&>
 : false_type
 {
 };


template<class _Ty>
 struct _Is_pod : _Cat_base<is_scalar<_Ty>::value || is_void<_Ty>::value>
 {
 };

template<class _Ty>
 struct is_pod
 : _Is_pod<typename ::std:: tr1::remove_all_extents<_Ty>::type>
 {
 };


template<class _Ty>
 struct is_empty : false_type
 {
 };


template<class _Ty>
 struct is_polymorphic
 {
 };


template<class _Ty>
 struct is_abstract
 {
 };



template<class _Ty>
 struct is_standard_layout : is_pod<_Ty>
 {
 };


template<class _Ty>
 struct is_trivial : is_pod<_Ty>
 {
 };



template<class _Ty>
 struct has_trivial_constructor : is_pod<_Ty>
 {
 };


template<class _Ty>
 struct has_trivial_copy : is_pod<_Ty>
 {
 };



template<class _Ty>
 struct has_trivial_default_constructor : is_pod<_Ty>
 {
 };


template<class _Ty>
 struct has_trivial_copy_constructor : is_pod<_Ty>
 {
 };



template<class _Ty>
 struct has_trivial_assign : is_pod<_Ty>
 {
 };


template<class _Ty>
 struct has_trivial_destructor : _Cat_base<!is_void<_Ty>::value && is_pod<_Ty>::value>
 {
 };


template<class _Ty>
 struct has_nothrow_constructor : is_pod<_Ty>
 {
 };


template<class _Ty>
 struct has_nothrow_copy : is_pod<_Ty>
 {
 };



template<class _Ty>
 struct has_nothrow_default_constructor : is_pod<_Ty>
 {
 };


template<class _Ty>
 struct has_nothrow_copy_constructor : is_pod<_Ty>
 {
 };



template<class _Ty>
 struct has_nothrow_assign : is_pod<_Ty>
 {
 };


template<class _Ty>
 struct has_virtual_destructor : false_type
 {
 };


template<class _Ty>
 struct _Has_signed_vals
 : _Cat_base<(typename remove_cv<_Ty>::type)(-1)
  < (typename remove_cv<_Ty>::type)(0)>
 {
 };

template<class _Ty>
 struct is_signed
 : _Cat_base<is_floating_point<_Ty>::value || is_integral<_Ty>::value
  && _Has_signed_vals<
   typename _If<is_integral<_Ty>::value, _Ty, int>::_Type>::value>
 {
 };


template<class _Ty>
 struct is_unsigned
 : _Cat_base<is_integral<_Ty>::value
  && !_Has_signed_vals<
   typename _If<is_integral<_Ty>::value, _Ty, int>::_Type>::value>
 {
 };


template<class _Ty>
 struct make_signed
 {
 static const size_t _Bytes = sizeof (_Ty);

 typedef typename _If<is_signed<_Ty>::value, _Ty,
  typename _If<_Bytes <= sizeof (char), signed char,
   typename _If<_Bytes <= sizeof (short), short,
    typename _If<_Bytes <= sizeof (int), int,
     typename _If<_Bytes <= sizeof (long), long,
      _Longlong>::_Type>::_Type>::_Type>
       ::_Type>::_Type type;
 };


template<class _Ty>
 struct make_unsigned
 {
 static const size_t _Bytes = sizeof (_Ty);

 typedef typename _If<is_unsigned<_Ty>::value, _Ty,
  typename _If<_Bytes <= sizeof (char), unsigned char,
   typename _If<_Bytes <= sizeof (short), unsigned short,
    typename _If<_Bytes <= sizeof (int), unsigned int,
     typename _If<_Bytes <= sizeof (long), unsigned long,
      _ULonglong>::_Type>::_Type>::_Type>
       ::_Type>::_Type type;
 };


template<class _Ty>
 struct _Get_align
 {
 _Ty _Elt0;
 char _Elt1;
 _Ty _Elt2;
 };



template<class _Ty>
 struct alignment_of
 : integral_constant<size_t, (sizeof(_Get_align<_Ty>) - 2 * sizeof(_Ty))>
 {
 };

template<class _Ty>
 struct alignment_of<_Ty&>
 : integral_constant<size_t, (sizeof(_Get_align<_Ty *>) - 2 * sizeof(_Ty *))>
 {
 };






template<class _Ty, size_t _Len> union _Align_type
 {
 _Ty _Val;
 char _Pad[_Len];
 };

template<size_t _Len, size_t _Align, class _Ty, bool _Ok>
 struct _Aligned;

template<size_t _Len, size_t _Align, class _Ty>
 struct _Aligned<_Len, _Align, _Ty, true>
 {
 typedef _Align_type<_Ty, _Len> _Type;
 };

template<size_t _Len, size_t _Align>
 struct _Aligned<_Len, _Align, long, false>
 {
 typedef _Align_type<double, _Len> _Type;
 };

template<size_t _Len, size_t _Align>
 struct _Aligned<_Len, _Align, int, false>
 {
 typedef typename _Aligned<_Len, _Align, long, _Align == (sizeof(_Get_align<long>) - 2 * sizeof(long))>::_Type _Type;
 };

template<size_t _Len, size_t _Align>
 struct _Aligned<_Len, _Align, short, false>
 {
 typedef typename _Aligned<_Len, _Align, int, _Align == (sizeof(_Get_align<int>) - 2 * sizeof(int))>::_Type _Type;
 };

template<size_t _Len, size_t _Align>
 struct _Aligned<_Len, _Align, char, false>
 {
 typedef typename _Aligned<_Len, _Align, short, _Align == (sizeof(_Get_align<short>) - 2 * sizeof(short))>::_Type _Type;
 };

template<size_t _Len, size_t _Align>
 struct aligned_storage
 {
 typedef typename _Aligned<_Len, _Align, char, _Align == (sizeof(_Get_align<char>) - 2 * sizeof(char))>::_Type type;
 };






template<class _Ty>
 struct rank
 : integral_constant<size_t, 0>
 {
 };

template<class _Ty, unsigned int _Ix>
 struct rank<_Ty[_Ix]>
 : integral_constant<size_t, rank<_Ty>::value + 1>
 {
 };

template<class _Ty>
 struct rank<_Ty[]>
 : integral_constant<size_t, rank<_Ty>::value + 1>
 {
 };


template<class _Ty, unsigned int _Nx>
 struct _Extent
 : integral_constant<size_t, 0>
 {
 };

template<class _Ty, unsigned int _Ix>
 struct _Extent<_Ty[_Ix], 0>
 : integral_constant<size_t, _Ix>
 {
 };

template<class _Ty, unsigned int _Nx, unsigned int _Ix>
 struct _Extent<_Ty[_Ix], _Nx>
 : _Extent<_Ty, _Nx - 1>
 {
 };

template<class _Ty, unsigned int _Nx>
 struct _Extent<_Ty[], _Nx>
 : _Extent<_Ty, _Nx - 1>
 {
 };

template<class _Ty, unsigned int _Nx = 0>
 struct extent
 : _Extent<_Ty, _Nx>
 {
 };


template<class _Ty1, class _Ty2>
 struct is_same
 : false_type
 {
 };

template<class _Ty1>
 struct is_same<_Ty1, _Ty1>
 : true_type
 {
 };


template<class _Base, class _Der>
 struct is_base_of : _Cat_base<is_convertible<_Der *, _Base *>::value>
 {
 };



template<class _Ty>
 struct decay
 {
 typedef typename remove_reference<_Ty>::type _Ty1;

 typedef typename _If<is_array<_Ty1>::value,
  typename remove_extent<_Ty1>::type *,
  typename _If<is_function<_Ty1>::value,
   typename add_pointer<_Ty1>::type,
   typename remove_cv<_Ty1>::type>::_Type>::_Type type;
 };


template<bool _Test,
 class _Type = void>
 struct enable_if
 {
 };

template<class _Type>
 struct enable_if<true, _Type>
 {
 typedef _Type type;
 };


template<bool _Test,
 class _Ty1,
 class _Ty2>
 struct conditional
 {
 typedef _Ty2 type;
 };

template<class _Ty1,
 class _Ty2>
 struct conditional<true, _Ty1, _Ty2>
 {
 typedef _Ty1 type;
 };

 }


using tr1::add_const;
using tr1::add_cv;
using tr1::add_pointer;
using tr1::add_lvalue_reference;
using tr1::add_reference;
using tr1::add_rvalue_reference;
using tr1::add_volatile;
using tr1::aligned_storage;
using tr1::alignment_of;
using tr1::conditional;
using tr1::decay;
using tr1::enable_if;
using tr1::extent;
using tr1::false_type;
using tr1::has_nothrow_assign;
using tr1::has_nothrow_constructor;
using tr1::has_nothrow_copy;
using tr1::has_trivial_assign;
using tr1::has_trivial_constructor;
using tr1::has_trivial_copy;
using tr1::has_trivial_destructor;
using tr1::has_virtual_destructor;
using tr1::integral_constant;
using tr1::is_abstract;
using tr1::is_arithmetic;
using tr1::is_array;
using tr1::is_base_of;
using tr1::is_class;
using tr1::is_compound;
using tr1::is_const;
using tr1::is_convertible;
using tr1::is_empty;
using tr1::is_enum;
using tr1::is_floating_point;
using tr1::is_function;
using tr1::is_fundamental;
using tr1::is_integral;
using tr1::is_member_function_pointer;
using tr1::is_member_object_pointer;
using tr1::is_member_pointer;
using tr1::is_object;
using tr1::is_pod;
using tr1::is_pointer;
using tr1::is_polymorphic;
using tr1::is_reference;
using tr1::is_same;
using tr1::is_scalar;
using tr1::is_signed;
using tr1::is_union;
using tr1::is_unsigned;
using tr1::is_void;
using tr1::is_volatile;
using tr1::make_signed;
using tr1::make_unsigned;
using tr1::rank;
using tr1::remove_all_extents;
using tr1::remove_const;
using tr1::remove_cv;
using tr1::remove_extent;
using tr1::remove_pointer;
using tr1::remove_reference;
using tr1::_Remove_rvalue_reference;
using tr1::remove_volatile;
using tr1::true_type;


using tr1::has_nothrow_copy_constructor;
using tr1::has_nothrow_default_constructor;
using tr1::has_trivial_copy_constructor;
using tr1::has_trivial_default_constructor;
using tr1::is_lvalue_reference;
using tr1::is_rvalue_reference;
using tr1::is_standard_layout;
using tr1::is_trivial;
# 1239 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/type_traits" 3
template<class _Ty>
 struct _Arithmetic_traits;

template<>
 struct _Arithmetic_traits<bool>
 {
 static const int _Rank = 1;
 };

template<>
 struct _Arithmetic_traits<char>
 {
 static const int _Rank = _Arithmetic_traits<bool>::_Rank + 1;
 };

template<>
 struct _Arithmetic_traits<signed char>
 {
 static const int _Rank = _Arithmetic_traits<char>::_Rank;
 };

template<>
 struct _Arithmetic_traits<unsigned char>
 {
 static const int _Rank = _Arithmetic_traits<char>::_Rank;
 };

template<>
 struct _Arithmetic_traits<short>
 {
 static const int _Rank = _Arithmetic_traits<char>::_Rank + 1;
 };

template<>
 struct _Arithmetic_traits<unsigned short>
 {
 static const int _Rank = _Arithmetic_traits<short>::_Rank;
 };

template<>
 struct _Arithmetic_traits<int>
 {
 static const int _Rank = _Arithmetic_traits<short>::_Rank + 1;
 };

template<>
 struct _Arithmetic_traits<unsigned int>
 {
 static const int _Rank = _Arithmetic_traits<int>::_Rank;
 };

template<>
 struct _Arithmetic_traits<long>
 {
 static const int _Rank = _Arithmetic_traits<int>::_Rank + 1;
 };

template<>
 struct _Arithmetic_traits<unsigned long>
 {
 static const int _Rank = _Arithmetic_traits<long>::_Rank;
 };

template<>
 struct _Arithmetic_traits<long long>
 {
 static const int _Rank = _Arithmetic_traits<long>::_Rank + 1;
 };

template<>
 struct _Arithmetic_traits<unsigned long long>
 {
 static const int _Rank = _Arithmetic_traits<long long>::_Rank;
 };

template<>
 struct _Arithmetic_traits<float>
 {
 static const int _Rank = _Arithmetic_traits<long long>::_Rank + 1;
 };

template<>
 struct _Arithmetic_traits<double>
 {
 static const int _Rank = _Arithmetic_traits<float>::_Rank + 1;
 };

template<>
 struct _Arithmetic_traits<long double>
 {
 static const int _Rank = _Arithmetic_traits<double>::_Rank + 1;
 };

template<bool _Unsigned> struct _Pickinteger
 {
 typedef int _Type;
 };

template<>
 struct _Pickinteger<true>
 {
 typedef unsigned int _Type;
 };

template<class _Ty,
 bool _Small>
 struct _Promote_to_int;

template<class _Ty>
 struct _Promote_to_int<_Ty, true>
 {
 typedef int _Type;
 };

template<class _Ty>
 struct _Promote_to_int<_Ty, false>
 {
 typedef typename _Pickinteger<tr1::is_unsigned<_Ty>::value>::_Type _Type;
 };

template<class _Ty,
 bool _Small>
 struct _Maybepromote;

template<class _Ty>
 struct _Maybepromote<_Ty, false>
 {
 typedef _Ty _Type;
 };

template<class _Ty>
 struct _Maybepromote<_Ty, true>
 {
 typedef typename _Promote_to_int<_Ty, sizeof(_Ty) < sizeof(int)>::_Type
  _Type;
 };

template<class _Ty>
 struct _Ipromo
 {
 static const bool _Lessthan =
  _Arithmetic_traits<_Ty>::_Rank < _Arithmetic_traits<int>::_Rank;
 typedef typename _Maybepromote<_Ty, _Lessthan>::_Type _Type;
 };

template<class _Ty0,
 class _Ty1,
 bool _Second>
 struct _Common_typeX
 {
 typedef _Ty1 _Type;
 };

template<class _Ty0,
 class _Ty1>
 struct _Common_typeX<_Ty0, _Ty1, false>
 {
 typedef _Ty0 _Type;
 };

template<class _Ty0,
 class _Ty1,
 bool _Uns0,
 bool _Uns1>
 struct _Common_typeY
 {
 typedef _Ty0 _Type;
 };

template<class _Ty0,
 class _Ty1>
 struct _Common_typeY<_Ty0, _Ty1, false, true>
 {
 typedef _Ty1 _Type;
 };

template<class _Ty0,
 class _Ty1,
 int _Rank0,
 int _Rank1>
 struct _Common_type
 {
 typedef typename _Common_typeX<_Ty0, _Ty1, _Rank0 < _Rank1>::_Type _Type;
 };

template<class _Ty0,
 class _Ty1,
 int _Rank>
 struct _Common_type<_Ty0, _Ty1, _Rank, _Rank>
 {
 typedef typename _Common_typeY<_Ty0, _Ty1,
  tr1::is_unsigned<_Ty0>::value,
  tr1::is_unsigned<_Ty1>::value>::_Type _Type;
 };

template<class _Ty0,
 class _Ty1>
 struct common_type
 {
 typedef typename _Ipromo<_Ty0>::_Type _PromoTy0;
 typedef typename _Ipromo<_Ty1>::_Type _PromoTy1;
 typedef typename _Common_type<_PromoTy0, _PromoTy1,
  _Arithmetic_traits<_PromoTy0>::_Rank,
  _Arithmetic_traits<_PromoTy1>::_Rank>::_Type type;
 };



}
# 9 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/utility" 2 3
# 38 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/utility" 3
namespace std {
 namespace tr1 {

template<class _Type>
 class reference_wrapper;


template<class _Type>
 struct _Unrefwrap
 {
 typedef typename decay<_Type>::type type;
 };

template<class _Type>
 struct _Unrefwrap<reference_wrapper<_Type> >
 {
 typedef _Type& type;
 };

template<class _Type>
 struct _Unrefwrap<const reference_wrapper<_Type> >
 {
 typedef _Type& type;
 };

template<class _Type>
 struct _Unrefwrap<volatile reference_wrapper<_Type> >
 {
 typedef _Type& type;
 };

template<class _Type>
 struct _Unrefwrap<const volatile reference_wrapper<_Type> >
 {
 typedef _Type& type;
 };
# 82 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/utility" 3
 }
using tr1::_Unrefwrap;


template<class _Ty>
 struct identity
 {
 typedef _Ty type;

 const _Ty& operator()(const _Ty& _Left) const
  {
  return (_Left);
  }
 };
# 155 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/utility" 3
template<class _Ty> inline
 const _Ty& _Move(const _Ty& _Arg)
 {
 return (_Arg);
 }



template<class _Ty> inline
 void swap(_Ty& _Left, _Ty& _Right)
 {
 _Ty _Tmp = _Move(_Left);
 _Left = _Move(_Right);
 _Right = _Move(_Tmp);
 }


template<class _Ty> inline
 void _Swap_adl(_Ty& _Left, _Ty& _Right)
 {
 swap(_Left, _Right);
 }


template<class _Ty1,
 class _Ty2>
 struct _Pair_base
 {
 typedef _Pair_base<_Ty1, _Ty2> _Myt;
 typedef _Ty1 first_type;
 typedef _Ty2 second_type;

 _Pair_base()
  : first(_Ty1()), second(_Ty2())
  {
  }

 _Pair_base(const _Pair_base<_Ty1, _Ty2>& _Right)
  : first(_Right.first), second(_Right.second)
  {
  }

 _Pair_base(const _Ty1& _Val1, const _Ty2& _Val2)
  : first(_Val1), second(_Val2)
  {
  }
# 245 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/utility" 3
 _Ty1 first;
 _Ty2 second;
 };

template<class _Ty1,
 class _Ty2>
 struct pair
  : public _Pair_base<_Ty1, _Ty2>
 {
 typedef _Pair_base<_Ty1, _Ty2> _Mybase;

 typedef pair<_Ty1, _Ty2> _Myt;
 typedef _Ty1 first_type;
 typedef _Ty2 second_type;

 pair()
  : _Mybase()
  {
  }

 pair(const _Ty1& _Val1, const _Ty2& _Val2)
  : _Mybase(_Val1, _Val2)
  {
  }

 template<class _Other1,
  class _Other2>
  pair(pair<_Other1, _Other2>& _Right)
  : _Mybase(_Right.first, _Right.second)
  {
  }

 template<class _Other1,
  class _Other2>
  pair(const pair<_Other1, _Other2>& _Right)
  : _Mybase(_Right.first, _Right.second)
  {
  }

 void swap(_Myt& _Right)
  {
  if (this != &_Right)
   {
   _Swap_adl(this->first, _Right.first);
   _Swap_adl(this->second, _Right.second);
   }
  }

 _Myt& operator=(const _Myt& _Right)
  {
  this->first = _Right.first;
  this->second = _Right.second;
  return (*this);
  }
# 367 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/utility" 3
 };


template<class _Ty1,
 class _Ty2> inline
 void swap(pair<_Ty1, _Ty2>& _Left, pair<_Ty1, _Ty2>& _Right)
 {
 _Left.swap(_Right);
 }
# 395 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/utility" 3
template<class _Ty1,
 class _Ty2> inline
 bool operator==(const pair<_Ty1, _Ty2>& _Left,
  const pair<_Ty1, _Ty2>& _Right)
 {
 return (_Left.first == _Right.first && _Left.second == _Right.second);
 }

template<class _Ty1,
 class _Ty2> inline
 bool operator!=(const pair<_Ty1, _Ty2>& _Left,
  const pair<_Ty1, _Ty2>& _Right)
 {
 return (!(_Left == _Right));
 }

template<class _Ty1,
 class _Ty2> inline
 bool operator<(const pair<_Ty1, _Ty2>& _Left,
  const pair<_Ty1, _Ty2>& _Right)
 {
 return (_Left.first < _Right.first ||
  !(_Right.first < _Left.first) && _Left.second < _Right.second);
 }

template<class _Ty1,
 class _Ty2> inline
 bool operator>(const pair<_Ty1, _Ty2>& _Left,
  const pair<_Ty1, _Ty2>& _Right)
 {
 return (_Right < _Left);
 }

template<class _Ty1,
 class _Ty2> inline
 bool operator<=(const pair<_Ty1, _Ty2>& _Left,
  const pair<_Ty1, _Ty2>& _Right)
 {
 return (!(_Right < _Left));
 }

template<class _Ty1,
 class _Ty2> inline
 bool operator>=(const pair<_Ty1, _Ty2>& _Left,
  const pair<_Ty1, _Ty2>& _Right)
 {
 return (!(_Left < _Right));
 }
# 498 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/utility" 3
template<class _Ty1,
 class _Ty2> inline
 pair<_Ty1, _Ty2> make_pair(_Ty1 _Val1, _Ty2 _Val2)
 {
 return (pair<_Ty1, _Ty2>(_Val1, _Val2));
 }



template<class _InIt> inline
 _InIt begin(const pair<_InIt, _InIt>& _Pair)
 {
 return (_Pair.first);
 }

template<class _InIt> inline
 _InIt end(const pair<_InIt, _InIt>& _Pair)
 {
 return (_Pair.second);
 }




 namespace rel_ops
  {
template<class _Ty> inline
 bool operator!=(const _Ty& _Left, const _Ty& _Right)
 {
 return (!(_Left == _Right));
 }

template<class _Ty> inline
 bool operator>(const _Ty& _Left, const _Ty& _Right)
 {
 return (_Right < _Left);
 }

template<class _Ty> inline
 bool operator<=(const _Ty& _Left, const _Ty& _Right)
 {
 return (!(_Right < _Left));
 }

template<class _Ty> inline
 bool operator>=(const _Ty& _Left, const _Ty& _Right)
 {
 return (!(_Left < _Right));
 }
  }

}


namespace std {
 namespace tr1 {

template<class _Tuple>
 struct tuple_size;
template<size_t _Idx,
 class _Tuple>
 struct tuple_element;
template<class _Ty1,
 class _Ty2>
 struct tuple_size< ::std:: pair<_Ty1, _Ty2> >
 {
 static const int value = 2;
 };

template<int _Idx,
 class _Ty>
 struct _Pair_data;
template<class _Ty1,
 class _Ty2>
 struct _Pair_data<0, ::std:: pair<_Ty1, _Ty2> >
 {
 typedef _Ty1& _Type;
 typedef const _Ty1& _CType;

 static _Type _Val(::std:: pair<_Ty1, _Ty2>& _Pr)
  {
  return (_Pr.first);
  }

 static _CType _Val(const ::std:: pair<_Ty1, _Ty2>& _Pr)
  {
  return (_Pr.first);
  }
 };

template<class _Ty1,
 class _Ty2>
 struct _Pair_data<1, ::std:: pair<_Ty1, _Ty2> >
 {
 typedef _Ty2& _Type;
 typedef const _Ty2& _CType;

 static _Type _Val(::std:: pair<_Ty1, _Ty2>& _Pr)
  {
  return (_Pr.second);
  }

 static _CType _Val(const ::std:: pair<_Ty1, _Ty2>& _Pr)
  {
  return (_Pr.second);
  }
 };

template<class _Ty1,
 class _Ty2>
 struct tuple_element<0, ::std:: pair<_Ty1, _Ty2> >
 {
 typedef _Ty1 type;
 };

template<class _Ty1,
 class _Ty2>
 struct tuple_element<1, ::std:: pair<_Ty1, _Ty2> >
 {
 typedef _Ty2 type;
 };

template<int _Idx,
 class _Ty1,
 class _Ty2>
 typename _Pair_data<_Idx, ::std:: pair<_Ty1, _Ty2> >::_Type
  get(::std:: pair<_Ty1, _Ty2>& _Pr)
 {
 return (_Pair_data<_Idx, ::std:: pair<_Ty1, _Ty2> >::_Val(_Pr));
 }

template<int _Idx,
 class _Ty1,
 class _Ty2>
 typename _Pair_data<_Idx, ::std:: pair<_Ty1, _Ty2> >::_CType
  get(const ::std:: pair<_Ty1, _Ty2>& _Pr)
 {
 return (_Pair_data<_Idx, ::std:: pair<_Ty1, _Ty2> >::_Val(_Pr));
 }
 }
}



namespace std {
using tr1::get;
using tr1::tuple_element;
using tr1::tuple_size;
}
# 7 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/xutility" 2 3

namespace std {
# 81 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/xutility" 3
struct _Container_base0
 {
 void _Orphan_all()
  {
  }

 void _Swap_all(_Container_base0&)
  {
  }
 };

struct _Iterator_base0
 {
 void _Adopt(const void *)
  {
  }

 const _Container_base0 *_Getcont() const
  {
  return (0);
  }
 };

struct _Container_base12;
struct _Iterator_base12;


struct _Container_proxy
 {
 _Container_proxy()
  : _Mycont(0), _Myfirstiter(0)
  {
  }

 const _Container_base12 *_Mycont;
 _Iterator_base12 *_Myfirstiter;
 };

struct _Container_base12
 {
public:
 _Container_base12()
  : _Myproxy(0)
  {
  }

 _Container_base12(const _Container_base12&)
  : _Myproxy(0)
  {
  }

 _Container_base12& operator=(const _Container_base12&)
  {
  return (*this);
  }

 ~_Container_base12()
  {
  _Orphan_all();
  }

 _Iterator_base12 **_Getpfirst() const
  {
  return (_Myproxy == 0 ? 0 : &_Myproxy->_Myfirstiter);
  }

 void _Orphan_all();
 void _Swap_all(_Container_base12&);

 _Container_proxy *_Myproxy;
 };

struct _Iterator_base12
 {
public:
 _Iterator_base12()
  : _Myproxy(0), _Mynextiter(0)
  {
  }

 _Iterator_base12(const _Iterator_base12& _Right)
  : _Myproxy(0), _Mynextiter(0)
  {
  *this = _Right;
  }

 _Iterator_base12& operator=(const _Iterator_base12& _Right)
  {
  if (_Myproxy != _Right._Myproxy)
   _Adopt(_Right._Myproxy->_Mycont);
  return (*this);
  }

 ~_Iterator_base12()
  {




  }

 void _Adopt(const _Container_base12 *_Parent)
  {
  if (_Parent != 0)
   {
   _Container_proxy *_Parent_proxy = _Parent->_Myproxy;
# 199 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/xutility" 3
   _Myproxy = _Parent_proxy;

   }
  }

 void _Clrcont()
  {
  _Myproxy = 0;
  }

 const _Container_base12 *_Getcont() const
  {
  return (_Myproxy == 0 ? 0 : _Myproxy->_Mycont);
  }

 _Iterator_base12 **_Getpnext()
  {
  return (&_Mynextiter);
  }

 void _Orphan_me()
  {
# 234 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/xutility" 3
  }

 _Container_proxy *_Myproxy;
 _Iterator_base12 *_Mynextiter;
 };


inline void _Container_base12::_Orphan_all()
 {
# 254 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/xutility" 3
 }

inline void _Container_base12::_Swap_all(_Container_base12& _Right)
 {




 _Container_proxy *_Temp = _Myproxy;
 _Myproxy = _Right._Myproxy;
 _Right._Myproxy = _Temp;

 if (_Myproxy != 0)
  _Myproxy->_Mycont = (_Container_base12 *)this;
 if (_Right._Myproxy != 0)
  _Right._Myproxy->_Mycont = (_Container_base12 *)&_Right;
 }


typedef _Container_base0 _Container_base;
typedef _Iterator_base0 _Iterator_base;
# 285 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/xutility" 3
::std:: tr1::_No _Has_unchecked_type(...);

template<class _Ty>
 ::std:: tr1::_Yes _Has_unchecked_type(_Ty *,
  typename _Ty::_Unchecked_type * = 0);

template<class _Iter,
 bool>
 struct _Unchecked_helper
 {
 typedef _Iter type;
 };

template<class _Iter>
 struct _Unchecked_helper<_Iter, true>
 {
 typedef typename _Iter::_Unchecked_type type;
 };

template<class _Iter>
 struct _Get_unchecked_type
 {
 typedef typename _Unchecked_helper<_Iter,
  (sizeof (_Has_unchecked_type((_Iter *)0)) == sizeof (::std:: tr1::_Yes))>::type type;
 };


template<class _Iter>
 struct _Is_checked_helper
  : public ::std:: tr1::integral_constant<bool,
   (sizeof (_Has_unchecked_type((_Iter *)0)) == sizeof (::std:: tr1::_Yes))>
 {
 };


template<class _Iter> inline
 _Is_checked_helper<_Iter> _Is_checked(_Iter)
 {
 return (_Is_checked_helper<_Iter>());
 }

typedef tr1::true_type _True_type;
typedef tr1::false_type _False_type;


template<class _Iter> inline
 _Iter _Unchecked(_Iter _Src)
 {
 return (_Src);
 }


template<class _Iter,
 class _UIter> inline
 _Iter& _Rechecked(_Iter& _Dest, _UIter _Src)
 {
 _Dest = _Src;
 return (_Dest);
 }



struct input_iterator_tag
 {
 };

struct output_iterator_tag
 {
 };

struct forward_iterator_tag
 : public input_iterator_tag, output_iterator_tag
 {
 };

struct bidirectional_iterator_tag
 : public forward_iterator_tag
 {
 };

struct random_access_iterator_tag
 : public bidirectional_iterator_tag
 {
 };

struct _Int_iterator_tag
 {
 };


struct _Nonscalar_ptr_iterator_tag
 {
 };
struct _Scalar_ptr_iterator_tag
 {
 };


template<class _Category,
 class _Ty,
 class _Diff = ptrdiff_t,
 class _Pointer = _Ty *,
 class _Reference = _Ty&>
 struct iterator
 {
 typedef _Category iterator_category;
 typedef _Ty value_type;
 typedef _Diff difference_type;
 typedef _Diff distance_type;
 typedef _Pointer pointer;
 typedef _Reference reference;
 };

template<class _Category,
 class _Ty,
 class _Diff,
 class _Pointer,
 class _Reference,
 class _Base>
 struct _Iterator012
  : public _Base
 {
 typedef _Category iterator_category;
 typedef _Ty value_type;
 typedef _Diff difference_type;
 typedef _Diff distance_type;
 typedef _Pointer pointer;
 typedef _Reference reference;
 };

struct _Outit
 : public iterator<output_iterator_tag, void, void,
  void, void>
 {
 };


template<class _Iter>
 struct iterator_traits
 {
 typedef typename _Iter::iterator_category iterator_category;
 typedef typename _Iter::value_type value_type;
 typedef typename _Iter::difference_type difference_type;
 typedef difference_type distance_type;
 typedef typename _Iter::pointer pointer;
 typedef typename _Iter::reference reference;
 };

template<class _Ty>
 struct iterator_traits<_Ty *>
 {
 typedef random_access_iterator_tag iterator_category;
 typedef _Ty value_type;
 typedef ptrdiff_t difference_type;
 typedef ptrdiff_t distance_type;
 typedef _Ty *pointer;
 typedef _Ty& reference;
 };

template<class _Ty>
 struct iterator_traits<const _Ty *>
 {
 typedef random_access_iterator_tag iterator_category;
 typedef _Ty value_type;
 typedef ptrdiff_t difference_type;
 typedef ptrdiff_t distance_type;
 typedef const _Ty *pointer;
 typedef const _Ty& reference;
 };

template<> struct iterator_traits<_Bool>
 {
 typedef _Int_iterator_tag iterator_category;
 };

template<> struct iterator_traits<char>
 {
 typedef _Int_iterator_tag iterator_category;
 };

template<> struct iterator_traits<signed char>
 {
 typedef _Int_iterator_tag iterator_category;
 };

template<> struct iterator_traits<unsigned char>
 {
 typedef _Int_iterator_tag iterator_category;
 };

template<> struct iterator_traits<short>
 {
 typedef _Int_iterator_tag iterator_category;
 };

template<> struct iterator_traits<unsigned short>
 {
 typedef _Int_iterator_tag iterator_category;
 };

template<> struct iterator_traits<int>
 {
 typedef _Int_iterator_tag iterator_category;
 };

template<> struct iterator_traits<unsigned int>
 {
 typedef _Int_iterator_tag iterator_category;
 };

template<> struct iterator_traits<long>
 {
 typedef _Int_iterator_tag iterator_category;
 };

template<> struct iterator_traits<unsigned long>
 {
 typedef _Int_iterator_tag iterator_category;
 };


template<> struct iterator_traits<long long>
 {
 typedef _Int_iterator_tag iterator_category;
 };

template<> struct iterator_traits<unsigned long long>
 {
 typedef _Int_iterator_tag iterator_category;
 };



template<class _Iter> inline
 typename iterator_traits<_Iter>::iterator_category
  _Iter_cat(const _Iter&)
 {
 typename iterator_traits<_Iter>::iterator_category _Cat;
 return (_Cat);
 }


template<class _Iter1,
 class _Iter2> inline
 _Nonscalar_ptr_iterator_tag _Ptr_cat(_Iter1&, _Iter2&)
 {
 _Nonscalar_ptr_iterator_tag _Cat;
 return (_Cat);
 }


template<class _Ty> inline
 _Scalar_ptr_iterator_tag _Ptr_cat(_Ty **, _Ty **)
 {
 _Scalar_ptr_iterator_tag _Cat;
 return (_Cat);
 }

template<class _Ty> inline
 _Scalar_ptr_iterator_tag _Ptr_cat(_Ty *const *, _Ty **)
 {
 _Scalar_ptr_iterator_tag _Cat;
 return (_Cat);
 }

template<class _Ty> inline
 _Scalar_ptr_iterator_tag _Ptr_cat(_Ty **, const _Ty **)
 {
 _Scalar_ptr_iterator_tag _Cat;
 return (_Cat);
 }

template<class _Ty> inline
 _Scalar_ptr_iterator_tag _Ptr_cat(_Ty *const *, const _Ty **)
 {
 _Scalar_ptr_iterator_tag _Cat;
 return (_Cat);
 }



inline _Scalar_ptr_iterator_tag _Ptr_cat(_Bool *, _Bool *)
 {
 _Scalar_ptr_iterator_tag _Cat;
 return (_Cat);
 }

inline _Scalar_ptr_iterator_tag _Ptr_cat(const _Bool *, _Bool *)
 {
 _Scalar_ptr_iterator_tag _Cat;
 return (_Cat);
 }

inline _Scalar_ptr_iterator_tag _Ptr_cat(char *, char *)
 {
 _Scalar_ptr_iterator_tag _Cat;
 return (_Cat);
 }

inline _Scalar_ptr_iterator_tag _Ptr_cat(const char *, char *)
 {
 _Scalar_ptr_iterator_tag _Cat;
 return (_Cat);
 }

inline _Scalar_ptr_iterator_tag _Ptr_cat(signed char *, signed char *)
 {
 _Scalar_ptr_iterator_tag _Cat;
 return (_Cat);
 }

inline _Scalar_ptr_iterator_tag _Ptr_cat(const signed char *, signed char *)
 {
 _Scalar_ptr_iterator_tag _Cat;
 return (_Cat);
 }

inline _Scalar_ptr_iterator_tag _Ptr_cat(unsigned char *,
 unsigned char *)
 {
 _Scalar_ptr_iterator_tag _Cat;
 return (_Cat);
 }

inline _Scalar_ptr_iterator_tag _Ptr_cat(const unsigned char *,
 unsigned char *)
 {
 _Scalar_ptr_iterator_tag _Cat;
 return (_Cat);
 }

inline _Scalar_ptr_iterator_tag _Ptr_cat(short *, short *)
 {
 _Scalar_ptr_iterator_tag _Cat;
 return (_Cat);
 }

inline _Scalar_ptr_iterator_tag _Ptr_cat(const short *, short *)
 {
 _Scalar_ptr_iterator_tag _Cat;
 return (_Cat);
 }

inline _Scalar_ptr_iterator_tag _Ptr_cat(unsigned short *,
 unsigned short *)
 {
 _Scalar_ptr_iterator_tag _Cat;
 return (_Cat);
 }

inline _Scalar_ptr_iterator_tag _Ptr_cat(const unsigned short *,
 unsigned short *)
 {
 _Scalar_ptr_iterator_tag _Cat;
 return (_Cat);
 }

inline _Scalar_ptr_iterator_tag _Ptr_cat(int *, int *)
 {
 _Scalar_ptr_iterator_tag _Cat;
 return (_Cat);
 }

inline _Scalar_ptr_iterator_tag _Ptr_cat(const int *, int *)
 {
 _Scalar_ptr_iterator_tag _Cat;
 return (_Cat);
 }

inline _Scalar_ptr_iterator_tag _Ptr_cat(unsigned int *, unsigned int *)
 {
 _Scalar_ptr_iterator_tag _Cat;
 return (_Cat);
 }

inline _Scalar_ptr_iterator_tag _Ptr_cat(const unsigned int *, unsigned int *)
 {
 _Scalar_ptr_iterator_tag _Cat;
 return (_Cat);
 }

inline _Scalar_ptr_iterator_tag _Ptr_cat(long *, long *)
 {
 _Scalar_ptr_iterator_tag _Cat;
 return (_Cat);
 }

inline _Scalar_ptr_iterator_tag _Ptr_cat(const long *, long *)
 {
 _Scalar_ptr_iterator_tag _Cat;
 return (_Cat);
 }

inline _Scalar_ptr_iterator_tag _Ptr_cat(unsigned long *,
 unsigned long *)
 {
 _Scalar_ptr_iterator_tag _Cat;
 return (_Cat);
 }

inline _Scalar_ptr_iterator_tag _Ptr_cat(const unsigned long *,
 unsigned long *)
 {
 _Scalar_ptr_iterator_tag _Cat;
 return (_Cat);
 }

inline _Scalar_ptr_iterator_tag _Ptr_cat(float *, float *)
 {
 _Scalar_ptr_iterator_tag _Cat;
 return (_Cat);
 }

inline _Scalar_ptr_iterator_tag _Ptr_cat(const float *, float *)
 {
 _Scalar_ptr_iterator_tag _Cat;
 return (_Cat);
 }

inline _Scalar_ptr_iterator_tag _Ptr_cat(double *, double *)
 {
 _Scalar_ptr_iterator_tag _Cat;
 return (_Cat);
 }

inline _Scalar_ptr_iterator_tag _Ptr_cat(const double *, double *)
 {
 _Scalar_ptr_iterator_tag _Cat;
 return (_Cat);
 }

inline _Scalar_ptr_iterator_tag _Ptr_cat(long double *, long double *)
 {
 _Scalar_ptr_iterator_tag _Cat;
 return (_Cat);
 }

inline _Scalar_ptr_iterator_tag _Ptr_cat(const long double *, long double *)
 {
 _Scalar_ptr_iterator_tag _Cat;
 return (_Cat);
 }


inline _Scalar_ptr_iterator_tag _Ptr_cat(long long *, long long *)
 {
 _Scalar_ptr_iterator_tag _Cat;
 return (_Cat);
 }

inline _Scalar_ptr_iterator_tag _Ptr_cat(const long long *, long long *)
 {
 _Scalar_ptr_iterator_tag _Cat;
 return (_Cat);
 }

inline _Scalar_ptr_iterator_tag _Ptr_cat(unsigned long long *, unsigned long long *)
 {
 _Scalar_ptr_iterator_tag _Cat;
 return (_Cat);
 }

inline _Scalar_ptr_iterator_tag _Ptr_cat(const unsigned long long *, unsigned long long *)
 {
 _Scalar_ptr_iterator_tag _Cat;
 return (_Cat);
 }
# 940 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/xutility" 3
template<class _Iter> inline
 typename iterator_traits<_Iter>::value_type *_Val_type(_Iter)
 {
 return (0);
 }


template<class _InIt,
 class _Diff> inline
 void advance(_InIt& _Where, _Diff _Off)
 {
 _Advance(_Where, _Off, _Iter_cat(_Where));
 }

template<class _InIt,
 class _Diff> inline
 void _Advance(_InIt& _Where, _Diff _Off, input_iterator_tag)
 {





 for (; 0 < _Off; --_Off)
  ++_Where;
 }

template<class _FI,
 class _Diff> inline
 void _Advance(_FI& _Where, _Diff _Off, forward_iterator_tag)
 {





 for (; 0 < _Off; --_Off)
  ++_Where;
 }

template<class _BI,
 class _Diff> inline
 void _Advance(_BI& _Where, _Diff _Off, bidirectional_iterator_tag)
 {
 for (; 0 < _Off; --_Off)
  ++_Where;
 for (; _Off < 0; ++_Off)
  --_Where;
 }

template<class _RI,
 class _Diff> inline
 void _Advance(_RI& _Where, _Diff _Off, random_access_iterator_tag)
 {
 _Where += _Off;
 }


template<class _Iter> inline
 typename iterator_traits<_Iter>::difference_type
  *_Dist_type(_Iter)
 {
 return (0);
 }


template<class _InIt,
 class _Diff> inline
  void _Distance2(_InIt _First, _InIt _Last, _Diff& _Off,
   input_iterator_tag)
 {
 for (; _First != _Last; ++_First)
  ++_Off;
 }

template<class _FwdIt,
 class _Diff> inline
  void _Distance2(_FwdIt _First, _FwdIt _Last, _Diff& _Off,
   forward_iterator_tag)
 {
 for (; _First != _Last; ++_First)
  ++_Off;
 }

template<class _BidIt,
 class _Diff> inline
  void _Distance2(_BidIt _First, _BidIt _Last, _Diff& _Off,
   bidirectional_iterator_tag)
 {
 for (; _First != _Last; ++_First)
  ++_Off;
 }

template<class _RanIt,
 class _Diff> inline
  void _Distance2(_RanIt _First, _RanIt _Last, _Diff& _Off,
   random_access_iterator_tag)
 {
# 1046 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/xutility" 3
 _Off += _Last - _First;
 }

template<class _InIt> inline
 typename iterator_traits<_InIt>::difference_type
  distance(_InIt _First, _InIt _Last)
 {
 typename iterator_traits<_InIt>::difference_type _Off = 0;
 _Distance2(_First, _Last, _Off, _Iter_cat(_First));
 return (_Off);
 }

template<class _InIt,
 class _Diff> inline
  void _Distance(_InIt _First, _InIt _Last, _Diff& _Off)
 {
 _Distance2(_First, _Last, _Off, _Iter_cat(_First));
 }



template<class _InIt,
 class _Diff> inline
  _InIt _Increment(_InIt _First, _Diff _Off,
   input_iterator_tag)
 {
 for (; 0 < _Off; --_Off)
  ++_First;
 return (_First);
 }

template<class _FwdIt,
 class _Diff> inline
  _FwdIt _Increment(_FwdIt _First, _Diff _Off,
   forward_iterator_tag)
 {
 for (; 0 < _Off; --_Off)
  ++_First;
 return (_First);
 }

template<class _BidIt,
 class _Diff> inline
  _BidIt _Increment(_BidIt _First, _Diff _Off,
   bidirectional_iterator_tag)
 {
 for (; _Off < 0; ++_Off)
  --_First;
 for (; 0 < _Off; --_Off)
  ++_First;
 return (_First);
 }

template<class _RanIt,
 class _Diff> inline
  _RanIt _Increment(_RanIt _First, _Diff _Off,
   random_access_iterator_tag)
 {
 return (_First + _Off);
 }

template<class _InIt> inline
 _InIt next(_InIt _First,
  typename iterator_traits<_InIt>::difference_type _Off = 1)
 {
 return (_Increment(_First, _Off, _Iter_cat(_First)));
 }

template<class _InIt> inline
 _InIt prev(_InIt _First,
  typename iterator_traits<_InIt>::difference_type _Off = 1)
 {
 return (_Increment(_First, -_Off, _Iter_cat(_First)));
 }

template<class _Container> inline
 typename _Container::iterator begin(_Container& _Cont)
 {
 return (_Cont.begin());
 }

template<class _Container> inline
 typename _Container::const_iterator begin(const _Container& _Cont)
 {
 return (_Cont.begin());
 }

template<class _Container> inline
 typename _Container::iterator end(_Container& _Cont)
 {
 return (_Cont.end());
 }

template<class _Container> inline
 typename _Container::const_iterator end(const _Container& _Cont)
 {
 return (_Cont.end());
 }

template<class _Ty,
 size_t _Size> inline
 _Ty *begin(_Ty (&_Array)[_Size])
 {
 return (&_Array[0]);
 }

template<class _Ty,
 size_t _Size> inline
 _Ty *end(_Ty (&_Array)[_Size])
 {
 return (&_Array[0] + _Size);
 }



template<class _RanIt,
 class _Base>
 class _Revranit
  : public _Base
 {
public:
 typedef _Revranit<_RanIt, _Base> _Myt;
  typedef typename _Base::difference_type difference_type;
 typedef typename _Base::pointer pointer;
 typedef typename _Base::reference reference;
 typedef _RanIt iterator_type;

 _Revranit()
  {
  }

 explicit _Revranit(_RanIt _Right)
  : current(_Right)
  {
  }

 template<class _RanIt2,
  class _Base2>
  _Revranit(const _Revranit<_RanIt2, _Base2>& _Right)
  : current(_Right.base())
  {
  }

 _RanIt base() const
  {
  return (current);
  }

 reference operator*() const
  {
  _RanIt _Tmp = current;
  return (*--_Tmp);
  }

 pointer operator->() const
  {
  return (&**this);
  }

 _Myt& operator++()
  {
  --current;
  return (*this);
  }

 _Myt operator++(int)
  {
  _Myt _Tmp = *this;
  --current;
  return (_Tmp);
  }

 _Myt& operator--()
  {
  ++current;
  return (*this);
  }

 _Myt operator--(int)
  {
  _Myt _Tmp = *this;
  ++current;
  return (_Tmp);
  }

 template<class _RanIt2,
  class _Base2>
  bool _Equal(const _Revranit<_RanIt2, _Base2>& _Right) const
  {
  return (current == _Right.base());
  }



 _Myt& operator+=(difference_type _Off)
  {
  current -= _Off;
  return (*this);
  }

 _Myt operator+(difference_type _Off) const
  {
  return (_Myt(current - _Off));
  }

 _Myt& operator-=(difference_type _Off)
  {
  current += _Off;
  return (*this);
  }

 _Myt operator-(difference_type _Off) const
  {
  return (_Myt(current + _Off));
  }

 reference operator[](difference_type _Off) const
  {
  return (*(*this + _Off));
  }

 template<class _RanIt2,
  class _Base2>
  bool _Less(const _Revranit<_RanIt2, _Base2>& _Right) const
  {
  return (_Right.base() < current);
  }

 difference_type operator-(const _Myt& _Right) const
  {
  return (_Right.base() - current);
  }

protected:
 _RanIt current;
 };


template<class _RanIt,
 class _Base,
 class _Diff> inline
 _Revranit<_RanIt, _Base>
  operator+(_Diff _Off,
  const _Revranit<_RanIt, _Base>& _Right)
 {
 return (_Right + _Off);
 }

template<class _RanIt1,
 class _Base1,
 class _RanIt2,
 class _Base2> inline
 typename _Base1::difference_type operator-(
  const _Revranit<_RanIt1, _Base1>& _Left,
  const _Revranit<_RanIt2, _Base2>& _Right)
 {
 return (_Right.base() - _Left.base());
 }

template<class _RanIt1,
 class _Base1,
 class _RanIt2,
 class _Base2> inline
 bool operator==(
  const _Revranit<_RanIt1, _Base1>& _Left,
  const _Revranit<_RanIt2, _Base2>& _Right)
 {
 return (_Left._Equal(_Right));
 }

template<class _RanIt1,
 class _Base1,
 class _RanIt2,
 class _Base2> inline
 bool operator!=(
  const _Revranit<_RanIt1, _Base1>& _Left,
  const _Revranit<_RanIt2, _Base2>& _Right)
 {
 return (!(_Left == _Right));
 }

template<class _RanIt1,
 class _Base1,
 class _RanIt2,
 class _Base2> inline
 bool operator<(
  const _Revranit<_RanIt1, _Base1>& _Left,
  const _Revranit<_RanIt2, _Base2>& _Right)
 {
 return (_Left._Less(_Right));
 }

template<class _RanIt1,
 class _Base1,
 class _RanIt2,
 class _Base2> inline
 bool operator>(
  const _Revranit<_RanIt1, _Base1>& _Left,
  const _Revranit<_RanIt2, _Base2>& _Right)
 {
 return (_Right < _Left);
 }

template<class _RanIt1,
 class _Base1,
 class _RanIt2,
 class _Base2> inline
 bool operator<=(
  const _Revranit<_RanIt1, _Base1>& _Left,
  const _Revranit<_RanIt2, _Base2>& _Right)
 {
 return (!(_Right < _Left));
 }

template<class _RanIt1,
 class _Base1,
 class _RanIt2,
 class _Base2> inline
 bool operator>=(
  const _Revranit<_RanIt1, _Base1>& _Left,
  const _Revranit<_RanIt2, _Base2>& _Right)
 {
 return (!(_Left < _Right));
 }


template<class _RanIt>
 class reverse_iterator
  : public _Revranit<_RanIt, iterator<
   typename iterator_traits<_RanIt>::iterator_category,
   typename iterator_traits<_RanIt>::value_type,
   typename iterator_traits<_RanIt>::difference_type,
   typename iterator_traits<_RanIt>::pointer,
   typename iterator_traits<_RanIt>::reference> >
 {
 typedef reverse_iterator<_RanIt> _Myt;
 typedef _Revranit<_RanIt, iterator<
  typename iterator_traits<_RanIt>::iterator_category,
  typename iterator_traits<_RanIt>::value_type,
  typename iterator_traits<_RanIt>::difference_type,
  typename iterator_traits<_RanIt>::pointer,
  typename iterator_traits<_RanIt>::reference> > _Mybase;

public:
  typedef typename iterator_traits<_RanIt>::difference_type difference_type;
 typedef typename iterator_traits<_RanIt>::pointer pointer;
 typedef typename iterator_traits<_RanIt>::reference reference;
 typedef _RanIt iterator_type;

 reverse_iterator()
  {
  }

 explicit reverse_iterator(_RanIt _Right)
  : _Mybase(_Right)
  {
  }

 template<class _Other>
  reverse_iterator(const reverse_iterator<_Other>& _Right)
  : _Mybase(_Right.base())
  {
  }

 reverse_iterator(_Mybase _Right)
  : _Mybase(_Right)
  {
  }

 _Myt& operator++()
  {
  ++*((_Mybase *)this);
  return (*this);
  }

 _Myt operator++(int)
  {
  _Myt _Tmp = *this;
  ++*this;
  return (_Tmp);
  }

 _Myt& operator--()
  {
  --*((_Mybase *)this);
  return (*this);
  }

 _Myt operator--(int)
  {
  _Myt _Tmp = *this;
  --*this;
  return (_Tmp);
  }

 _Myt& operator+=(difference_type _Off)
  {
  *((_Mybase *)this) += _Off;
  return (*this);
  }

 _Myt operator+(difference_type _Off) const
  {
  _Myt _Tmp = *this;
  return (_Tmp += _Off);
  }

 _Myt& operator-=(difference_type _Off)
  {
  *((_Mybase *)this) -= _Off;
  return (*this);
  }

 _Myt operator-(difference_type _Off) const
  {
  _Myt _Tmp = *this;
  return (_Tmp -= _Off);
  }
 };

template<class _RanIt>
 struct _Is_checked_helper<reverse_iterator<_RanIt> >
  : public _Is_checked_helper<_RanIt>
 {
 };


template<class _RanIt,
 class _Diff> inline
 reverse_iterator<_RanIt> operator+(_Diff _Off,
  const reverse_iterator<_RanIt>& _Right)
 {
 return (_Right + _Off);
 }

template<class _RanIt1,
 class _RanIt2> inline
 typename reverse_iterator<_RanIt1>::difference_type
  operator-(const reverse_iterator<_RanIt1>& _Left,
   const reverse_iterator<_RanIt2>& _Right)
 {
 return (_Right.base() - _Left.base());
 }

template<class _RanIt1,
 class _RanIt2> inline
 bool operator==(const reverse_iterator<_RanIt1>& _Left,
  const reverse_iterator<_RanIt2>& _Right)
 {
 return (_Left._Equal(_Right));
 }

template<class _RanIt1,
 class _RanIt2> inline
 bool operator!=(const reverse_iterator<_RanIt1>& _Left,
  const reverse_iterator<_RanIt2>& _Right)
 {
 return (!(_Left == _Right));
 }

template<class _RanIt1,
 class _RanIt2> inline
 bool operator<(const reverse_iterator<_RanIt1>& _Left,
  const reverse_iterator<_RanIt2>& _Right)
 {
 return (_Left._Less(_Right));
 }

template<class _RanIt1,
 class _RanIt2> inline
 bool operator>(const reverse_iterator<_RanIt1>& _Left,
  const reverse_iterator<_RanIt2>& _Right)
 {
 return (_Right < _Left);
 }

template<class _RanIt1,
 class _RanIt2> inline
 bool operator<=(const reverse_iterator<_RanIt1>& _Left,
  const reverse_iterator<_RanIt2>& _Right)
 {
 return (!(_Right < _Left));
 }

template<class _RanIt1,
 class _RanIt2> inline
 bool operator>=(const reverse_iterator<_RanIt1>& _Left,
  const reverse_iterator<_RanIt2>& _Right)
 {
 return (!(_Left < _Right));
 }


template<class _BidIt,
 class _Ty,
 class _Reference = _Ty&,
 class _Pointer = _Ty *,
 class _Diff = ptrdiff_t>
 class reverse_bidirectional_iterator
  : public iterator<bidirectional_iterator_tag, _Ty, _Diff,
   _Pointer, _Reference>
 {
public:
 typedef reverse_bidirectional_iterator<_BidIt, _Ty, _Reference,
  _Pointer, _Diff> _Myt;
 typedef _BidIt iterator_type;

 reverse_bidirectional_iterator()
  {
  }

 explicit reverse_bidirectional_iterator(_BidIt _Right)
  : current(_Right)
  {
  }

 _BidIt base() const
  {
  return (current);
  }

 _Reference operator*() const
  {
  _BidIt _Tmp = current;
  return (*--_Tmp);
  }

 _Pointer operator->() const
  {
  _Reference _Tmp = **this;
  return (&_Tmp);
  }

 _Myt& operator++()
  {
  --current;
  return (*this);
  }

 _Myt operator++(int)
  {
  _Myt _Tmp = *this;
  --current;
  return (_Tmp);
  }

 _Myt& operator--()
  {
  ++current;
  return (*this);
  }

 _Myt operator--(int)
  {
  _Myt _Tmp = *this;
  ++current;
  return (_Tmp);
  }

 bool operator==(const _Myt& _Right) const
  {
  return (current == _Right.current);
  }

 bool operator!=(const _Myt& _Right) const
  {
  return (!(*this == _Right));
  }

protected:
 _BidIt current;
 };


template<class _BidIt,
 class _BidIt2 = _BidIt>
 class _Revbidit
  : public iterator<
   typename iterator_traits<_BidIt>::iterator_category,
   typename iterator_traits<_BidIt>::value_type,
   typename iterator_traits<_BidIt>::difference_type,
   typename iterator_traits<_BidIt>::pointer,
   typename iterator_traits<_BidIt>::reference>
 {
public:
 typedef _Revbidit<_BidIt, _BidIt2> _Myt;
 typedef typename iterator_traits<_BidIt>::difference_type _Diff;
 typedef typename iterator_traits<_BidIt>::pointer _Pointer;
 typedef typename iterator_traits<_BidIt>::reference _Reference;
 typedef _BidIt iterator_type;

 _Revbidit()
  {
  }

 explicit _Revbidit(_BidIt _Right)
  : current(_Right)
  {
  }

 _Revbidit(const _Revbidit<_BidIt2>& _Other)
  : current (_Other.base())
  {
  }

 _BidIt base() const
  {
  return (current);
  }

 _Reference operator*() const
  {
  _BidIt _Tmp = current;
  return (*--_Tmp);
  }

 _Pointer operator->() const
  {
  _Reference _Tmp = **this;
  return (&_Tmp);
  }

 _Myt& operator++()
  {
  --current;
  return (*this);
  }

 _Myt operator++(int)
  {
  _Myt _Tmp = *this;
  --current;
  return (_Tmp);
  }

 _Myt& operator--()
  {
  ++current;
  return (*this);
  }

 _Myt operator--(int)
  {
  _Myt _Tmp = *this;
  ++current;
  return (_Tmp);
  }

 bool operator==(const _Myt& _Right) const
  {
  return (current == _Right.current);
  }

 bool operator!=(const _Myt& _Right) const
  {
  return (!(*this == _Right));
  }

protected:
 _BidIt current;
 };


template<class _Ty,
 size_t _Size>
 class _Array_const_iterator
  : public _Iterator012<random_access_iterator_tag,
   _Ty,
   ptrdiff_t,
   const _Ty *,
   const _Ty&,
   _Iterator_base>
 {
public:
 typedef _Array_const_iterator<_Ty, _Size> _Myiter;
 typedef random_access_iterator_tag iterator_category;

 typedef _Ty value_type;
 typedef size_t size_type;
 typedef ptrdiff_t difference_type;
 typedef const _Ty *pointer;
 typedef const _Ty& reference;


 _Array_const_iterator()
  {
  _Ptr = 0;
  }

 explicit _Array_const_iterator(pointer _Parg, size_t _Off = 0)
  {
  _Ptr = _Parg + _Off;
  }

 typedef pointer _Unchecked_type;

 _Myiter& _Rechecked(_Unchecked_type _Right)
  {
  _Ptr = _Right;
  return (*this);
  }

 _Unchecked_type _Unchecked() const
  {
  return (_Ptr);
  }

 reference operator*() const
  {
  return (*_Ptr);
  }

 pointer operator->() const
  {
  return (&**this);
  }

 _Myiter& operator++()
  {
  ++_Ptr;
  return (*this);
  }

 _Myiter operator++(int)
  {
  _Myiter _Tmp = *this;
  ++*this;
  return (_Tmp);
  }

 _Myiter& operator--()
  {
  --_Ptr;
  return (*this);
  }

 _Myiter operator--(int)
  {
  _Myiter _Tmp = *this;
  --*this;
  return (_Tmp);
  }

 _Myiter& operator+=(difference_type _Off)
  {
  _Ptr += _Off;
  return (*this);
  }

 _Myiter operator+(difference_type _Off) const
  {
  _Myiter _Tmp = *this;
  return (_Tmp += _Off);
  }

 _Myiter& operator-=(difference_type _Off)
  {
  return (*this += -_Off);
  }

 _Myiter operator-(difference_type _Off) const
  {
  _Myiter _Tmp = *this;
  return (_Tmp -= _Off);
  }

 difference_type operator-(const _Myiter& _Right) const
  {
  return (_Ptr - _Right._Ptr);
  }

 reference operator[](difference_type _Off) const
  {
  return (*(*this + _Off));
  }

 bool operator==(const _Myiter& _Right) const
  {
  return (_Ptr == _Right._Ptr);
  }

 bool operator!=(const _Myiter& _Right) const
  {
  return (!(*this == _Right));
  }

 bool operator<(const _Myiter& _Right) const
  {
  return (_Ptr < _Right._Ptr);
  }

 bool operator>(const _Myiter& _Right) const
  {
  return (_Right < *this);
  }

 bool operator<=(const _Myiter& _Right) const
  {
  return (!(_Right < *this));
  }

 bool operator>=(const _Myiter& _Right) const
  {
  return (!(*this < _Right));
  }

 pointer _Ptr;
# 2054 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/xutility" 3
 };

template<class _Ty,
 size_t _Size> inline
 typename _Array_const_iterator<_Ty, _Size>::_Unchecked_type
  _Unchecked(_Array_const_iterator<_Ty, _Size> _Iter)
 {
 return (_Iter._Unchecked());
 }

template<class _Ty,
 size_t _Size> inline
 _Array_const_iterator<_Ty, _Size>&
  _Rechecked(_Array_const_iterator<_Ty, _Size>& _Iter,
   typename _Array_const_iterator<_Ty, _Size>
    ::_Unchecked_type _Right)
 {
 return (_Iter._Rechecked(_Right));
 }

template<class _Ty,
 size_t _Size> inline
 _Array_const_iterator<_Ty, _Size> operator+(
  typename _Array_const_iterator<_Ty, _Size>::difference_type _Off,
  _Array_const_iterator<_Ty, _Size> _Next)
 {
 return (_Next += _Off);
 }


template<class _Ty,
 size_t _Size>
 class _Array_iterator
  : public _Array_const_iterator<_Ty, _Size>
 {
public:
 typedef _Array_iterator<_Ty, _Size> _Myiter;
 typedef _Array_const_iterator<_Ty, _Size> _Mybase;
 typedef random_access_iterator_tag iterator_category;

 typedef _Ty value_type;
 typedef size_t size_type;
 typedef ptrdiff_t difference_type;
 typedef _Ty *pointer;
 typedef _Ty& reference;

 _Array_iterator()
  {
  }

 explicit _Array_iterator(pointer _Parg, size_t _Off = 0)
  : _Mybase(_Parg, _Off)
  {
  }

 typedef pointer _Unchecked_type;

 _Myiter& _Rechecked(_Unchecked_type _Right)
  {
  ((_Mybase *)this)->_Rechecked(_Right);
  return (*this);
  }

 _Unchecked_type _Unchecked() const
  {
  return ((pointer)((_Mybase *)this)->_Unchecked());
  }

 reference operator*() const
  {
  return ((reference)**(_Mybase *)this);
  }

 pointer operator->() const
  {
  return (&**this);
  }

 _Myiter& operator++()
  {
  ++*(_Mybase *)this;
  return (*this);
  }

 _Myiter operator++(int)
  {
  _Myiter _Tmp = *this;
  ++*this;
  return (_Tmp);
  }

 _Myiter& operator--()
  {
  --*(_Mybase *)this;
  return (*this);
  }

 _Myiter operator--(int)
  {
  _Myiter _Tmp = *this;
  --*this;
  return (_Tmp);
  }

 _Myiter& operator+=(difference_type _Off)
  {
  *(_Mybase *)this += _Off;
  return (*this);
  }

 _Myiter operator+(difference_type _Off) const
  {
  _Myiter _Tmp = *this;
  return (_Tmp += _Off);
  }

 _Myiter& operator-=(difference_type _Off)
  {
  return (*this += -_Off);
  }

 _Myiter operator-(difference_type _Off) const
  {
  _Myiter _Tmp = *this;
  return (_Tmp -= _Off);
  }

 difference_type operator-(const _Mybase& _Right) const
  {
  return (*(_Mybase *)this - _Right);
  }

 reference operator[](difference_type _Off) const
  {
  return (*(*this + _Off));
  }
 };

template<class _Ty,
 size_t _Size> inline
 typename _Array_iterator<_Ty, _Size>::_Unchecked_type
  _Unchecked(_Array_iterator<_Ty, _Size> _Iter)
 {
 return (_Iter._Unchecked());
 }

template<class _Ty,
 size_t _Size> inline
 _Array_iterator<_Ty, _Size>&
  _Rechecked(_Array_iterator<_Ty, _Size>& _Iter,
   typename _Array_iterator<_Ty, _Size>
    ::_Unchecked_type _Right)
 {
 return (_Iter._Rechecked(_Right));
 }

template<class _Ty,
 size_t _Size> inline
 _Array_iterator<_Ty, _Size> operator+(
  typename _Array_iterator<_Ty, _Size>::difference_type _Off,
  _Array_iterator<_Ty, _Size> _Next)
 {
 return (_Next += _Off);
 }



template<class _Ty> inline
 const _Ty& (max)(const _Ty& _Left, const _Ty& _Right)
 {
 return (((_Left) < (_Right)) ? _Right : _Left);
 }


template<class _Ty> inline
 _Ty (max)(::std:: initializer_list<_Ty> _Ilist)
 {
 const _Ty *_First = _Ilist.begin();
 const _Ty *_Last = _Ilist.end();

 if (_First != _Last)
  for (const _Ty *_Next = _First; ++_Next != _Last; )
   if (*_First < *_Next)
    _First = _Next;
 return (*_First);
 }



template<class _Ty,
 class _Pr> inline
 const _Ty& (max)(const _Ty& _Left, const _Ty& _Right, _Pr _Pred)
 {
 return (_Pred(_Left, _Right) ? _Right : _Left);
 }


template<class _Ty,
 class _Pr> inline
 _Ty (max)(::std:: initializer_list<_Ty> _Ilist, _Pr _Pred)
 {
 const _Ty *_First = _Ilist.begin();
 const _Ty *_Last = _Ilist.end();

 if (_First != _Last)
  for (const _Ty *_Next = _First; ++_Next != _Last; )
   if (_Pred(*_First, *_Next))
    _First = _Next;
 return (*_First);
 }



template<class _Ty> inline
 const _Ty& (min)(const _Ty& _Left, const _Ty& _Right)
 {
 return (((_Right) < (_Left)) ? _Right : _Left);
 }


template<class _Ty> inline
 _Ty (min)(::std:: initializer_list<_Ty> _Ilist)
 {
 const _Ty *_First = _Ilist.begin();
 const _Ty *_Last = _Ilist.end();

 if (_First != _Last)
  for (const _Ty *_Next = _First; ++_Next != _Last; )
   if (*_Next < *_First)
    _First = _Next;
 return (*_First);
 }



template<class _Ty,
 class _Pr> inline
 const _Ty& (min)(const _Ty& _Left, const _Ty& _Right, _Pr _Pred)
 {
 return (_Pred(_Right, _Left) ? _Right : _Left);
 }


template<class _Ty,
 class _Pr> inline
 _Ty (min)(::std:: initializer_list<_Ty> _Ilist, _Pr _Pred)
 {
 const _Ty *_First = _Ilist.begin();
 const _Ty *_Last = _Ilist.end();

 if (_First != _Last)
  for (const _Ty *_Next = _First; ++_Next != _Last; )
   if (_Pred(*_Next, *_First))
    _First = _Next;
 return (*_First);
 }
# 2321 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/xutility" 3
template<class _Ty> inline
 pair<const _Ty&, const _Ty&>
  minmax(const _Ty& _Left, const _Ty& _Right)
 {
 return (_Right < _Left
  ? pair<const _Ty&, const _Ty&>(_Right, _Left)
  : pair<const _Ty&, const _Ty&>(_Left, _Right));
 }


template<class _Ty> inline
 pair<_Ty, _Ty> minmax(::std:: initializer_list<_Ty> _Ilist)
 {
 const _Ty *_First = _Ilist.begin();
 const _Ty *_Last = _Ilist.end();
 const _Ty *_Largest = _First;

 if (_First != _Last)
  for (const _Ty *_Next = _First; ++_Next != _Last; )
   if (*_Next < *_First)
    _First = _Next;
   else if (!(*_Next < *_Largest))
    _Largest = _Next;
 return (pair<_Ty, _Ty>(*_First, *_Largest));
 }



template<class _Ty,
 class _Pr> inline
 pair<const _Ty&, const _Ty&>
  minmax(const _Ty& _Left, const _Ty& _Right, _Pr _Pred)
 {
 return (_Pred(_Right, _Left)
  ? pair<const _Ty&, const _Ty&>(_Right, _Left)
  : pair<const _Ty&, const _Ty&>(_Left, _Right));
 }


template<class _Ty,
 class _Pr> inline
 pair<_Ty, _Ty> minmax(::std:: initializer_list<_Ty> _Ilist, _Pr _Pred)
 {
 const _Ty *_First = _Ilist.begin();
 const _Ty *_Last = _Ilist.end();
 const _Ty *_Largest = _First;

 if (_First != _Last)
  for (const _Ty *_Next = _First; ++_Next != _Last; )
   if (_Pred(*_Next, *_First))
    _First = _Next;
   else if (!_Pred(*_Next, *_Largest))
    _Largest = _Next;
 return (pair<_Ty, _Ty>(*_First, *_Largest));
 }



template<class _FwdIt1,
 class _FwdIt2> inline
 void iter_swap(_FwdIt1 _Left, _FwdIt2 _Right)
 {
 swap(*_Left, *_Right);
 }


template<class _InIt,
 class _OutIt> inline
 _OutIt _Copy_impl(_InIt _First, _InIt _Last,
  _OutIt _Dest, _Nonscalar_ptr_iterator_tag)
 {
 for (; _First != _Last; ++_Dest, ++_First)
  *_Dest = *_First;
 return (_Dest);
 }

template<class _InIt,
 class _OutIt> inline
 _OutIt _Copy_impl(_InIt _First, _InIt _Last,
  _OutIt _Dest, _Scalar_ptr_iterator_tag)
 {
 ptrdiff_t _Count = _Last - _First;
 :: memmove(&*_Dest, &*_First,
  _Count * sizeof (*_First));
 return (_Dest + _Count);
 }

template<class _InIt,
 class _OutIt> inline
 _OutIt _Copy_impl(_InIt _First, _InIt _Last,
  _OutIt _Dest)
 {
 return (_Copy_impl(_First, _Last,
  _Dest, _Ptr_cat(_First, _Dest)));
 }


template<class _InIt,
 class _OutIt> inline
 _OutIt copy(_InIt _First, _InIt _Last,
  _OutIt _Dest)
 {
 return (_Rechecked(_Dest,
  _Copy_impl(_Unchecked(_First), _Unchecked(_Last),
   _Unchecked(_Dest))));
 }
# 2492 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/xutility" 3
template<class _InIt,
 class _Diff,
 class _OutIt> inline
 _OutIt _Copy_n(_InIt _First, _Diff _Count,
  _OutIt _Dest, input_iterator_tag)
 {
 *_Dest = *_First;
 while (0 < --_Count)
  *++_Dest = *++_First;
 return (++_Dest);
 }

template<class _InIt,
 class _Diff,
 class _OutIt> inline
 _OutIt _Copy_n(_InIt _First, _Diff _Count,
  _OutIt _Dest, forward_iterator_tag)
 {
 for (; 0 < _Count; --_Count, ++_Dest, ++_First)
  *_Dest = *_First;
 return (_Dest);
 }

template<class _InIt,
 class _Diff,
 class _OutIt> inline
 _OutIt _Copy_n(_InIt _First, _Diff _Count,
  _OutIt _Dest, _Nonscalar_ptr_iterator_tag)
 {
 return (_Copy_n(_First, _Count,
  _Dest, _Iter_cat(_First)));
 }
template<class _InIt,
 class _Diff,
 class _OutIt> inline
 _OutIt _Copy_n(_InIt _First, _Diff _Count,
  _OutIt _Dest, _Scalar_ptr_iterator_tag)
 {
 :: memmove(&*_Dest, &*_First,
  _Count * sizeof (*_First));
 return (_Dest + _Count);
 }

template<class _InIt,
 class _Diff,
 class _OutIt> inline
 _OutIt _Copy_n(_InIt _First, _Diff _Count,
  _OutIt _Dest)
 {
 return (_Copy_n(_First, _Count,
  _Dest, _Ptr_cat(_First, _Dest)));
 }


template<class _InIt,
 class _Diff,
 class _OutIt> inline
 _OutIt copy_n(_InIt _First, _Diff _Count,
  _OutIt _Dest)
 {
 if (_Count <= 0)
  return (_Dest);
 else
  return (_Rechecked(_Dest,
   _Copy_n(_Unchecked(_First), _Count,
    _Unchecked(_Dest))));
 }
# 2680 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/xutility" 3
template<class _BidIt1,
 class _BidIt2> inline
 _BidIt2 _Copy_backward(_BidIt1 _First, _BidIt1 _Last,
  _BidIt2 _Dest, _Nonscalar_ptr_iterator_tag)
 {
 while (_First != _Last)
  *--_Dest = *--_Last;
 return (_Dest);
 }

template<class _InIt,
 class _OutIt> inline
 _OutIt _Copy_backward(_InIt _First, _InIt _Last,
  _OutIt _Dest, _Scalar_ptr_iterator_tag)
 {
 ptrdiff_t _Count = _Last - _First;
 :: memmove(&*_Dest - _Count, &*_First,
  _Count * sizeof (*_First));
 return (_Dest - _Count);
 }

template<class _BidIt1,
 class _BidIt2> inline
 _BidIt2 _Copy_backward(_BidIt1 _First, _BidIt1 _Last,
  _BidIt2 _Dest)
 {
 return (_Copy_backward(_First, _Last,
  _Dest, _Ptr_cat(_First, _Dest)));
 }


template<class _BidIt1,
 class _BidIt2> inline
 _BidIt2 copy_backward(_BidIt1 _First, _BidIt1 _Last,
  _BidIt2 _Dest)
 {
 return (_Rechecked(_Dest,
  _Copy_backward(_Unchecked(_First), _Unchecked(_Last),
   _Unchecked(_Dest))));
 }
# 2932 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/xutility" 3
template<class _InIt,
 class _OutIt> inline
 _OutIt _Move(_InIt _First, _InIt _Last, _OutIt _Dest)
 {
 return (_Copy_impl(_First, _Last, _Dest));
 }

template<class _BidIt1,
 class _BidIt2> inline
 _BidIt2 _Move_backward(_BidIt1 _First, _BidIt1 _Last, _BidIt2 _Dest)
 {
 return (_Copy_backward(_First, _Last, _Dest));
 }



template<class _FwdIt,
 class _Ty> inline
 void _Fill(_FwdIt _First, _FwdIt _Last, const _Ty& _Val)
 {
 for (; _First != _Last; ++_First)
  *_First = _Val;
 }

inline void _Fill(char *_First, char *_Last, int _Val)
 {
 :: memset(_First, _Val, _Last - _First);
 }

inline void _Fill(signed char *_First, signed char *_Last, int _Val)
 {
 :: memset(_First, _Val, _Last - _First);
 }

inline void _Fill(unsigned char *_First, unsigned char *_Last, int _Val)
 {
 :: memset(_First, _Val, _Last - _First);
 }

template<class _FwdIt,
 class _Ty> inline
 void fill(_FwdIt _First, _FwdIt _Last, const _Ty& _Val)
 {
 ;
 _Fill(_Unchecked(_First), _Unchecked(_Last), _Val);
 }


template<class _OutIt,
 class _Diff,
 class _Ty> inline
 void _Fill_n(_OutIt _Dest, _Diff _Count, const _Ty& _Val)
 {
 for (; 0 < _Count; --_Count, ++_Dest)
  *_Dest = _Val;
 }

inline void _Fill_n(char *_Dest, size_t _Count, int _Val)
 {
 :: memset(_Dest, _Val, _Count);
 }

inline void _Fill_n(signed char *_Dest, size_t _Count, int _Val)
 {
 :: memset(_Dest, _Val, _Count);
 }

inline void _Fill_n(unsigned char *_Dest, size_t _Count, int _Val)
 {
 :: memset(_Dest, _Val, _Count);
 }


template<class _OutIt,
 class _Diff,
 class _Ty> inline
 void fill_n(_OutIt _Dest, _Diff _Count, const _Ty& _Val)
 {
 _Fill_n(_Unchecked(_Dest), _Count, _Val);
 }
# 3075 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/xutility" 3
template<class _InIt1,
 class _InIt2> inline
 pair<_InIt1, _InIt2>
  _Mismatch(_InIt1 _First1, _InIt1 _Last1,
   _InIt2 _First2)
 {
 for (; _First1 != _Last1 && *_First1 == *_First2; )
  ++_First1, ++_First2;
 return (pair<_InIt1, _InIt2>(_First1, _First2));
 }


template<class _InIt1,
 class _InIt2> inline
 pair<_InIt1, _InIt2>
  mismatch(_InIt1 _First1, _InIt1 _Last1,
   _InIt2 _First2)
 {
 ::std:: pair<typename _Get_unchecked_type<_InIt1>::type, _InIt2> _Ans(
  ::std:: _Mismatch(_Unchecked(_First1), _Unchecked(_Last1),
   _First2));
 return (::std:: pair<_InIt1, _InIt2>(
  _Rechecked(_First1, _Ans.first),
  _Ans.second));
 }
# 3155 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/xutility" 3
template<class _InIt1,
 class _InIt2,
 class _Pr> inline
 pair<_InIt1, _InIt2>
  _Mismatch(_InIt1 _First1, _InIt1 _Last1,
   _InIt2 _First2, _Pr _Pred)
 {
 for (; _First1 != _Last1 && _Pred(*_First1, *_First2); )
  ++_First1, ++_First2;
 return (pair<_InIt1, _InIt2>(_First1, _First2));
 }


template<class _InIt1,
 class _InIt2,
 class _Pr> inline
 pair<_InIt1, _InIt2>
  mismatch(_InIt1 _First1, _InIt1 _Last1,
   _InIt2 _First2, _Pr _Pred)
 {
 ::std:: pair<typename _Get_unchecked_type<_InIt1>::type, _InIt2> _Ans(
  ::std:: _Mismatch(_Unchecked(_First1), _Unchecked(_Last1),
   _First2, _Pred));
 return (::std:: pair<_InIt1, _InIt2>(
  _Rechecked(_First1, _Ans.first),
  _Ans.second));
 }
# 3242 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/xutility" 3
template<class _InIt1,
 class _InIt2> inline
 bool _Equal(_InIt1 _First1, _InIt1 _Last1, _InIt2 _First2)
 {
 for (; _First1 != _Last1; ++_First1, ++_First2)
  if (!(*_First1 == *_First2))
   return (false);
 return (true);
 }

inline bool _Equal(const char *_First1, const char *_Last1,
 const char *_First2)
 {
 return (:: memcmp(_First1, _First2, _Last1 - _First1) == 0);
 }

inline bool _Equal(const signed char *_First1, const signed char *_Last1,
 const signed char *_First2)
 {
 return (:: memcmp(_First1, _First2, _Last1 - _First1) == 0);
 }

inline bool _Equal(const unsigned char *_First1, const unsigned char *_Last1,
 const unsigned char *_First2)
 {
 return (:: memcmp(_First1, _First2, _Last1 - _First1) == 0);
 }


template<class _InIt1,
 class _InIt2> inline
 bool equal(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2)
 {
 return (_Equal(_Unchecked(_First1), _Unchecked(_Last1),
  _Unchecked(_First2)));
 }
# 3322 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/xutility" 3
template<class _InIt1,
 class _InIt2,
 class _Pr> inline
 bool _Equal(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _Pr _Pred)
 {
 for (; _First1 != _Last1; ++_First1, ++_First2)
  if (!_Pred(*_First1, *_First2))
   return (false);
 return (true);
 }


template<class _InIt1,
 class _InIt2,
 class _Pr> inline
 bool equal(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _Pr _Pred)
 {
 return (_Equal(_Unchecked(_First1), _Unchecked(_Last1),
  _Unchecked(_First2), _Pred));
 }
# 3391 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/xutility" 3
template<class _InIt1,
 class _InIt2> inline
 bool _Lexicographical_compare(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2)
 {
 for (; _First1 != _Last1 && _First2 != _Last2; ++_First1, ++_First2)
  if (((*_First1) < (*_First2)))
   return (true);
  else if (*_First2 < *_First1)
   return (false);
 return (_First1 == _Last1 && _First2 != _Last2);
 }

inline bool _Lexicographical_compare(
 const unsigned char *_First1, const unsigned char *_Last1,
 const unsigned char *_First2, const unsigned char *_Last2)
 {
 ptrdiff_t _Num1 = _Last1 - _First1;
 ptrdiff_t _Num2 = _Last2 - _First2;
 int _Ans = :: memcmp(_First1, _First2, _Num1 < _Num2 ? _Num1 : _Num2);
 return (_Ans < 0 || _Ans == 0 && _Num1 < _Num2);
 }
# 3426 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/xutility" 3
template<class _InIt1,
 class _InIt2> inline
 bool lexicographical_compare(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2)
 {
 ;
 ;
 return (_Lexicographical_compare(_Unchecked(_First1), _Unchecked(_Last1),
  _Unchecked(_First2), _Unchecked(_Last2)));
 }


template<class _InIt1,
 class _InIt2,
 class _Pr> inline
 bool _Lexicographical_compare(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2, _Pr _Pred)
 {
 for (; _First1 != _Last1 && _First2 != _Last2; ++_First1, ++_First2)
  if (_Pred(*_First1, *_First2))
   return (true);
  else if (_Pred(*_First2, *_First1))
   return (false);
 return (_First1 == _Last1 && _First2 != _Last2);
 }

template<class _InIt1,
 class _InIt2,
 class _Pr> inline
 bool lexicographical_compare(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2, _Pr _Pred)
 {
 ;
 ;
 ;
 return (_Lexicographical_compare(_Unchecked(_First1), _Unchecked(_Last1),
  _Unchecked(_First2), _Unchecked(_Last2), _Pred));
 }


template<class _BidIt> inline
 void _Reverse(_BidIt _First, _BidIt _Last, bidirectional_iterator_tag)
 {
 for (; _First != _Last && _First != --_Last; ++_First)
  ::std:: iter_swap(_First, _Last);
 }

template<class _BidIt> inline
 void reverse(_BidIt _First, _BidIt _Last)
 {
 ;
 _Reverse(_Unchecked(_First), _Unchecked(_Last), _Iter_cat(_First));
 }


template<class _FwdIt> inline
 void _Rotate(_FwdIt _First, _FwdIt _Mid, _FwdIt _Last,
  forward_iterator_tag)
 {
 for (_FwdIt _Next = _Mid; ; )
  {
  ::std:: iter_swap(_First, _Next);
  if (++_First == _Mid)
   if (++_Next == _Last)
    break;
   else
    _Mid = _Next;
  else if (++_Next == _Last)
   _Next = _Mid;
  }
 }

template<class _BidIt> inline
 void _Rotate(_BidIt _First, _BidIt _Mid, _BidIt _Last,
  bidirectional_iterator_tag)
 {
 ::std:: reverse(_First, _Mid);
 ::std:: reverse(_Mid, _Last);
 ::std:: reverse(_First, _Last);
 }

template<class _RanIt,
 class _Diff,
 class _Ty> inline
 void _Rotate(_RanIt _First, _RanIt _Mid, _RanIt _Last, _Diff *, _Ty *)
 {
 _Diff _Shift = _Mid - _First;
 _Diff _Count = _Last - _First;

 for (_Diff _Factor = _Shift; _Factor != 0; )
  {
  _Diff _Tmp = _Count % _Factor;
  _Count = _Factor;
  _Factor = _Tmp;
  }

 if (_Count < _Last - _First)
  for (; 0 < _Count; --_Count)
   {
   _RanIt _Hole = _First + _Count;
   _RanIt _Next = _Hole;
   _RanIt _Next1 = _Next + _Shift == _Last ? _First : _Next + _Shift;
   for (; ; )
    {
    iter_swap(_Next, _Next1);
    _Next = _Next1;
    _Next1 = _Shift < _Last - _Next1 ? _Next1 + _Shift
     : _First + (_Shift - (_Last - _Next1));
    if (_Next1 == _Hole)
     break;
    }
   }
 }

template<class _RanIt> inline
 void _Rotate(_RanIt _First, _RanIt _Mid, _RanIt _Last,
  random_access_iterator_tag)
 {
 _Rotate(_First, _Mid, _Last, _Dist_type(_First), _Val_type(_First));
 }

template<class _FwdIt> inline
 _FwdIt rotate(_FwdIt _First, _FwdIt _Mid, _FwdIt _Last)
 {
 ;
 ;
 if (_First != _Mid && _Mid != _Last)
  {
  _Rotate(_Unchecked(_First), _Unchecked(_Mid), _Unchecked(_Last),
   _Iter_cat(_First));
  ::std:: advance(_First, ::std:: distance(_Mid, _Last));
  }
 return (_First);
 }


template<class _Elem>
 class _Yarn
 {
public:
 typedef _Yarn<_Elem> _Myt;

 _Yarn()
  : _Myptr(0), _Nul(0)
  {
  }

 _Yarn(const _Myt& _Right)
  : _Myptr(0), _Nul(0)
  {
  *this = _Right;
  }

 _Yarn(const _Elem *_Right)
  : _Myptr(0), _Nul(0)
  {
  *this = _Right;
  }

 _Myt& operator=(const _Myt& _Right)
  {
  return (*this = _Right._Myptr);
  }

 _Myt& operator=(const _Elem *_Right)
  {
  if (_Myptr != _Right)
   {
   _Tidy();

   if (_Right != 0)
    {
    const _Elem *_Ptr = _Right;
    while (*_Ptr != (_Elem)0)
     ++_Ptr;
    size_t _Count = ((const char *)++_Ptr - (const char *)_Right)
     * sizeof (_Elem);

    _Myptr = (_Elem *):: malloc(_Count);
    if (_Myptr != 0)
     :: memcpy(_Myptr, _Right, _Count);
    }
   }
  return (*this);
  }

 ~_Yarn()
  {
  _Tidy();
  }

 bool empty() const
  {
  return (_Myptr == 0);
  }

 const _Elem *c_str() const
  {
  return (_Myptr != 0 ? _Myptr : &_Nul);
  }

private:
 void _Tidy()
  {
  if (_Myptr != 0)
   :: free(_Myptr);

  _Myptr = 0;
  }

 _Elem *_Myptr;
 _Elem _Nul;
 };

void _Xinvalid_argument(const char *) __attribute__((__noreturn__));
void _Xlength_error(const char *) __attribute__((__noreturn__));
void _Xout_of_range(const char *) __attribute__((__noreturn__));
void _Xoverflow_error(const char *) __attribute__((__noreturn__));
void _Xruntime_error(const char *) __attribute__((__noreturn__));
}
# 7 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/xmemory" 2 3
# 16 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/xmemory" 3
namespace std {

template<class _Ty> inline
 _Ty *_Allocate(size_t _Count, _Ty *)
 {
 void *_Ptr = 0;

 if (_Count <= 0)
  _Count = 0;
 else if (((size_t)(-1) / sizeof (_Ty) < _Count)
  || (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)
  throw ::std:: bad_alloc(0);

 return ((_Ty *)_Ptr);
 }
# 44 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/xmemory" 3
template<class _T1,
 class _T2> inline
 void _Construct(_T1 *_Ptr, const _T2& _Val)
 {
 void *_Vptr = _Ptr;
 ::new (_Vptr) _T1(_Val);
 }


template<class _Ty1,
 class _Ty2> inline
 void _Construct(const _Ty1 *const *_Ptr, const _Ty2 *_Val)
 {
 *(_Ty1 **)_Ptr = (_Ty1 *)_Val;
 }




template<class _Ty1> inline
 void _Construct(_Ty1 *_Ptr)
 {
 void *_Vptr = _Ptr;

 ::new (_Vptr) _Ty1();
 }


template<class _Ty> inline
 void _Destroy(_Ty *_Ptr)
 {
 _Ptr->~_Ty();
 }

template<> inline
 void _Destroy(char *)
 {
 }

template<> inline
 void _Destroy(wchar_t *)
 {
 }


template<class _Alloc> inline
 void _Destroy_range(typename _Alloc::pointer _First,
  typename _Alloc::pointer _Last, _Alloc& _Al)
 {
 _Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));
 }

template<class _Alloc> inline
 void _Destroy_range(typename _Alloc::pointer _First,
  typename _Alloc::pointer _Last, _Alloc& _Al,
  _Nonscalar_ptr_iterator_tag)
 {
 for (; _First != _Last; ++_First)
  _Dest_val(_Al, _First);
 }

template<class _Alloc> inline
 void _Destroy_range(typename _Alloc::pointer _First,
  typename _Alloc::pointer _Last, _Alloc& _Al,
  _Scalar_ptr_iterator_tag)
 {
 }



template<class _Ty> inline
 _Ty *addressof(_Ty& _Val)
 {
 return ((_Ty *)&(char&)_Val);
 }



template<class _Ty>
 struct _Allocator_base
 {
 typedef _Ty value_type;
 };


template<class _Ty>
 struct _Allocator_base<const _Ty>
 {
 typedef _Ty value_type;
 };


template<class _Ty>
 class allocator
  : public _Allocator_base<_Ty>
 {
public:
 typedef _Allocator_base<_Ty> _Mybase;
 typedef typename _Mybase::value_type value_type;

 typedef value_type *pointer;
 typedef value_type & reference;
 typedef const value_type *const_pointer;
 typedef const value_type & const_reference;

 typedef size_t size_type;
 typedef ptrdiff_t difference_type;

 template<class _Other>
  struct rebind
  {
  typedef allocator<_Other> other;
  };

 pointer address(reference _Val) const
  {
  return ((pointer)&(char&)_Val);
  }

 const_pointer address(const_reference _Val) const
  {
  return ((const_pointer)&(char&)_Val);
  }

 allocator() throw ()
  {
  }

 allocator(const allocator<_Ty>&) throw ()
  {
  }

 template<class _Other>
  allocator(const allocator<_Other>&) throw ()
  {
  }

 template<class _Other>
  allocator<_Ty>& operator=(const allocator<_Other>&)
  {
  return (*this);
  }

 void deallocate(pointer _Ptr, size_type)
  {
  ::operator delete(_Ptr);
  }

 pointer allocate(size_type _Count)
  {
  return (_Allocate(_Count, (pointer)0));
  }

 pointer allocate(size_type _Count, const void *)
  {
  return (allocate(_Count));
  }

 void construct(pointer _Ptr, const _Ty& _Val)
  {
  _Construct(_Ptr, _Val);
  }
# 220 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/xmemory" 3
 void destroy(pointer _Ptr)
  {
  _Destroy(_Ptr);
  }

 size_t max_size() const throw ()
  {
  size_t _Count = (size_t)(-1) / sizeof (_Ty);
  return (0 < _Count ? _Count : 1);
  }
 };


template<> class allocator<void>
 {
public:
 typedef void _Ty;
 typedef _Ty *pointer;
 typedef const _Ty *const_pointer;
 typedef _Ty value_type;

 template<class _Other>
  struct rebind
  {
  typedef allocator<_Other> other;
  };

 allocator() throw ()
  {
  }

 allocator(const allocator<_Ty>&) throw ()
  {
  }

 template<class _Other>
  allocator(const allocator<_Other>&) throw ()
  {
  }

 template<class _Other>
  allocator<_Ty>& operator=(const allocator<_Other>&)
  {
  return (*this);
  }
 };

template<class _Ty,
 class _Other> inline
 bool operator==(const allocator<_Ty>&,
  const allocator<_Other>&) throw ()
 {
 return (true);
 }

template<class _Ty,
 class _Other> inline
 bool operator!=(const allocator<_Ty>& _Left,
  const allocator<_Other>& _Right) throw ()
 {
 return (!(_Left == _Right));
 }
# 295 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/xmemory" 3
template<class _Alloc,
 class _Ty1,
 class _Ty2>
 void _Cons_val(_Alloc& _Alval, _Ty1 *_Pdest, const _Ty2& _Src)
 {
 _Alval.construct(_Pdest, _Src );
 }


template<class _Alloc,
 class _Ty1>
 void _Dest_val(_Alloc& _Alval, _Ty1 *_Pdest)
 {
 _Alval.destroy(_Pdest);
 }
}
# 5 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/xstring" 2 3

namespace std {
template<class _Elem,
 class _Traits = char_traits<_Elem>,
 class _Ax = allocator<_Elem> >
 class basic_string;
# 23 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/xstring" 3
template<class _Elem,
 class _Traits,
 class _Alloc>
 class _String_const_iterator
  : public _Iterator012<random_access_iterator_tag,
   typename _Alloc::value_type,
   typename _Alloc::difference_type,
   typename _Alloc::const_pointer,
   typename _Alloc::const_reference,
   _Iterator_base>
 {
public:
 typedef _String_const_iterator<_Elem, _Traits, _Alloc> _Myiter;
 typedef basic_string<_Elem, _Traits, _Alloc> _Mystr;
 typedef random_access_iterator_tag iterator_category;

 typedef typename _Alloc::value_type value_type;
 typedef typename _Alloc::difference_type difference_type;
 typedef typename _Alloc::const_pointer pointer;
 typedef typename _Alloc::const_reference reference;

 _String_const_iterator()
  {
  this->_Ptr = 0;
  }

 _String_const_iterator(pointer _Parg, const _Container_base *_Pstring)
  {
  this->_Adopt(_Pstring);
  this->_Ptr = _Parg;
  }

 typedef pointer _Unchecked_type;

 _Myiter& _Rechecked(_Unchecked_type _Right)
  {
  this->_Ptr = _Right;
  return (*this);
  }

 _Unchecked_type _Unchecked() const
  {
  return (_Unchecked_type(this->_Ptr));
  }

 reference operator*() const
  {
# 89 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/xstring" 3
  return (*this->_Ptr);
  }

 pointer operator->() const
  {
  return (&**this);
  }

 _Myiter& operator++()
  {
# 116 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/xstring" 3
  ++this->_Ptr;
  return (*this);
  }

 _Myiter operator++(int)
  {
  _Myiter _Tmp = *this;
  ++*this;
  return (_Tmp);
  }

 _Myiter& operator--()
  {
# 144 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/xstring" 3
  --this->_Ptr;
  return (*this);
  }

 _Myiter operator--(int)
  {
  _Myiter _Tmp = *this;
  --*this;
  return (_Tmp);
  }

 _Myiter& operator+=(difference_type _Off)
  {
# 176 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/xstring" 3
  _Ptr += _Off;
  return (*this);
  }

 _Myiter operator+(difference_type _Off) const
  {
  _Myiter _Tmp = *this;
  return (_Tmp += _Off);
  }

 _Myiter& operator-=(difference_type _Off)
  {
  return (*this += -_Off);
  }

 _Myiter operator-(difference_type _Off) const
  {
  _Myiter _Tmp = *this;
  return (_Tmp -= _Off);
  }

 difference_type operator-(const _Myiter& _Right) const
  {
  _Compat(_Right);
  return (this->_Ptr - _Right._Ptr);
  }

 reference operator[](difference_type _Off) const
  {
  return (*(*this + _Off));
  }

 bool operator==(const _Myiter& _Right) const
  {
  _Compat(_Right);
  return (this->_Ptr == _Right._Ptr);
  }

 bool operator!=(const _Myiter& _Right) const
  {
  return (!(*this == _Right));
  }

 bool operator<(const _Myiter& _Right) const
  {
  _Compat(_Right);
  return (this->_Ptr < _Right._Ptr);
  }

 bool operator>(const _Myiter& _Right) const
  {
  return (_Right < *this);
  }

 bool operator<=(const _Myiter& _Right) const
  {
  return (!(_Right < *this));
  }

 bool operator>=(const _Myiter& _Right) const
  {
  return (!(*this < _Right));
  }
# 259 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/xstring" 3
 void _Compat(const _Myiter&) const
  {
  }


 pointer _Ptr;
 };

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 typename _String_const_iterator<_Elem, _Traits, _Alloc>::_Unchecked_type
  _Unchecked(_String_const_iterator<_Elem, _Traits, _Alloc> _Iter)
 {
 return (_Iter._Unchecked());
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 _String_const_iterator<_Elem, _Traits, _Alloc>
  _Rechecked(_String_const_iterator<_Elem, _Traits, _Alloc>& _Iter,
   typename _String_const_iterator<_Elem, _Traits, _Alloc>
    ::_Unchecked_type _Right)
 {
 return (_Iter._Rechecked(_Right));
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 _String_const_iterator<_Elem, _Traits, _Alloc> operator+(
  typename _String_const_iterator<_Elem, _Traits, _Alloc>
   ::difference_type _Off,
  _String_const_iterator<_Elem, _Traits, _Alloc> _Next)
 {
 return (_Next += _Off);
 }


template<class _Elem,
 class _Traits,
 class _Alloc>
 class _String_iterator
  : public _String_const_iterator<_Elem, _Traits, _Alloc>
 {
public:
 typedef _String_iterator<_Elem, _Traits, _Alloc> _Myiter;
 typedef _String_const_iterator<_Elem, _Traits, _Alloc> _Mybase;
 typedef basic_string<_Elem, _Traits, _Alloc> _Mystr;
 typedef random_access_iterator_tag iterator_category;

 typedef typename _Mystr::value_type value_type;
 typedef typename _Mystr::difference_type difference_type;
 typedef typename _Mystr::pointer pointer;
 typedef typename _Mystr::reference reference;

 _String_iterator()
  {
  }

 _String_iterator(pointer _Parg, const _Container_base *_Pstring)
  : _Mybase(_Parg, _Pstring)
  {
  }

 typedef pointer _Unchecked_type;

 _Myiter& _Rechecked(_Unchecked_type _Right)
  {
  this->_Ptr = _Right;
  return (*this);
  }

 _Unchecked_type _Unchecked() const
  {
  return (_Unchecked_type(this->_Ptr));
  }

 reference operator*() const
  {
  return ((reference)**(_Mybase *)this);
  }

 pointer operator->() const
  {
  return (&**this);
  }

 _Myiter& operator++()
  {
  ++*(_Mybase *)this;
  return (*this);
  }

 _Myiter operator++(int)
  {
  _Myiter _Tmp = *this;
  ++*this;
  return (_Tmp);
  }

 _Myiter& operator--()
  {
  --*(_Mybase *)this;
  return (*this);
  }

 _Myiter operator--(int)
  {
  _Myiter _Tmp = *this;
  --*this;
  return (_Tmp);
  }

 _Myiter& operator+=(difference_type _Off)
  {
  *(_Mybase *)this += _Off;
  return (*this);
  }

 _Myiter operator+(difference_type _Off) const
  {
  _Myiter _Tmp = *this;
  return (_Tmp += _Off);
  }

 _Myiter& operator-=(difference_type _Off)
  {
  return (*this += -_Off);
  }

 _Myiter operator-(difference_type _Off) const
  {
  _Myiter _Tmp = *this;
  return (_Tmp -= _Off);
  }

 difference_type operator-(const _Mybase& _Right) const
  {
  return ((_Mybase)*this - _Right);
  }

 reference operator[](difference_type _Off) const
  {
  return (*(*this + _Off));
  }
 };

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 typename _String_iterator<_Elem, _Traits, _Alloc>::_Unchecked_type
  _Unchecked(_String_iterator<_Elem, _Traits, _Alloc> _Iter)
 {
 return (_Iter._Unchecked());
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 _String_iterator<_Elem, _Traits, _Alloc>
  _Rechecked(_String_iterator<_Elem, _Traits, _Alloc>& _Iter,
   typename _String_iterator<_Elem, _Traits, _Alloc>
    ::_Unchecked_type _Right)
 {
 return (_Iter._Rechecked(_Right));
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 _String_iterator<_Elem, _Traits, _Alloc> operator+(
  typename _String_iterator<_Elem, _Traits, _Alloc>
   ::difference_type _Off,
  _String_iterator<_Elem, _Traits, _Alloc> _Next)
 {
 return (_Next += _Off);
 }



template<class _Elem,
 class _Alloc>
 class _String_val
  : public _Container_base
 {
public:

 typedef typename _Alloc::template rebind<_Elem>::other _Alty;

 _String_val(_Alty _Al = _Alty())
  : _Alval(_Al)
  {
  }

 ~_String_val()
  {
  }
# 483 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/xstring" 3
 typedef typename _Alty::size_type size_type;
 typedef typename _Alty::difference_type difference_type;
 typedef typename _Alty::pointer pointer;
 typedef typename _Alty::const_pointer const_pointer;
 typedef typename _Alty::reference reference;
 typedef typename _Alty::const_reference const_reference;
 typedef typename _Alty::value_type value_type;

 enum
  {
  _BUF_SIZE = 16 / sizeof (_Elem) < 1 ? 1
   : 16 / sizeof (_Elem)};
 enum
  {
  _ALLOC_MASK = sizeof (_Elem) <= 1 ? 15
   : sizeof (_Elem) <= 2 ? 7
   : sizeof (_Elem) <= 4 ? 3
   : sizeof (_Elem) <= 8 ? 1 : 0};

 union _Bxty
  {
  _Elem _Buf[_BUF_SIZE];
  _Elem *_Ptr;
  char _Alias[_BUF_SIZE];
  } _Bx;

 size_type _Mysize;
 size_type _Myres;
 _Alty _Alval;
 };


template<class _Elem,
 class _Traits,
 class _Ax>
 class basic_string
  : public _String_val<_Elem, _Ax>
 {
public:
 typedef basic_string<_Elem, _Traits, _Ax> _Myt;
 typedef _String_val<_Elem, _Ax> _Mybase;
 typedef typename _Mybase::_Alty _Alloc;
 typedef typename _Alloc::size_type size_type;
 typedef typename _Alloc::difference_type difference_type;
 typedef typename _Alloc::pointer pointer;
 typedef typename _Alloc::const_pointer const_pointer;
 typedef typename _Alloc::reference reference;
 typedef typename _Alloc::const_reference const_reference;
 typedef typename _Alloc::value_type value_type;
# 545 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/xstring" 3
 typedef _String_iterator<_Elem, _Traits, _Alloc> iterator;
 typedef _String_const_iterator<_Elem, _Traits, _Alloc> const_iterator;

 typedef ::std:: reverse_iterator<iterator> reverse_iterator;
 typedef ::std:: reverse_iterator<const_iterator> const_reverse_iterator;


 basic_string(const _Myt& _Right)
  : _Mybase(_Right._Alval)
  {
  _Tidy();
  assign(_Right, 0, npos);
  }

 basic_string()
  : _Mybase()
  {
  _Tidy();
  }

 explicit basic_string(const _Alloc& _Al)
  : _Mybase(_Al)
  {
  _Tidy();
  }

 basic_string(const _Myt& _Right, size_type _Roff,
  size_type _Count = npos)
  : _Mybase(_Right._Alval)
  {
  _Tidy();
  assign(_Right, _Roff, _Count);
  }

 basic_string(const _Myt& _Right, size_type _Roff, size_type _Count,
  const _Alloc& _Al)
  : _Mybase(_Al)
  {
  _Tidy();
  assign(_Right, _Roff, _Count);
  }

 basic_string(const _Elem *_Ptr, size_type _Count)
  : _Mybase()
  {
  _Tidy();
  assign(_Ptr, _Count);
  }

 basic_string(const _Elem *_Ptr, size_type _Count, const _Alloc& _Al)
  : _Mybase(_Al)
  {
  _Tidy();
  assign(_Ptr, _Count);
  }

 basic_string(const _Elem *_Ptr)
  : _Mybase()
  {
  _Tidy();
  assign(_Ptr);
  }

 basic_string(const _Elem *_Ptr, const _Alloc& _Al)
  : _Mybase(_Al)
  {
  _Tidy();
  assign(_Ptr);
  }

 basic_string(size_type _Count, _Elem _Ch)
  : _Mybase()
  {
  _Tidy();
  assign(_Count, _Ch);
  }

 basic_string(size_type _Count, _Elem _Ch, const _Alloc& _Al)
  : _Mybase(_Al)
  {
  _Tidy();
  assign(_Count, _Ch);
  }

 template<class _It>
  basic_string(_It _First, _It _Last)
  : _Mybase()
  {
  _Tidy();
  _Construct(_First, _Last, _Iter_cat(_First));
  }

 template<class _It>
  basic_string(_It _First, _It _Last, const _Alloc& _Al)
  : _Mybase(_Al)
  {
  _Tidy();
  _Construct(_First, _Last, _Iter_cat(_First));
  }

 template<class _It>
  void _Construct(_It _Count,
   _It _Ch, _Int_iterator_tag)
  {
  assign((size_type)_Count, (_Elem)_Ch);
  }

 template<class _It>
  void _Construct(_It _First,
   _It _Last, input_iterator_tag)
  {
  try {
  for (; _First != _Last; ++_First)
   append((size_type)1, (_Elem)*_First);
  } catch (...) {
  _Tidy(true);
  throw;
  }
  }

 template<class _It>
  void _Construct(_It _First,
   _It _Last, forward_iterator_tag)
  {
  ;
  size_type _Count = 0;
  _Distance(_First, _Last, _Count);
  reserve(_Count);

  try {
  for (; _First != _Last; ++_First)
   append((size_type)1, (_Elem)*_First);
  } catch (...) {
  _Tidy(true);
  throw;
  }
  }




 basic_string(const_pointer _First, const_pointer _Last)
  : _Mybase()
  {
  ;
  _Tidy();
  if (_First != _Last)
   assign(&*_First, _Last - _First);
  }

 basic_string(const_pointer _First, const_pointer _Last,
  const _Alloc& _Al)
  : _Mybase(_Al)
  {
  ;
  _Tidy();
  if (_First != _Last)
   assign(&*_First, _Last - _First);
  }


 basic_string(const_iterator _First, const_iterator _Last)
  : _Mybase()
  {
  ;
  _Tidy();
  if (_First != _Last)
   assign(&*_First, _Last - _First);
  }
# 770 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/xstring" 3
 basic_string(::std:: initializer_list<_Elem> _Ilist,
  const _Alloc& _Al = allocator_type())
  : _Mybase(_Al)
  {
  _Tidy();
  assign(_Ilist.begin(), _Ilist.end());
  }

 _Myt& operator=(::std:: initializer_list<_Elem> _Ilist)
  {
  return (assign(_Ilist.begin(), _Ilist.end()));
  }

 _Myt& operator+=(::std:: initializer_list<_Elem> _Ilist)
  {
  return (append(_Ilist.begin(), _Ilist.end()));
  }

 _Myt& assign(::std:: initializer_list<_Elem> _Ilist)
  {
  return (assign(_Ilist.begin(), _Ilist.end()));
  }

 _Myt& append(::std:: initializer_list<_Elem> _Ilist)
  {
  return (append(_Ilist.begin(), _Ilist.end()));
  }

 void insert(const_iterator _Where,
  ::std:: initializer_list<_Elem> _Ilist)
  {
  insert(_Where, _Ilist.begin(), _Ilist.end());
  }

 _Myt& replace(const_iterator _First, const_iterator _Last,
  ::std:: initializer_list<_Elem> _Ilist)
  {
  return (replace(_First, _Last, _Ilist.begin(), _Ilist.end()));
  }


 ~basic_string()
  {
  _Tidy(true);
  }

 typedef _Traits traits_type;
 typedef _Alloc allocator_type;

 static const size_type npos = (size_t)(-1);

 _Myt& operator=(const _Myt& _Right)
  {
  return (assign(_Right));
  }

 _Myt& operator=(const _Elem *_Ptr)
  {
  return (assign(_Ptr));
  }

 _Myt& operator=(_Elem _Ch)
  {
  return (assign(1, _Ch));
  }

 _Myt& operator+=(const _Myt& _Right)
  {
  return (append(_Right));
  }

 _Myt& operator+=(const _Elem *_Ptr)
  {
  return (append(_Ptr));
  }

 _Myt& operator+=(_Elem _Ch)
  {
  return (append((size_type)1, _Ch));
  }

 _Myt& append(const _Myt& _Right)
  {
  return (append(_Right, 0, npos));
  }

 _Myt& append(const _Myt& _Right,
  size_type _Roff, size_type _Count)
  {
  if (_Right.size() < _Roff)
   _Xran();
  size_type _Num = _Right.size() - _Roff;
  if (_Num < _Count)
   _Count = _Num;
  if (npos - this->_Mysize <= _Count)
   _Xlen();

  if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
   {
   _Traits::copy(_Myptr() + this->_Mysize,
    _Right._Myptr() + _Roff, _Count);
   _Eos(_Num);
   }
  return (*this);
  }

 _Myt& append(const _Elem *_Ptr, size_type _Count)
  {





  if (_Inside(_Ptr))
   return (append(*this, _Ptr - _Myptr(), _Count));
  if (npos - this->_Mysize <= _Count)
   _Xlen();

  size_type _Num;
  if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
   {
   _Traits::copy(_Myptr() + this->_Mysize, _Ptr, _Count);
   _Eos(_Num);
   }
  return (*this);
  }

 _Myt& append(const _Elem *_Ptr)
  {
  ;
  return (append(_Ptr, _Traits::length(_Ptr)));
  }

 _Myt& append(size_type _Count, _Elem _Ch)
  {
  if (npos - this->_Mysize <= _Count)
   _Xlen();

  size_type _Num;
  if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
   {
   _Chassign(this->_Mysize, _Count, _Ch);
   _Eos(_Num);
   }
  return (*this);
  }

 template<class _It>
  _Myt& append(_It _First, _It _Last)
  {
  return (_Append(_First, _Last, _Iter_cat(_First)));
  }

 template<class _It>
  _Myt& _Append(_It _Count, _It _Ch, _Int_iterator_tag)
  {
  return (append((size_type)_Count, (_Elem)_Ch));
  }

 template<class _It>
  _Myt& _Append(_It _First, _It _Last, input_iterator_tag)
  {
  return (replace(end(), end(), _First, _Last));
  }




 _Myt& append(const_pointer _First, const_pointer _Last)
  {
  return (replace(end(), end(), _First, _Last));
  }


 _Myt& append(const_iterator _First, const_iterator _Last)
  {
  return (replace(end(), end(), _First, _Last));
  }

 _Myt& assign(const _Myt& _Right)
  {
  return (assign(_Right, 0, npos));
  }

 _Myt& assign(const _Myt& _Right,
  size_type _Roff, size_type _Count)
  {
  if (_Right.size() < _Roff)
   _Xran();
  size_type _Num = _Right.size() - _Roff;
  if (_Count < _Num)
   _Num = _Count;

  if (this == &_Right)
   erase((size_type)(_Roff + _Num)), erase(0, _Roff);
  else if (_Grow(_Num))
   {
   _Traits::copy(_Myptr(), _Right._Myptr() + _Roff, _Num);
   _Eos(_Num);
   }
  return (*this);
  }

 _Myt& assign(const _Elem *_Ptr, size_type _Count)
  {





  if (_Inside(_Ptr))
   return (assign(*this, _Ptr - _Myptr(), _Count));

  if (_Grow(_Count))
   {
   _Traits::copy(_Myptr(), _Ptr, _Count);
   _Eos(_Count);
   }
  return (*this);
  }

 _Myt& assign(const _Elem *_Ptr)
  {
  ;
  return (assign(_Ptr, _Traits::length(_Ptr)));
  }

 _Myt& assign(size_type _Count, _Elem _Ch)
  {
  if (_Count == npos)
   _Xlen();

  if (_Grow(_Count))
   {
   _Chassign(0, _Count, _Ch);
   _Eos(_Count);
   }
  return (*this);
  }

 template<class _It>
  _Myt& assign(_It _First, _It _Last)
  {
  return (_Assign(_First, _Last, _Iter_cat(_First)));
  }

 template<class _It>
  _Myt& _Assign(_It _Count, _It _Ch, _Int_iterator_tag)
  {
  return (assign((size_type)_Count, (_Elem)_Ch));
  }

 template<class _It>
  _Myt& _Assign(_It _First, _It _Last, input_iterator_tag)
  {
  return (replace(begin(), end(), _First, _Last));
  }




 _Myt& assign(const_pointer _First, const_pointer _Last)
  {
  return (replace(begin(), end(), _First, _Last));
  }


 _Myt& assign(const_iterator _First, const_iterator _Last)
  {
  return (replace(begin(), end(), _First, _Last));
  }

 _Myt& insert(size_type _Off, const _Myt& _Right)
  {
  return (insert(_Off, _Right, 0, npos));
  }

 _Myt& insert(size_type _Off,
  const _Myt& _Right, size_type _Roff, size_type _Count)
  {
  if (this->_Mysize < _Off || _Right.size() < _Roff)
   _Xran();
  size_type _Num = _Right.size() - _Roff;
  if (_Num < _Count)
   _Count = _Num;
  if (npos - this->_Mysize <= _Count)
   _Xlen();

  if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
   {
   _Traits::move(_Myptr() + _Off + _Count,
    _Myptr() + _Off, this->_Mysize - _Off);
   if (this == &_Right)
    _Traits::move(_Myptr() + _Off,
     _Myptr() + (_Off < _Roff ? _Roff + _Count : _Roff),
      _Count);
   else
    _Traits::copy(_Myptr() + _Off,
     _Right._Myptr() + _Roff, _Count);
   _Eos(_Num);
   }
  return (*this);
  }

 _Myt& insert(size_type _Off,
  const _Elem *_Ptr, size_type _Count)
  {





  if (_Inside(_Ptr))
   return (insert(_Off, *this,
    _Ptr - _Myptr(), _Count));
  if (this->_Mysize < _Off)
   _Xran();
  if (npos - this->_Mysize <= _Count)
   _Xlen();
  size_type _Num;
  if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
   {
   _Traits::move(_Myptr() + _Off + _Count,
    _Myptr() + _Off, this->_Mysize - _Off);
   _Traits::copy(_Myptr() + _Off, _Ptr, _Count);
   _Eos(_Num);
   }
  return (*this);
  }

 _Myt& insert(size_type _Off, const _Elem *_Ptr)
  {
  ;
  return (insert(_Off, _Ptr, _Traits::length(_Ptr)));
  }

 _Myt& insert(size_type _Off,
  size_type _Count, _Elem _Ch)
  {
  if (this->_Mysize < _Off)
   _Xran();
  if (npos - this->_Mysize <= _Count)
   _Xlen();
  size_type _Num;
  if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
   {
   _Traits::move(_Myptr() + _Off + _Count,
    _Myptr() + _Off, this->_Mysize - _Off);
   _Chassign(_Off, _Count, _Ch);
   _Eos(_Num);
   }
  return (*this);
  }

 iterator insert(const_iterator _Where)
  {
  return (insert(_Where, _Elem()));
  }

 iterator insert(const_iterator _Where, _Elem _Ch)
  {
  size_type _Off = _Pdif(_Where, begin());
  insert(_Off, 1, _Ch);
  return (begin() + _Off);
  }

 void insert(const_iterator _Where, size_type _Count, _Elem _Ch)
  {
  size_type _Off = _Pdif(_Where, begin());
  insert(_Off, _Count, _Ch);
  }

 template<class _It>
  void insert(const_iterator _Where, _It _First, _It _Last)
  {
  _Insert(_Where, _First, _Last, _Iter_cat(_First));
  }

 template<class _It>
  void _Insert(const_iterator _Where, _It _Count, _It _Ch,
   _Int_iterator_tag)
  {
  insert(_Where, (size_type)_Count, (_Elem)_Ch);
  }

 template<class _It>
  void _Insert(const_iterator _Where, _It _First, _It _Last,
   input_iterator_tag)
  {
  replace(_Where, _Where, _First, _Last);
  }




 void insert(const_iterator _Where,
  const_pointer _First, const_pointer _Last)
  {
  replace(_Where, _Where, _First, _Last);
  }


 void insert(const_iterator _Where,
  const_iterator _First, const_iterator _Last)
  {
  replace(_Where, _Where, _First, _Last);
  }

 _Myt& erase(size_type _Off = 0,
  size_type _Count = npos)
  {
  if (this->_Mysize < _Off)
   _Xran();
  if (this->_Mysize - _Off < _Count)
   _Count = this->_Mysize - _Off;
  if (0 < _Count)
   {
   _Traits::move(_Myptr() + _Off, _Myptr() + _Off + _Count,
    this->_Mysize - _Off - _Count);
   size_type _Newsize = this->_Mysize - _Count;
   _Eos(_Newsize);
   }
  return (*this);
  }

 iterator erase(const_iterator _Where)
  {
  size_type _Count = _Pdif(_Where, begin());
  erase(_Count, 1);
  return (iterator(_Myptr() + _Count, this));
  }

 iterator erase(const_iterator _First, const_iterator _Last)
  {
  size_type _Count = _Pdif(_First, begin());
  erase(_Count, _Pdif(_Last, _First));
  return (iterator(_Myptr() + _Count, this));
  }

 void clear()
  {
  _Eos(0);
  }

 _Myt& replace(size_type _Off, size_type _N0, const _Myt& _Right)
  {
  return (replace(_Off, _N0, _Right, 0, npos));
  }

 _Myt& replace(size_type _Off,
  size_type _N0, const _Myt& _Right, size_type _Roff, size_type _Count)
  {
  if (this->_Mysize < _Off || _Right.size() < _Roff)
   _Xran();
  if (this->_Mysize - _Off < _N0)
   _N0 = this->_Mysize - _Off;
  size_type _Num = _Right.size() - _Roff;
  if (_Num < _Count)
   _Count = _Num;
  if (npos - _Count <= this->_Mysize - _N0)
   _Xlen();

  size_type _Nm = this->_Mysize - _N0 - _Off;
  size_type _Newsize = this->_Mysize + _Count - _N0;
  if (this->_Mysize < _Newsize)
   _Grow(_Newsize);

  if (this != &_Right)
   {
   _Traits::move(_Myptr() + _Off + _Count,
    _Myptr() + _Off + _N0, _Nm);
   _Traits::copy(_Myptr() + _Off,
    _Right._Myptr() + _Roff, _Count);
   }
  else if (_Count <= _N0)
   {
   _Traits::move(_Myptr() + _Off,
    _Myptr() + _Roff, _Count);
   _Traits::move(_Myptr() + _Off + _Count,
    _Myptr() + _Off + _N0, _Nm);
   }
  else if (_Roff <= _Off)
   {
   _Traits::move(_Myptr() + _Off + _Count,
    _Myptr() + _Off + _N0, _Nm);
   _Traits::move(_Myptr() + _Off,
    _Myptr() + _Roff, _Count);
   }
  else if (_Off + _N0 <= _Roff)
   {
   _Traits::move(_Myptr() + _Off + _Count,
    _Myptr() + _Off + _N0, _Nm);
   _Traits::move(_Myptr() + _Off,
    _Myptr() + (_Roff + _Count - _N0), _Count);
   }
  else
   {
   _Traits::move(_Myptr() + _Off,
    _Myptr() + _Roff, _N0);
   _Traits::move(_Myptr() + _Off + _Count,
    _Myptr() + _Off + _N0, _Nm);
   _Traits::move(_Myptr() + _Off + _N0, _Myptr() + _Roff + _Count,
    _Count - _N0);
   }

  _Eos(_Newsize);
  return (*this);
  }

 _Myt& replace(size_type _Off,
  size_type _N0, const _Elem *_Ptr, size_type _Count)
  {





  if (_Inside(_Ptr))
   return (replace(_Off, _N0, *this,
    _Ptr - _Myptr(), _Count));
  if (this->_Mysize < _Off)
   _Xran();
  if (this->_Mysize - _Off < _N0)
   _N0 = this->_Mysize - _Off;
  if (npos - _Count <= this->_Mysize - _N0)
   _Xlen();
  size_type _Nm = this->_Mysize - _N0 - _Off;

  if (_Count < _N0)
   _Traits::move(_Myptr() + _Off + _Count,
    _Myptr() + _Off + _N0, _Nm);
  size_type _Num;
  if ((0 < _Count || 0 < _N0)
   && _Grow(_Num = this->_Mysize + _Count - _N0))
   {
   if (_N0 < _Count)
    _Traits::move(_Myptr() + _Off + _Count,
     _Myptr() + _Off + _N0, _Nm);
   _Traits::copy(_Myptr() + _Off, _Ptr, _Count);
   _Eos(_Num);
   }
  return (*this);
  }

 _Myt& replace(size_type _Off, size_type _N0, const _Elem *_Ptr)
  {
  ;
  return (replace(_Off, _N0, _Ptr, _Traits::length(_Ptr)));
  }

 _Myt& replace(size_type _Off,
  size_type _N0, size_type _Count, _Elem _Ch)
  {
  if (this->_Mysize < _Off)
   _Xran();
  if (this->_Mysize - _Off < _N0)
   _N0 = this->_Mysize - _Off;
  if (npos - _Count <= this->_Mysize - _N0)
   _Xlen();
  size_type _Nm = this->_Mysize - _N0 - _Off;

  if (_Count < _N0)
   _Traits::move(_Myptr() + _Off + _Count,
    _Myptr() + _Off + _N0, _Nm);
  size_type _Num;
  if ((0 < _Count || 0 < _N0)
   && _Grow(_Num = this->_Mysize + _Count - _N0))
   {
   if (_N0 < _Count)
    _Traits::move(_Myptr() + _Off + _Count,
     _Myptr() + _Off + _N0, _Nm);
   _Chassign(_Off, _Count, _Ch);
   _Eos(_Num);
   }
  return (*this);
  }

 _Myt& replace(const_iterator _First, const_iterator _Last,
  const _Myt& _Right)
  {
  return (replace(
   _Pdif(_First, begin()), _Pdif(_Last, _First), _Right));
  }

 _Myt& replace(const_iterator _First, const_iterator _Last,
  const _Elem *_Ptr, size_type _Count)
  {
  return (replace(
   _Pdif(_First, begin()), _Pdif(_Last, _First), _Ptr, _Count));
  }

 _Myt& replace(const_iterator _First, const_iterator _Last,
  const _Elem *_Ptr)
  {
  return (replace(
   _Pdif(_First, begin()), _Pdif(_Last, _First), _Ptr));
  }

 _Myt& replace(const_iterator _First, const_iterator _Last,
  size_type _Count, _Elem _Ch)
  {
  return (replace(
   _Pdif(_First, begin()), _Pdif(_Last, _First), _Count, _Ch));
  }

 template<class _It>
  _Myt& replace(const_iterator _First, const_iterator _Last,
   _It _First2, _It _Last2)
  {
  return (_Replace(_First, _Last,
   _First2, _Last2, _Iter_cat(_First2)));
  }

 template<class _It>
  _Myt& _Replace(const_iterator _First, const_iterator _Last,
   _It _Count, _It _Ch, _Int_iterator_tag)
  {
  return (replace(_First, _Last, (size_type)_Count, (_Elem)_Ch));
  }

 template<class _It>
  _Myt& _Replace(const_iterator _First, const_iterator _Last,
   _It _First2, _It _Last2, input_iterator_tag)
  {
  _Myt _Right(_First2, _Last2);
  replace(_First, _Last, _Right);
  return (*this);
  }




 _Myt& replace(const_iterator _First, const_iterator _Last,
  const_pointer _First2, const_pointer _Last2)
  {
  if (_First2 == _Last2)
   erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
  else
   replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
    &*_First2, _Last2 - _First2);
  return (*this);
  }


 _Myt& replace(const_iterator _First, const_iterator _Last,
  const_iterator _First2, const_iterator _Last2)
  {
  if (_First2 == _Last2)
   erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
  else
   replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
    &*_First2, _Last2 - _First2);
  return (*this);
  }

 iterator begin()
  {
  return (iterator(_Myptr(), this));
  }

 const_iterator begin() const
  {
  return (const_iterator(_Myptr(), this));
  }

 iterator end()
  {
  return (iterator(_Myptr() + this->_Mysize, this));
  }

 const_iterator end() const
  {
  return (const_iterator(_Myptr() + this->_Mysize, this));
  }

 reverse_iterator rbegin()
  {
  return (reverse_iterator(end()));
  }

 const_reverse_iterator rbegin() const
  {
  return (const_reverse_iterator(end()));
  }

 reverse_iterator rend()
  {
  return (reverse_iterator(begin()));
  }

 const_reverse_iterator rend() const
  {
  return (const_reverse_iterator(begin()));
  }


 const_iterator cbegin() const
  {
  return (((const _Myt *)this)->begin());
  }

 const_iterator cend() const
  {
  return (((const _Myt *)this)->end());
  }

 const_reverse_iterator crbegin() const
  {
  return (((const _Myt *)this)->rbegin());
  }

 const_reverse_iterator crend() const
  {
  return (((const _Myt *)this)->rend());
  }

 void shrink_to_fit()
  {
  if (size() < capacity())
   {
   _Myt _Tmp(*this);
   swap(_Tmp);
   }
  }


 reference at(size_type _Off)
  {
  if (this->_Mysize <= _Off)
   _Xran();
  return (_Myptr()[_Off]);
  }

 const_reference at(size_type _Off) const
  {
  if (this->_Mysize <= _Off)
   _Xran();
  return (_Myptr()[_Off]);
  }

 reference operator[](size_type _Off)
  {
# 1520 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/xstring" 3
  return (_Myptr()[_Off]);
  }

 const_reference operator[](size_type _Off) const
  {
# 1533 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/xstring" 3
  return (_Myptr()[_Off]);
  }

 void push_back(_Elem _Ch)
  {
  insert(end(), _Ch);
  }


 void pop_back()
  {
  erase(this->_Mysize - 1);
  }

 reference front()
  {
  return (*begin());
  }

 const_reference front() const
  {
  return (*begin());
  }

 reference back()
  {
  return (*(end() - 1));
  }

 const_reference back() const
  {
  return (*(end() - 1));
  }


 const _Elem *c_str() const
  {
  return (_Myptr());
  }

 const _Elem *data() const
  {
  return (c_str());
  }

 size_type length() const
  {
  return (this->_Mysize);
  }

 size_type size() const
  {
  return (this->_Mysize);
  }

 size_type max_size() const
  {
  size_type _Num = this->_Alval.max_size();
  return (_Num <= 1 ? 1 : _Num - 1);
  }

 void resize(size_type _Newsize)
  {
  resize(_Newsize, _Elem());
  }

 void resize(size_type _Newsize, _Elem _Ch)
  {
  if (_Newsize <= this->_Mysize)
   erase(_Newsize);
  else
   append(_Newsize - this->_Mysize, _Ch);
  }

 size_type capacity() const
  {
  return (this->_Myres);
  }

 void reserve(size_type _Newcap = 0)
  {
  if (this->_Mysize <= _Newcap && this->_Myres != _Newcap)
   {
   size_type _Size = this->_Mysize;
   if (_Grow(_Newcap, true))
    _Eos(_Size);
   }
  }

 bool empty() const
  {
  return (this->_Mysize == 0);
  }

 size_type copy(_Elem *_Ptr,
  size_type _Count, size_type _Off = 0) const
  {





  if (this->_Mysize < _Off)
   _Xran();
  if (this->_Mysize - _Off < _Count)
   _Count = this->_Mysize - _Off;
  _Traits::copy(_Ptr, _Myptr() + _Off, _Count);
  return (_Count);
  }

 void swap(_Myt& _Right)
  {
  if (this == &_Right)
   ;
  else if (this->_Alval == _Right._Alval)
   {




   ::std:: swap(this->_Bx, _Right._Bx);
   ::std:: swap(this->_Mysize, _Right._Mysize);
   ::std:: swap(this->_Myres, _Right._Myres);
   }
  else
   {
   _Myt _Tmp = *this;

   *this = _Right;
   _Right = _Tmp;
   }
  }

 size_type find(const _Myt& _Right, size_type _Off = 0) const
  {
  return (find(_Right._Myptr(), _Off, _Right.size()));
  }

 size_type find(const _Elem *_Ptr,
  size_type _Off, size_type _Count) const
  {





  if (_Count == 0 && _Off <= this->_Mysize)
   return (_Off);

  size_type _Nm;
  if (_Off < this->_Mysize && _Count <= (_Nm = this->_Mysize - _Off))
   {
   const _Elem *_Uptr, *_Vptr;
   for (_Nm -= _Count - 1, _Vptr = _Myptr() + _Off;
    (_Uptr = _Traits::find(_Vptr, _Nm, *_Ptr)) != 0;
    _Nm -= _Uptr - _Vptr + 1, _Vptr = _Uptr + 1)
    if (_Traits::compare(_Uptr, _Ptr, _Count) == 0)
     return (_Uptr - _Myptr());
   }

  return (npos);
  }

 size_type find(const _Elem *_Ptr, size_type _Off = 0) const
  {
  ;
  return (find(_Ptr, _Off, _Traits::length(_Ptr)));
  }

 size_type find(_Elem _Ch, size_type _Off = 0) const
  {
  return (find((const _Elem *)&_Ch, _Off, 1));
  }

 size_type rfind(const _Myt& _Right, size_type _Off = npos) const
  {
  return (rfind(_Right._Myptr(), _Off, _Right.size()));
  }

 size_type rfind(const _Elem *_Ptr,
  size_type _Off, size_type _Count) const
  {





  if (_Count == 0)
   return (_Off < this->_Mysize ? _Off
    : this->_Mysize);
  if (_Count <= this->_Mysize)
   {
   const _Elem *_Uptr = _Myptr() +
    (_Off < this->_Mysize - _Count ? _Off
     : this->_Mysize - _Count);
   for (; ; --_Uptr)
    if (_Traits::eq(*_Uptr, *_Ptr)
     && _Traits::compare(_Uptr, _Ptr, _Count) == 0)
     return (_Uptr - _Myptr());
    else if (_Uptr == _Myptr())
     break;
   }

  return (npos);
  }

 size_type rfind(const _Elem *_Ptr, size_type _Off = npos) const
  {
  ;
  return (rfind(_Ptr, _Off, _Traits::length(_Ptr)));
  }

 size_type rfind(_Elem _Ch, size_type _Off = npos) const
  {
  return (rfind((const _Elem *)&_Ch, _Off, 1));
  }

 size_type find_first_of(const _Myt& _Right,
  size_type _Off = 0) const
  {
  return (find_first_of(_Right._Myptr(), _Off, _Right.size()));
  }

 size_type find_first_of(const _Elem *_Ptr,
  size_type _Off, size_type _Count) const
  {





  if (0 < _Count && _Off < this->_Mysize)
   {
   const _Elem *const _Vptr = _Myptr() + this->_Mysize;
   for (const _Elem *_Uptr = _Myptr() + _Off; _Uptr < _Vptr; ++_Uptr)
    if (_Traits::find(_Ptr, _Count, *_Uptr) != 0)
     return (_Uptr - _Myptr());
   }

  return (npos);
  }

 size_type find_first_of(const _Elem *_Ptr, size_type _Off = 0) const
  {
  ;
  return (find_first_of(_Ptr, _Off, _Traits::length(_Ptr)));
  }

 size_type find_first_of(_Elem _Ch, size_type _Off = 0) const
  {
  return (find((const _Elem *)&_Ch, _Off, 1));
  }

 size_type find_last_of(const _Myt& _Right,
  size_type _Off = npos) const
  {
  return (find_last_of(_Right._Myptr(), _Off, _Right.size()));
  }

 size_type find_last_of(const _Elem *_Ptr,
  size_type _Off, size_type _Count) const
  {





  if (0 < _Count && 0 < this->_Mysize)
   {
   const _Elem *_Uptr = _Myptr()
    + (_Off < this->_Mysize ? _Off : this->_Mysize - 1);
   for (; ; --_Uptr)
    if (_Traits::find(_Ptr, _Count, *_Uptr) != 0)
     return (_Uptr - _Myptr());
    else if (_Uptr == _Myptr())
     break;
   }

  return (npos);
  }

 size_type find_last_of(const _Elem *_Ptr,
  size_type _Off = npos) const
  {
  ;
  return (find_last_of(_Ptr, _Off, _Traits::length(_Ptr)));
  }

 size_type find_last_of(_Elem _Ch, size_type _Off = npos) const
  {
  return (rfind((const _Elem *)&_Ch, _Off, 1));
  }

 size_type find_first_not_of(const _Myt& _Right,
  size_type _Off = 0) const
  {
  return (find_first_not_of(_Right._Myptr(), _Off,
   _Right.size()));
  }

 size_type find_first_not_of(const _Elem *_Ptr,
  size_type _Off, size_type _Count) const
  {





  if (_Off < this->_Mysize)
   {
   const _Elem *const _Vptr = _Myptr() + this->_Mysize;
   for (const _Elem *_Uptr = _Myptr() + _Off; _Uptr < _Vptr; ++_Uptr)
    if (_Traits::find(_Ptr, _Count, *_Uptr) == 0)
     return (_Uptr - _Myptr());
   }
  return (npos);
  }

 size_type find_first_not_of(const _Elem *_Ptr,
  size_type _Off = 0) const
  {
  ;
  return (find_first_not_of(_Ptr, _Off, _Traits::length(_Ptr)));
  }

 size_type find_first_not_of(_Elem _Ch, size_type _Off = 0) const
  {
  return (find_first_not_of((const _Elem *)&_Ch, _Off, 1));
  }

 size_type find_last_not_of(const _Myt& _Right,
  size_type _Off = npos) const
  {
  return (find_last_not_of(_Right._Myptr(), _Off, _Right.size()));
  }

 size_type find_last_not_of(const _Elem *_Ptr,
  size_type _Off, size_type _Count) const
  {





  if (0 < this->_Mysize)
   {
   const _Elem *_Uptr = _Myptr()
    + (_Off < this->_Mysize ? _Off : this->_Mysize - 1);
   for (; ; --_Uptr)
    if (_Traits::find(_Ptr, _Count, *_Uptr) == 0)
     return (_Uptr - _Myptr());
    else if (_Uptr == _Myptr())
     break;
   }
  return (npos);
  }

 size_type find_last_not_of(const _Elem *_Ptr,
  size_type _Off = npos) const
  {
  ;
  return (find_last_not_of(_Ptr, _Off, _Traits::length(_Ptr)));
  }

 size_type find_last_not_of(_Elem _Ch, size_type _Off = npos) const
  {
  return (find_last_not_of((const _Elem *)&_Ch, _Off, 1));
  }

 _Myt substr(size_type _Off = 0, size_type _Count = npos) const
  {
  return (_Myt(*this, _Off, _Count, get_allocator()));
  }

 int compare(const _Myt& _Right) const
  {
  return (compare(0, this->_Mysize, _Right._Myptr(), _Right.size()));
  }

 int compare(size_type _Off, size_type _N0,
  const _Myt& _Right) const
  {
  return (compare(_Off, _N0, _Right, 0, npos));
  }

 int compare(size_type _Off,
  size_type _N0, const _Myt& _Right,
  size_type _Roff, size_type _Count) const
  {
  if (_Right.size() < _Roff)
   _Xran();
  if (_Right._Mysize - _Roff < _Count)
   _Count = _Right._Mysize - _Roff;
  return (compare(_Off, _N0, _Right._Myptr() + _Roff, _Count));
  }

 int compare(const _Elem *_Ptr) const
  {
  ;
  return (compare(0, this->_Mysize, _Ptr, _Traits::length(_Ptr)));
  }

 int compare(size_type _Off, size_type _N0, const _Elem *_Ptr) const
  {
  ;
  return (compare(_Off, _N0, _Ptr, _Traits::length(_Ptr)));
  }

 int compare(size_type _Off,
  size_type _N0, const _Elem *_Ptr, size_type _Count) const
  {





  if (this->_Mysize < _Off)
   _Xran();
  if (this->_Mysize - _Off < _N0)
   _N0 = this->_Mysize - _Off;

  size_type _Ans = _Traits::compare(_Myptr() + _Off, _Ptr,
   _N0 < _Count ? _N0 : _Count);
  return (_Ans != 0 ? (int)_Ans : _N0 < _Count ? -1
   : _N0 == _Count ? 0 : +1);
  }

 allocator_type get_allocator() const
  {
  return (this->_Alval);
  }

 void _Chassign(size_type _Off, size_type _Count, _Elem _Ch)
  {
  if (_Count == 1)
   _Traits::assign(*(_Myptr() + _Off), _Ch);
  else
   _Traits::assign(_Myptr() + _Off, _Count, _Ch);
  }

 void _Copy(size_type _Newsize, size_type _Oldlen)
  {
  size_type _Newres = _Newsize | this->_ALLOC_MASK;
  if (max_size() < _Newres)
   _Newres = _Newsize;
  else if (this->_Myres / 2 <= _Newres / 3)
   ;
  else if (this->_Myres <= max_size() - this->_Myres / 2)
   _Newres = this->_Myres
    + this->_Myres / 2;
  else
   _Newres = max_size();

  _Elem *_Ptr;
  try {
   _Ptr = this->_Alval.allocate(_Newres + 1);
  } catch (...) {
   _Newres = _Newsize;
   try {
    _Ptr = this->_Alval.allocate(_Newres + 1);
   } catch (...) {
   _Tidy(true);
   throw;
   }
  }

  if (0 < _Oldlen)
   _Traits::copy(_Ptr, _Myptr(), _Oldlen);
  _Tidy(true);
  this->_Bx._Ptr = _Ptr;
  this->_Myres = _Newres;
  _Eos(_Oldlen);
  }

 void _Eos(size_type _Newsize)
  {
  _Traits::assign(_Myptr()[this->_Mysize = _Newsize], _Elem());
  }

 bool _Grow(size_type _Newsize,
  bool _Trim = false)
  {
  if (max_size() < _Newsize)
   _Xlen();
  if (this->_Myres < _Newsize)
   _Copy(_Newsize, this->_Mysize);
  else if (_Trim && _Newsize < this->_BUF_SIZE)
   _Tidy(true,
    _Newsize < this->_Mysize ? _Newsize : this->_Mysize);
  else if (_Newsize == 0)
   _Eos(0);
  return (0 < _Newsize);
  }

 bool _Inside(const _Elem *_Ptr)
  {
  if (_Ptr == 0 || _Ptr < _Myptr() || _Myptr() + this->_Mysize <= _Ptr)
   return (false);
  else
   return (true);
  }

 static size_type _Pdif(const_iterator _P2,
  const_iterator _P1)
  {
  return ((_P2)._Ptr == 0 ? 0 : _P2 - _P1);
  }

 void _Tidy(bool _Built = false,
  size_type _Newsize = 0)
  {
  if (!_Built)
   ;
  else if (this->_BUF_SIZE <= this->_Myres)
   {
   _Elem *_Ptr = this->_Bx._Ptr;
   if (0 < _Newsize)
    _Traits::copy(this->_Bx._Buf, _Ptr, _Newsize);
   this->_Alval.deallocate(_Ptr, this->_Myres + 1);
   }
  this->_Myres = this->_BUF_SIZE - 1;
  _Eos(_Newsize);
  }

 _Elem *_Myptr()
  {
  return (this->_BUF_SIZE <= this->_Myres ? this->_Bx._Ptr
   : this->_Bx._Buf);
  }

 const _Elem *_Myptr() const
  {
  return (this->_BUF_SIZE <= this->_Myres ? this->_Bx._Ptr
   : this->_Bx._Buf);
  }

 void _Xlen() const
  {
  _Xlength_error("string too long");
  }

 void _Xran() const
  {
  _Xout_of_range("invalid string position");
  }
 };




template<class _Elem,
 class _Traits,
 class _Alloc> inline
 void swap(basic_string<_Elem, _Traits, _Alloc>& _Left,
  basic_string<_Elem, _Traits, _Alloc>& _Right)
 {
 _Left.swap(_Right);
 }
# 2112 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/xstring" 3
typedef basic_string<char, char_traits<char>, allocator<char> >
 string;
typedef basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t> >
 wstring;


typedef basic_string<char16_t, char_traits<char16_t>, allocator<char16_t> >
 u16string;
typedef basic_string<char32_t, char_traits<char32_t>, allocator<char32_t> >
 u32string;

}
# 6 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/stdexcept" 2 3
namespace std {





class logic_error
 : public ::std:: exception
 {
public:
 explicit logic_error(const string& _Message)
  : _Str(_Message)
  {
  }

 explicit logic_error(const char *_Message)
  : _Str(_Message)
  {
  }

 virtual ~logic_error() throw ()
  {
  }

 virtual const char *what() const throw ()
  {
  return (_Str.c_str());
  }

private:
 string _Str;
# 47 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/stdexcept" 3
 };


class domain_error
 : public logic_error
 {
public:
 typedef logic_error _Mybase;

 explicit domain_error(const string& _Message)
  : _Mybase(_Message.c_str())
  {
  }

 explicit domain_error(const char *_Message)
  : _Mybase(_Message)
  {
  }
# 75 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/stdexcept" 3
 };


class invalid_argument
 : public logic_error
 {
public:
 typedef logic_error _Mybase;

 explicit invalid_argument(const string& _Message)
  : _Mybase(_Message.c_str())
  {
  }

 explicit invalid_argument(const char *_Message)
  : _Mybase(_Message)
  {
  }
# 103 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/stdexcept" 3
 };


class length_error
 : public logic_error
 {
public:
 typedef logic_error _Mybase;

 explicit length_error(const string& _Message)
  : _Mybase(_Message.c_str())
  {
  }

 explicit length_error(const char *_Message)
  : _Mybase(_Message)
  {
  }
# 131 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/stdexcept" 3
 };


class out_of_range
 : public logic_error
 {
public:
 typedef logic_error _Mybase;

 explicit out_of_range(const string& _Message)
  : _Mybase(_Message.c_str())
  {
  }

 explicit out_of_range(const char *_Message)
  : _Mybase(_Message)
  {
  }
# 159 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/stdexcept" 3
 };


class runtime_error
 : public ::std:: exception
 {
public:
 explicit runtime_error(const string& _Message)
  : _Str(_Message)
  {
  }

 explicit runtime_error(const char *_Message)
  : _Str(_Message)
  {
  }

 virtual ~runtime_error() throw ()
  {
  }

 virtual const char *what() const throw ()
  {
  return (_Str.c_str());
  }

private:
 string _Str;
# 197 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/stdexcept" 3
 };


class overflow_error
 : public runtime_error
 {
public:
 typedef runtime_error _Mybase;

 explicit overflow_error(const string& _Message)
  : _Mybase(_Message.c_str())
  {
  }

 explicit overflow_error(const char *_Message)
  : _Mybase(_Message)
  {
  }
# 225 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/stdexcept" 3
 };


class underflow_error
 : public runtime_error
 {
public:
 typedef runtime_error _Mybase;

 explicit underflow_error(const string& _Message)
  : _Mybase(_Message.c_str())
  {
  }

 explicit underflow_error(const char *_Message)
  : _Mybase(_Message)
  {
  }
# 253 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/stdexcept" 3
 };


class range_error
 : public runtime_error
 {
public:
 typedef runtime_error _Mybase;

 explicit range_error(const string& _Message)
  : _Mybase(_Message.c_str())
  {
  }

 explicit range_error(const char *_Message)
  : _Mybase(_Message)
  {
  }
# 281 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/stdexcept" 3
 };
}
# 7 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/xlocale" 2 3
# 1 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/typeinfo" 1 3






# 1 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/c/string.h" 1 3
# 8 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/typeinfo" 2 3






namespace std {

class bad_cast
 : public ::std:: exception
 {
public:
 bad_cast() throw ()
  {
  }
# 31 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/typeinfo" 3
 virtual const char *what() const throw ()
  {
  return ("bad cast");
  }
# 47 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/typeinfo" 3
 };


class bad_typeid
 : public ::std:: exception
 {
public:
 bad_typeid() throw ()
  {
  }
# 65 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/typeinfo" 3
 virtual const char *what() const throw ()
  {
  return ("bad typeid");
  }
# 81 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/typeinfo" 3
 };
}




namespace __cxxabiv1
 {
 class __class_type_info;
 }


namespace std {





class type_info
 {
public:

 size_t hash_code() const throw ()
  {
  const char *_Keyval = name();
  size_t _Val = 2166136261U;
  size_t _First = 0;
  size_t _Last = :: strlen(_Keyval);
  size_t _Stride = 1 + _Last / 10;

  for(; _First < _Last; _First += _Stride)
   _Val = 16777619U * _Val ^ (size_t)_Keyval[_First];
  return (_Val);
  }


 virtual ~type_info();
# 150 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/typeinfo" 3
 bool before(const type_info& _Right) const
  {
  return (_Myname < _Right._Myname);
  }

 bool operator==(const type_info& _Right) const
  {
  return (_Myname == _Right._Myname);
  }


 bool operator!=(const type_info& _Right) const
  {
  return (!(*this == _Right));
  }

 const char *name() const
  {
  return (_Myname);
  }

 virtual bool __is_pointer_p() const;
 virtual bool __is_function_p() const;
 virtual bool __do_catch(const type_info *, void **, unsigned) const;
 virtual bool __do_upcast(const __cxxabiv1::__class_type_info *, void **)
  const;

protected:
 explicit type_info(const char *_Name)
  : _Myname(_Name)
  {
  }

 const char *_Myname;


protected:
 type_info(const type_info&);

private:
 type_info& operator=(const type_info&);
 };
}
# 8 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/xlocale" 2 3
# 1 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/c/xlocinfo" 1 3



# 1 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/c/cctype" 1 3



# 1 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/c/yvals.h" 1 3
# 5 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/c/cctype" 2 3







# 1 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/c/ctype.h" 1 3








# 22 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/c/ctype.h" 3
extern "C" {
typedef const short *_Ctype_t;

_Ctype_t _Getpctype(void);
_Ctype_t _Getptolower(void);
_Ctype_t _Getptoupper(void);


extern _Ctype_t _Ctype;
extern _Ctype_t _Tolotab;
extern _Ctype_t _Touptab;
# 42 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/c/ctype.h" 3
}



extern "C" {
inline int isalnum(int _Ch)
 {
 return (_Ctype[(int)(_Ch)] & (0x20|0x10|0x02|0x200));
 }

inline int isalpha(int _Ch)
 {
 return (_Ctype[(int)(_Ch)] & (0x10|0x02|0x200));
 }

inline int iscntrl(int _Ch)
 {
 return (_Ctype[(int)(_Ch)] & 0x80);
 }

inline int isdigit(int _Ch)
 {
 return (_Ctype[(int)(_Ch)] & 0x20);
 }

inline int isgraph(int _Ch)
 {
 return (_Ctype[(int)(_Ch)] & (0x20|0x10|0x08|0x02|0x200));
 }

inline int islower(int _Ch)
 {
 return (_Ctype[(int)(_Ch)] & 0x10);
 }

inline int isprint(int _Ch)
 {
 return (_Ctype[(int)(_Ch)] & (0x20|0x10|0x08|0x04|0x02|0x200));
 }

inline int ispunct(int _Ch)
 {
 return (_Ctype[(int)(_Ch)] & 0x08);
 }

inline int _Isspace(int _Ch)
 {
 return (_Ctype[(int)(_Ch)] & (0x40|0x04|0x100));
 }

inline int isspace(int _Ch)
 {
 return (_Isspace(_Ch));
 }

inline int isupper(int _Ch)
 {
 return (_Ctype[(int)(_Ch)] & 0x02);
 }

inline int isxdigit(int _Ch)
 {
 return (_Ctype[(int)(_Ch)] & 0x01);
 }


inline int isascii(int _Ch)
 {
  return ((unsigned)(_Ch) <= 0x7f);
 }

inline int toascii(int _Ch)
 {
  return ((_Ch) & 0x7f);
 }



inline int isblank(int _Ch)
 {
 return (_Ctype[(int)(_Ch)] & (0x04|0x400));
 }


inline int tolower(int _Ch)
 {
 return (_Tolotab[(int)(_Ch)]);
 }

inline int toupper(int _Ch)
 {
 return (_Touptab[(int)(_Ch)]);
 }
}
# 207 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/c/ctype.h" 3

# 13 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/c/cctype" 2 3



namespace std {
using :: isalnum; using :: isalpha; using :: iscntrl;
using :: isdigit; using :: isgraph; using :: islower;
using :: isprint; using :: ispunct; using :: isspace;
using :: isupper; using :: isxdigit; using :: tolower;
using :: toupper; using :: _Isspace;


using :: isblank;



 namespace tr1 {
using :: isblank;
 }

}
# 5 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/c/xlocinfo" 2 3
# 1 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/c/clocale" 1 3



# 1 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/c/yvals.h" 1 3
# 5 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/c/clocale" 2 3







# 1 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/c/locale.h" 1 3








# 44 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/c/locale.h" 3
struct lconv
 {

 char *currency_symbol;
 char *int_curr_symbol;
 char *mon_decimal_point;
 char *mon_grouping;
 char *mon_thousands_sep;
 char *negative_sign;
 char *positive_sign;

 char frac_digits;
 char n_cs_precedes;
 char n_sep_by_space;
 char n_sign_posn;
 char p_cs_precedes;
 char p_sep_by_space;
 char p_sign_posn;

 char int_frac_digits;

 char int_n_cs_precedes;
 char int_n_sep_by_space;
 char int_n_sign_posn;
 char int_p_cs_precedes;
 char int_p_sep_by_space;
 char int_p_sign_posn;



 char *decimal_point;
 char *grouping;
 char *thousands_sep;
 char *_Frac_grouping;
 char *_Frac_sep;
 char *_False;
 char *_True;


 char *_No;
 char *_Yes;
 };

struct _Linfo;


extern "C" {
struct lconv *localeconv(void);
char *setlocale(int, const char *);
extern struct lconv _Locale;
}

# 13 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/c/clocale" 2 3



namespace std {
using :: lconv; using :: localeconv; using :: setlocale;
}
# 6 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/c/xlocinfo" 2 3


# 1 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/ctime" 1 3



# 1 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/c/yvals.h" 1 3
# 5 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/ctime" 2 3







# 1 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/c/time.h" 1 3








# 34 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/c/time.h" 3
typedef long clock_t;
# 45 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/c/time.h" 3
typedef long time_t;




struct tm
 {
 int tm_sec;
 int tm_min;
 int tm_hour;
 int tm_mday;
 int tm_mon;
 int tm_year;
 int tm_wday;
 int tm_yday;
 int tm_isdst;
 };
# 71 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/c/time.h" 3
struct timespec
 {
 time_t tv_sec;
 long tv_nsec;
 };
# 90 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/c/time.h" 3
typedef int clockid_t;




extern "C" {
time_t time(time_t *);
}

extern "C" {
char *asctime(const struct tm *);
clock_t clock(void);
char *ctime(const time_t *);
double difftime(time_t, time_t);
struct tm *gmtime(const time_t *);
struct tm *localtime(const time_t *);
time_t mktime(struct tm *);
size_t strftime(char *, size_t,
 const char *, const struct tm *);
}


extern "C" {
# 124 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/c/time.h" 3
errno_t asctime_s(char *, rsize_t, const struct tm *);
errno_t ctime_s(char *, rsize_t, const time_t *);
struct tm *gmtime_s(const time_t *,
 struct tm *);
struct tm *localtime_s(const time_t *,
 struct tm *);
}


# 13 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/ctime" 2 3



namespace std {
using :: clock_t; using :: size_t;
using :: time_t; using :: tm;
using :: asctime; using :: clock; using :: ctime;
using :: difftime; using :: gmtime; using :: localtime;
using :: mktime; using :: strftime; using :: time;
}
# 9 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/c/xlocinfo" 2 3
# 1 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/c/xstrxfrm.h" 1 3



# 1 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/c/string.h" 1 3
# 5 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/c/xstrxfrm.h" 2 3
# 1 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/c/xstate.h" 1 3








# 20 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/c/xstate.h" 3
typedef struct
 {
 const unsigned short *_Tab[16];
 } _Statab;

# 6 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/c/xstrxfrm.h" 2 3


typedef struct Xfrm {
 const unsigned char *sbegin;
 const unsigned char *sin;
 const unsigned char *send;
 long weight;
 unsigned short phase, state, wc;
 } Xfrm;


extern "C" {
int _Strcollx(const char *, const char *, _Statab *);
size_t _Strxfrmx(char *, const char *, size_t, _Statab *);

size_t _CStrxfrm(char *, size_t, Xfrm *, _Statab *);
}

# 10 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/c/xlocinfo" 2 3
# 1 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/c/xtinfo.h" 1 3



# 1 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/c/time.h" 1 3
# 5 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/c/xtinfo.h" 2 3






typedef struct
 {
 const char *_Am_pm;
 const char *_Days;
  const char *_Abday;
  const char *_Day;
 const char *_Months;
  const char *_Abmon;
  const char *_Mon;
 const char *_Formats;
  const char *_D_t_fmt;
  const char *_D_fmt;
  const char *_T_fmt;
  const char *_T_fmt_ampm;
 const char *_Era_Formats;
  const char *_Era_D_t_fmt;
  const char *_Era_D_fmt;
  const char *_Era_T_fmt;
  const char *_Era_T_fmt_ampm;
 const char *_Era;
 const char *_Alt_digits;
 const char *_Isdst;
 const char *_Tzone;
 } _Tinfo;


extern "C" {
size_t _CStrftime(char *, size_t, const char *,
 const struct tm *, const _Tinfo *);
_Tinfo *_Getptimes(void);
}

# 11 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/c/xlocinfo" 2 3
# 1 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/c/xwcsxfrm.h" 1 3




# 1 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/c/xwchar.h" 1 3



# 1 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/c/wchar.h" 1 3
# 5 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/c/xwchar.h" 2 3
# 1 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/c/wctype.h" 1 3












typedef _Sizet wctrans_t;


typedef _Sizet wctype_t;
# 29 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/c/wctype.h" 3
# 1 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/c/xwcc.h" 1 3




extern "C" {
int _Iswctype(wint_t, wctype_t);
wint_t _Towctrans(wint_t, wctrans_t);

}



extern "C" {
inline int iswalnum(wint_t _Wc)
 {
 return (_Iswctype(_Wc, 1));
 }

inline int iswalpha(wint_t _Wc)
 {
 return (_Iswctype(_Wc, 2));
 }

inline int iswcntrl(wint_t _Wc)
 {
 return (_Iswctype(_Wc, 3));
 }

inline int iswctype(wint_t _Wc, wctype_t _Off)
 {
 return (_Iswctype(_Wc, _Off));
 }

inline int iswdigit(wint_t _Wc)
 {
 return (_Iswctype(_Wc, 4));
 }

inline int iswgraph(wint_t _Wc)
 {
 return (_Iswctype(_Wc, 5));
 }

inline int iswlower(wint_t _Wc)
 {
 return (_Iswctype(_Wc, 6));
 }

inline int iswprint(wint_t _Wc)
 {
 return (_Iswctype(_Wc, 7));
 }

inline int iswpunct(wint_t _Wc)
 {
 return (_Iswctype(_Wc, 8));
 }

inline int iswspace(wint_t _Wc)
 {
 return (_Iswctype(_Wc, 9));
 }

inline int iswupper(wint_t _Wc)
 {
 return (_Iswctype(_Wc, 10));
 }

inline int iswxdigit(wint_t _Wc)
 {
 return (_Iswctype(_Wc, 11));
 }

inline wint_t towlower(wint_t _Wc)
 {
 return (_Towctrans(_Wc, 1));
 }

inline wint_t towupper(wint_t _Wc)
 {
 return (_Towctrans(_Wc, 2));
 }


inline int iswblank(wint_t _Wc)
 {
 return (_Iswctype(_Wc, 12));
 }


}
# 30 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/c/wctype.h" 2 3

extern "C" {
wctrans_t wctrans(const char *);
wctype_t wctype(const char *);
}



extern "C" {
inline wint_t (towctrans)(wint_t _Wc, wctrans_t _Off)
 {
 return (_Towctrans(_Wc, _Off));
 }
}








# 6 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/c/xwchar.h" 2 3



extern "C" {

int _Mbtowc(wchar_t *, const char *, size_t, mbstate_t *);
size_t _Wcsftime(wchar_t *, size_t, const char *, size_t,
 const struct tm *);
int _Wctomb(char *, wchar_t, mbstate_t *);
long double _WStold(const wchar_t *, wchar_t **, long);
_Longlong _WStoll(const wchar_t *, wchar_t **, int);
unsigned long _WStoul(const wchar_t *, wchar_t **, int);
_ULonglong _WStoull(const wchar_t *, wchar_t **, int);

int _Mbtowcx(wchar_t *, const char *, size_t, mbstate_t *,
 _Statab *);
int _Wctombx(char *, wchar_t, mbstate_t *,
 _Statab *, _Statab *);

_Statab *_Getpmbstate(void);
_Statab *_Getpwcstate(void);
_Statab *_Getpcostate(void);
_Statab *_Getpwcostate(void);
}

# 6 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/c/xwcsxfrm.h" 2 3


extern "C" {
int _Wcscollx(const wchar_t *,
 const wchar_t *, _Statab *);
size_t _Wcsxfrmx(wchar_t *,
 const wchar_t *, size_t, _Statab *);

size_t _CWcsxfrm(wchar_t *, const wchar_t **, size_t,
 mbstate_t *, _Statab *);
}

# 12 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/c/xlocinfo" 2 3
# 25 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/c/xlocinfo" 3
namespace std {
# 38 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/c/xlocinfo" 3
struct _Collvec
 {
 :: _Statab *_Costate;
 :: _Statab *_WCostate;
 };


struct _Ctypevec
 {
 const short *_Table;
 const short *_Tolotab;
 const short *_Touptab;
 int _Delfl;
 };


struct _Cvtvec
 {
 :: _Statab *_Mbstate;
 :: _Statab *_Wcstate;
 };


class _Timevec
 {
public:
 _Timevec()
  : _Timestuff(*:: _Getptimes())
  {
  }

 const void *_Getptr() const
  {
  return ((const void *)&_Timestuff);
  }

private:
 :: _Tinfo _Timestuff;
 };


class _Locinfo
 {
public:
 typedef ::std:: _Collvec _Collvec;
 typedef ::std:: _Ctypevec _Ctypevec;
 typedef ::std:: _Cvtvec _Cvtvec;
 typedef ::std:: _Timevec _Timevec;

 _Locinfo(const char * = "C");
 _Locinfo(const string&);
 _Locinfo(int, const char *);

 ~_Locinfo();

 _Locinfo& _Addcats(int, const char *);

 const char *_Getname() const
  {
  return (_Newlocname.c_str());
  }

 _Collvec _Getcoll() const
  {
  _Collvec _X = {0};
  _X._Costate = :: _Getpcostate();
  _X._WCostate = :: _Getpwcostate();
  return (_X);
  }

 _Ctypevec _Getctype() const
  {
  _Ctypevec _X = {0};
  _X._Table = :: _Ctype;
  _X._Tolotab = :: _Tolotab;
  _X._Touptab = :: _Touptab;
  return (_X);
  }

 _Cvtvec _Getcvt() const
  {
  _Cvtvec _X = {0};
  _X._Mbstate = :: _Getpmbstate();
  _X._Wcstate = :: _Getpwcstate();
  return (_X);
  }

 const lconv *_Getlconv() const
  {
  return (localeconv());
  }

 _Timevec _Gettnames() const
  {
  return (_Timeinfo);
  }

 const char *_Getdays() const
  {
  return (:: _Getptimes()->_Days);
  }

 const char *_Getmonths() const
  {
  return (:: _Getptimes()->_Months);
  }

 const char *_Getfalse() const
  {
  return (localeconv()->_False);
  }

 const char *_Gettrue() const
  {
  return (localeconv()->_True);
  }

private:

 _Timevec _Timeinfo;
 _Yarn<char> _Oldlocname;
 _Yarn<char> _Newlocname;
 };


template<class _Elem> inline
 int _LStrcoll(const _Elem *_First1, const _Elem *_Last1,
  const _Elem *_First2, const _Elem *_Last2, const _Collvec *)
 {
 for (; _First1 != _Last1 && _First2 != _Last2; ++_First1, ++_First2)
  if (*_First1 < *_First2)
   return (-1);
  else if (*_First2 < *_First1)
   return (+1);

 return (_First2 != _Last2 ? -1 : _First1 != _Last1 ? +1 : 0);
 }

template<> inline
 int _LStrcoll(const char *_First1, const char *_Last1,
  const char *_First2, const char *_Last2, const _Collvec *_Pcoll)
 {
 string _Str1, _Str2;
 size_t _Len1 = _Last1 - _First1;
 size_t _Len2 = _Last2 - _First2;

 if (0 < _Len1 && _Last1[-1] != '\0')
  {
  _Str1.assign(_First1, _Last1);
  _First1 = _Str1.c_str();
  }
 if (0 < _Len2 && _Last2[-1] != '\0')
  {
  _Str2.assign(_First2, _Last2);
  _First2 = _Str2.c_str();
  }

 int _Ans = 0;
 while (0 < _Len1 && 0 < _Len2
  && (_Ans = _Strcollx(_First1, _First2, _Pcoll->_Costate)) == 0)
  {
  size_t _Prefix = :: strlen(_First1) + 1;
  if (_Len1 <= _Prefix || _Len2 <= _Prefix)
   return (_Len1 < _Len2 ? -1 : _Len1 == _Len2 ? 0 : +1);

  _Len1 -= _Prefix, _Len2 -= _Prefix;
  _First1 += _Prefix, _First2 += _Prefix;
  }
 return (_Ans != 0 || _Len1 == _Len2 ? _Ans
  : _Len1 < _Len2 ? -1 : +1);
 }




template<> inline
 int _LStrcoll(const wchar_t *_First1, const wchar_t *_Last1,
  const wchar_t *_First2, const wchar_t *_Last2, const _Collvec *_Pcoll)
 {
 wstring _Str1, _Str2;
 size_t _Len1 = _Last1 - _First1;
 size_t _Len2 = _Last2 - _First2;

 if (0 < _Len1 && _Last1[-1] != L'\0')
  {
  _Str1.assign(_First1, _Last1);
  _First1 = _Str1.c_str();
  }
 if (0 < _Len2 && _Last2[-1] != L'\0')
  {
  _Str2.assign(_First2, _Last2);
  _First2 = _Str2.c_str();
  }

 int _Ans = 0;
 while (0 < _Len1 && 0 < _Len2
  && (_Ans = _Wcscollx(_First1, _First2, _Pcoll->_WCostate)) == 0)
  {
  size_t _Prefix = :: wcslen(_First1) + 1;
  if (_Len1 <= _Prefix || _Len2 <= _Prefix)
   return (_Len1 < _Len2 ? -1 : _Len1 == _Len2 ? 0 : +1);

  _Len1 -= _Prefix, _Len2 -= _Prefix;
  _First1 += _Prefix, _First2 += _Prefix;
  }
 return (_Ans != 0 || _Len1 == _Len2 ? _Ans
  : _Len1 < _Len2 ? -1 : +1);
 }



template<class _Elem> inline
 size_t _LStrxfrm(_Elem *_First1, _Elem *_Last1,
  const _Elem *_First2, const _Elem *_Last2,
   const _Locinfo::_Collvec *)
 {
 size_t _Count = _Last2 - _First2;

 if (_Count <= (size_t)(_Last1 - _First1))
  :: memcpy(_First1, _First2, _Count * sizeof (_Elem));
 return (_Count);
 }

template<> inline
 size_t _LStrxfrm(char *_First1, char *_Last1,
  const char *_First2, const char *_Last2,
   const _Locinfo::_Collvec *_Pcoll)
 {
 string _Str2;
 size_t _Len1 = _Last1 - _First1;
 size_t _Len2 = _Last2 - _First2;

 if (0 < _Len2 && _Last2[-1] != '\0')
  {
  _Str2.assign(_First2, _Last2);
  _First2 = _Str2.c_str();
  }

 size_t _Count = 0;
 while (0 < _Len2)
  {
  size_t _Num = _Strxfrmx(_First1, _First2, _Len1,
   _Pcoll->_Costate) + 1;
  _Count += _Num;
  if (_Len1 < _Num)
   break;

  size_t _Prefix = :: strlen(_First2) + 1;
  if (_Len1 <= _Prefix)
   break;
  _Len1 -= _Num;
  _First1 += _Num;
  _First2 += _Prefix;
  }
 return (_Count);
 }




template<> inline
 size_t _LStrxfrm(wchar_t *_First1, wchar_t *_Last1,
  const wchar_t *_First2, const wchar_t *_Last2,
   const _Locinfo::_Collvec *_Pcoll)
 {
 wstring _Str2;
 size_t _Len1 = _Last1 - _First1;
 size_t _Len2 = _Last2 - _First2;

 if (0 < _Len2 && _Last2[-1] != L'\0')
  {
  _Str2.assign(_First2, _Last2);
  _First2 = _Str2.c_str();
  }

 size_t _Count = 0;
 while (0 < _Len2)
  {
  size_t _Num = _Wcsxfrmx(_First1, _First2, _Len1,
   _Pcoll->_WCostate) + 1;
  _Count += _Num;
  if (_Len1 < _Num)
   break;

  size_t _Prefix = :: wcslen(_First2) + 1;
  if (_Len1 <= _Prefix)
   break;
  _Len1 -= _Num;
  _First1 += _Num;
  _First2 += _Prefix;
  }
 return (_Count);
 }



inline int _Mbrtowc(wchar_t *_Wptr, const char *_Ptr, size_t _Count,
 mbstate_t *_Pstate, const _Cvtvec *_Pcvt)
 {
 return (:: _Mbtowcx(_Wptr, _Ptr, _Count, _Pstate,
  _Pcvt->_Mbstate));
 }


inline size_t _Strftime(char *_Ptr, size_t _Count, const char *_Format,
 const struct tm *_Ptime, const void *_Timeptr)
 {
 return (:: _CStrftime(_Ptr, _Count, _Format, _Ptime,
  (const :: _Tinfo *)_Timeptr));
 }


inline int _Tolower(int _Byte, const _Ctypevec *_Pctype)
 {
 return (_Pctype->_Tolotab[_Byte & 0xff]);
 }


inline int _Toupper(int _Byte, const _Ctypevec *_Pctype)
 {
 return (_Pctype->_Touptab[_Byte & 0xff]);
 }


inline int _Wcrtomb(char *_Ptr, wchar_t _Char,
 mbstate_t *_Pstate, const _Cvtvec *_Pcvt)
 {
 return (:: _Wctombx(_Ptr, _Char, _Pstate,
  _Pcvt->_Mbstate, _Pcvt->_Wcstate));
 }
}
# 9 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/xlocale" 2 3
# 1 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/xdebug" 1 3
# 10 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/xlocale" 2 3
# 18 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/xlocale" 3

extern "C" {
void *_Getgloballocale();
void _Setgloballocale(void *);
}


namespace std {

template<class _Dummy>
 class _Locbase
 {
public:
 static const int collate = ((1 << (1)) >> 1);
 static const int ctype = ((1 << (2)) >> 1);
 static const int monetary = ((1 << (3)) >> 1);
 static const int numeric = ((1 << (4)) >> 1);
 static const int time = ((1 << (5)) >> 1);
 static const int messages = ((1 << (6)) >> 1);
 static const int all = (((1 << (7)) >> 1) - 1);
 static const int none = 0;
 };

template<class _Dummy>
 const int _Locbase<_Dummy>::collate;
template<class _Dummy>
 const int _Locbase<_Dummy>::ctype;
template<class _Dummy>
 const int _Locbase<_Dummy>::monetary;
template<class _Dummy>
 const int _Locbase<_Dummy>::numeric;
template<class _Dummy>
 const int _Locbase<_Dummy>::time;
template<class _Dummy>
 const int _Locbase<_Dummy>::messages;
template<class _Dummy>
 const int _Locbase<_Dummy>::all;
template<class _Dummy>
 const int _Locbase<_Dummy>::none;


class locale;
template<class _Facet>
 const _Facet& use_facet(const locale&);

class locale
 : public _Locbase<int>
 {
public:
 typedef int category;


 class id
  {
 public:
  id(size_t _Val = 0)
   : _Id(_Val)
   {
   }

  operator size_t()
   {
   if (_Id == 0)
    {
    {
     if (_Id == 0)
      _Id = ++_Id_cnt;
    }
    }
   return (_Id);
   }

 private:
  size_t _Id;

  static int _Id_cnt;

  id(const id&);
  id& operator=(const id&);
  };

 class _Locimp;


 class facet
  {
  friend class locale;
  friend class _Locimp;

 public:
  static size_t _Getcat(const facet ** = 0,
   const locale * = 0)
   {
   return ((size_t)(-1));
   }

  void _Incref()
   {
   {
    if (_Refs < (size_t)(-1))
     ++_Refs;
   }
   }

  facet *_Decref()
   {
   {
    if (0 < _Refs && _Refs < (size_t)(-1))
     --_Refs;
    return (_Refs == 0 ? this : 0);
   }
   }

  void _Register();

 protected:
  virtual ~facet()
   {
   }

 protected:
  explicit facet(size_t _Initrefs = 0)
   : _Refs(_Initrefs)
   {
   }

 private:
  size_t _Refs;

  facet(const facet&);
  };



 class _Locimp
  : public facet
  {
 protected:
  ~_Locimp();

 private:
  friend class locale;

  _Locimp(bool _Transparent = false);

  _Locimp(const _Locimp&);

  void _Addfac(facet *, size_t);

  static _Locimp *_Makeloc(const _Locinfo&,
   category, _Locimp *, const locale *);

  static void _Makewloc(const _Locinfo&,
   category, _Locimp *, const locale *);

  static void _Makexloc(const _Locinfo&,
   category, _Locimp *, const locale *);

  facet **_Facetvec;
  size_t _Facetcount;
  category _Catmask;
  bool _Xparent;

  _Yarn<char> _Name;

  static _Locimp *_Clocptr;
  };

 locale& _Addfac(facet *_Fac, size_t _Id,
  size_t _Catmask)
  {
  if (1 < _Ptr->_Refs)
   {
   _Ptr->_Decref();
   _Ptr = new _Locimp(*_Ptr);
   }
  _Ptr->_Addfac(_Fac, _Id);

  if (_Catmask != 0)
   _Ptr->_Name = "*";
  return (*this);
  }

 template<class _Elem,
  class _Traits,
  class _Alloc>
  bool operator()(const basic_string<_Elem, _Traits, _Alloc>&,
   const basic_string<_Elem, _Traits, _Alloc>&)
    const;

 template<class _Facet>
  locale combine(const locale& _Loc) const
  {
  _Facet *_Facptr;

  try {
   _Facptr = (_Facet *)&::std:: use_facet<_Facet>(_Loc);
  } catch (...) {
   _Xruntime_error("locale::combine facet missing");
  }

  _Locimp *_Newimp = new _Locimp(*_Ptr);
  _Newimp->_Addfac(_Facptr, _Facet::id);
  _Newimp->_Catmask = 0;
  _Newimp->_Name = "*";
  return (locale(_Newimp));
  }

 template<class _Facet>
  locale(const locale& _Loc, const _Facet *_Facptr)
   : _Ptr(new _Locimp(*_Loc._Ptr))
  {
  if (_Facptr != 0)
   {
   _Ptr->_Addfac((_Facet *)_Facptr, _Facet::id);
   if (_Facet::_Getcat() != (size_t)(-1))
    {
    _Ptr->_Catmask = 0;
    _Ptr->_Name = "*";
    }
   }
  }

 locale(_Uninitialized)
  {
  }

 locale(const locale& _Right) throw ()
  : _Ptr(_Right._Ptr)
  {
  _Ptr->_Incref();
  }

 locale() throw ()
  : _Ptr(_Init())
  {
  _Getgloballocale()->_Incref();
  }




 locale(const locale& _Loc, const locale& _Other,
  category _Cat)
  : _Ptr(new _Locimp(*_Loc._Ptr))
  {
  try {
  { _Locinfo _Lobj(_Loc._Ptr->_Catmask, _Loc._Ptr->_Name.c_str());
   _Locimp::_Makeloc(_Lobj._Addcats(_Cat & _Other._Ptr->_Catmask,
    _Other._Ptr->_Name.c_str()), _Cat, _Ptr, &_Other);
  }
  } catch (...) {
  delete (_Ptr->_Decref());
  throw;
  }
  }

 explicit locale(const char *_Locname,
  category _Cat = all)
  : _Ptr(new _Locimp)
  {
  try {
  _Init();
  { _Locinfo _Lobj(_Cat, _Locname);
   if (_Badname(_Lobj))
    _Xruntime_error("bad locale name");
   _Locimp::_Makeloc(_Lobj, _Cat, _Ptr, 0);
  }
  } catch (...) {
  delete (_Ptr->_Decref());
  throw;
  }
  }

 locale(const locale& _Loc, const char *_Locname,
  category _Cat)
  : _Ptr(new _Locimp(*_Loc._Ptr))
  {
  try {
  { _Locinfo _Lobj(_Loc._Ptr->_Catmask, _Loc._Ptr->_Name.c_str());
   bool _Hadname = !_Badname(_Lobj);
   _Lobj._Addcats(_Cat, _Locname);

   if (_Hadname && _Badname(_Lobj))
    _Xruntime_error("bad locale name");
   _Locimp::_Makeloc(_Lobj, _Cat, _Ptr, 0);
  }
  } catch (...) {
  delete (_Ptr->_Decref());
  throw;
  }
  }


 explicit locale(const string& _Str,
  category _Cat = all)
  : _Ptr(new _Locimp)
  {
  try {
  _Init();
  _Locinfo _Lobj(_Cat, _Str.c_str());

  if (_Badname(_Lobj))
   _Xruntime_error("bad locale name");
  _Locimp::_Makeloc(_Lobj, _Cat, _Ptr, 0);
  } catch (...) {
  delete (_Ptr->_Decref());
  throw;
  }
  }

 locale(const locale& _Loc, const string& _Str,
  category _Cat)
  : _Ptr(new _Locimp(*_Loc._Ptr))
  {
  try {
  _Locinfo _Lobj(_Loc._Ptr->_Catmask, _Loc._Ptr->_Name.c_str());
  bool _Hadname = !_Badname(_Lobj);
  _Lobj._Addcats(_Cat, _Str.c_str());

  if (_Hadname && _Badname(_Lobj))
   _Xruntime_error("bad locale name");
  _Locimp::_Makeloc(_Lobj, _Cat, _Ptr, 0);
  } catch (...) {
  delete (_Ptr->_Decref());
  throw;
  }
  }




 ~locale() throw ()
  {
  if (_Ptr != 0)
   delete (_Ptr->_Decref());
  }

 locale& operator=(const locale& _Right) throw ()
  {
  if (_Ptr != _Right._Ptr)
   {
   delete (_Ptr->_Decref());
   _Ptr = _Right._Ptr;
   _Ptr->_Incref();
   }
  return (*this);
  }

 string name() const
  {
  return (_Ptr->_Name.c_str());
  }

 const char *c_str() const
  {
  return (_Ptr->_Name.c_str());
  }

 const facet *_Getfacet(size_t _Id) const
  {
  const facet *_Facptr = _Id < _Ptr->_Facetcount
   ? _Ptr->_Facetvec[_Id] : 0;
  if (_Facptr != 0 || !_Ptr->_Xparent)
   return (_Facptr);
  else
   {
   locale::_Locimp *_Ptr = _Getgloballocale();
   return (_Id < _Ptr->_Facetcount
    ? _Ptr->_Facetvec[_Id]
    : 0);
   }
  }

 bool operator==(const locale& _Loc) const
  {
  return (_Ptr == _Loc._Ptr
   || name().compare("*") != 0 && name().compare(_Loc.name()) == 0);
  }

 bool operator!=(const locale& _Right) const
  {
  return (!(*this == _Right));
  }

 static const locale& classic();

 static locale global(const locale&);

 static locale empty();

private:
 locale(_Locimp *_Ptrimp)
  : _Ptr(_Ptrimp)
  {
  }

 static _Locimp *_Init();
 static _Locimp *_Getgloballocale();
 static void _Setgloballocale(void *);

 bool _Badname(const _Locinfo& _Lobj)
  {
  return (:: strcmp(_Lobj._Getname(), "*") == 0);
  }

 _Locimp *_Ptr;
 };


template<class _Facet>
 struct _Facetptr
 {
 static const locale::facet *_Psave;
 };

template<class _Facet>
 const locale::facet *_Facetptr<_Facet>::
  _Psave = 0;






template<class _Facet> inline
 const _Facet& use_facet(const locale& _Loc)

 {
 {
  const locale::facet *_Psave =
   _Facetptr<_Facet>::_Psave;

  size_t _Id = _Facet::id;
  const locale::facet *_Pf = _Loc._Getfacet(_Id);

  if (_Pf != 0)
   ;
  else if (_Psave != 0)
   _Pf = _Psave;
  else if (_Facet::_Getcat(&_Psave, &_Loc) == (size_t)(-1))


   throw ::std:: bad_cast();





  else
   {
   _Pf = _Psave;
   _Facetptr<_Facet>::_Psave = _Psave;

   locale::facet *_Pfmod = (_Facet *)_Psave;
   _Pfmod->_Incref();
   _Pfmod->_Register();
   }

  return ((const _Facet&)(*_Pf));
 }
 }


template<class _Elem,
 class _InIt> inline
 int _Getloctxt(_InIt& _First, _InIt& _Last, size_t _Numfields,
  const _Elem *_Ptr)
 {
 for (size_t _Off = 0; _Ptr[_Off] != (_Elem)0; ++_Off)
  if (_Ptr[_Off] == _Ptr[0])
   ++_Numfields;
 string _Str(_Numfields, '\0');

 int _Ans = -2;
 for (size_t _Column = 1; ; ++_Column, ++_First, _Ans = -1)
  {
  bool _Prefix = false;
  size_t _Off = 0;
  size_t _Field = 0;

  for (; _Field < _Numfields; ++_Field)
   {
   for (; _Ptr[_Off] != (_Elem)0 && _Ptr[_Off] != _Ptr[0]; ++_Off)
    ;

   if (_Str[_Field] != '\0')
    _Off += _Str[_Field];
   else if (_Ptr[_Off += _Column] == _Ptr[0]
    || _Ptr[_Off] == (_Elem)0)
    {
    _Str[_Field] = (char)(_Column < 127
     ? _Column : 127);
    _Ans = (int)_Field;
    }
   else if (_First == _Last || _Ptr[_Off] != *_First)
    _Str[_Field] = (char)(_Column < 127
     ? _Column : 127);
   else
    _Prefix = true;
   }

  if (!_Prefix || _First == _Last)
   break;
  }
 return (_Ans);
 }





template<class _Elem> inline
 char _Maklocbyte(_Elem _Char,
  const _Locinfo::_Cvtvec&)
 {
 return ((char)(unsigned char)_Char);
 }

template<> inline
 char _Maklocbyte(wchar_t _Char,
  const _Locinfo::_Cvtvec& _Cvt)
 {
 char _Byte = '\0';
 _Mbstatet _Mbst1 = {0, 0};
 _Wcrtomb(&_Byte, _Char, &_Mbst1, &_Cvt);
 return (_Byte);
 }





template<class _Elem> inline
 _Elem _Maklocchr(char _Byte, _Elem *,
  const _Locinfo::_Cvtvec&)
 {
 return ((_Elem)(unsigned char)_Byte);
 }

template<> inline
 wchar_t _Maklocchr(char _Byte, wchar_t *,
  const _Locinfo::_Cvtvec& _Cvt)
 {
 wchar_t _Wc = L'\0';
 _Mbstatet _Mbst1 = {0, 0};
 _Mbrtowc(&_Wc, &_Byte, 1, &_Mbst1, &_Cvt);
 return (_Wc);
 }





template<class _Elem> inline
 _Elem *_Maklocstr(const char *_Ptr, _Elem *,
  const _Locinfo::_Cvtvec&)
 {
 size_t _Count = :: strlen(_Ptr) + 1;
 _Elem *_Ptrdest = new _Elem[_Count];

 for (_Elem *_Ptrnext = _Ptrdest; 0 < _Count; --_Count, ++_Ptrnext, ++_Ptr)
  *_Ptrnext = (_Elem)(unsigned char)*_Ptr;
 return (_Ptrdest);
 }

template<> inline
 wchar_t *_Maklocstr(const char *_Ptr, wchar_t *,
  const _Locinfo::_Cvtvec& _Cvt)
 {
 size_t _Count, _Count1;
 size_t _Wchars;
 const char *_Ptr1;
 int _Bytes;
 wchar_t _Wc;
 _Mbstatet _Mbst1 = {0, 0};

 _Count1 = :: strlen(_Ptr) + 1;
 for (_Count = _Count1, _Wchars = 0, _Ptr1 = _Ptr; 0 < _Count;
  _Count -= _Bytes, _Ptr1 += _Bytes, ++_Wchars)
  if ((_Bytes = _Mbrtowc(&_Wc, _Ptr1, _Count, &_Mbst1, &_Cvt)) <= 0)
   break;
 ++_Wchars;

 wchar_t *_Ptrdest = new wchar_t[_Wchars];
 wchar_t *_Ptrnext = _Ptrdest;
 _Mbstatet _Mbst2 = {0, 0};

 for (; 0 < _Wchars;
  _Count -= _Bytes, _Ptr += _Bytes, --_Wchars, ++_Ptrnext)
  if ((_Bytes = _Mbrtowc(_Ptrnext, _Ptr, _Count1, &_Mbst2, &_Cvt)) <= 0)
   break;
 *_Ptrnext = L'\0';
 return (_Ptrdest);
 }



class codecvt_base
 : public locale::facet
 {
public:
 enum
  {
  ok, partial, error, noconv};
 typedef int result;

 codecvt_base(size_t _Refs = 0)
  : locale::facet(_Refs)
  {
  }

 bool always_noconv() const throw ()
  {
  return (do_always_noconv());
  }

 int max_length() const throw ()
  {
  return (do_max_length());
  }

 int encoding() const throw ()
  {
  return (do_encoding());
  }

 ~codecvt_base()
  {
  }

protected:
 virtual bool do_always_noconv() const throw ()
  {
  return (true);
  }

 virtual int do_max_length() const throw ()
  {
  return (1);
  }

 virtual int do_encoding() const throw ()
  {
  return (1);
  }
 };


template<class _Elem,
 class _Byte,
 class _Statype>
 class codecvt
  : public codecvt_base
 {
public:
 typedef _Elem intern_type;
 typedef _Byte extern_type;
 typedef _Statype state_type;

 result in(_Statype& _State,
  const _Byte *_First1, const _Byte *_Last1, const _Byte *& _Mid1,
  _Elem *_First2, _Elem *_Last2, _Elem *& _Mid2) const
  {
  return (do_in(_State,
   _First1, _Last1, _Mid1, _First2, _Last2, _Mid2));
  }

 result out(_Statype& _State,
  const _Elem *_First1, const _Elem *_Last1, const _Elem *& _Mid1,
  _Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
  {
  return (do_out(_State,
   _First1, _Last1, _Mid1, _First2, _Last2, _Mid2));
  }

 result unshift(_Statype& _State,
  _Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
  {
  return (do_unshift(_State, _First2, _Last2, _Mid2));
  }

 int length(const _Statype& _State, const _Byte *_First1,
  const _Byte *_Last1, size_t _Count) const
  {
  return (do_length(_State, _First1, _Last1, _Count));
  }

 static locale::id id;

 explicit codecvt(size_t _Refs = 0)
  : codecvt_base(_Refs)
  {
  _Init(_Locinfo());
  }

 codecvt(const _Locinfo& _Lobj, size_t _Refs = 0)
  : codecvt_base(_Refs)
  {
  _Init(_Lobj);
  }

 static size_t _Getcat(const locale::facet **_Ppf = 0,
  const locale *_Ploc = 0)
  {
  if (_Ppf != 0 && *_Ppf == 0)
   *_Ppf = new codecvt<_Elem, _Byte, _Statype>(
    _Locinfo(_Ploc->c_str()));
  return (2);
  }

protected:
 virtual ~codecvt()
  {
  }

 void _Init(const _Locinfo&)
  {
  }

 virtual result do_in(_Statype&,
  const _Byte *_First1, const _Byte *, const _Byte *& _Mid1,
  _Elem *_First2, _Elem *, _Elem *& _Mid2) const
  {
  _Mid1 = _First1, _Mid2 = _First2;
  return (noconv);
  }

 virtual result do_out(_Statype&,
  const _Elem *_First1, const _Elem *, const _Elem *& _Mid1,
  _Byte *_First2, _Byte *, _Byte *& _Mid2) const
  {
  _Mid1 = _First1, _Mid2 = _First2;
  return (noconv);
  }

 virtual result do_unshift(_Statype&,
  _Byte *_First2, _Byte *, _Byte *&_Mid2) const
  {
  _Mid2 = _First2;
  return (noconv);
  }

 virtual int do_length(const _Statype&, const _Byte *_First1,
  const _Byte *_Last1, size_t _Count) const
  {
  return ((int)(_Count < (size_t)(_Last1 - _First1)
   ? _Count : _Last1 - _First1));
  }
 };


template<class _Elem,
 class _Byte,
 class _Statype>
 locale::id codecvt<_Elem, _Byte, _Statype>::id;



enum _Codecvt_mode {
 _Consume_header = 4,
 _Generate_header = 2
 };


template<>
 class codecvt<char16_t, char, _Mbstatet>
 : public codecvt_base
 {
public:
 typedef codecvt<char16_t, char, _Mbstatet> _Mybase;
 typedef char16_t _Elem;
 typedef char _Byte;
 typedef _Mbstatet _Statype;
 typedef _Elem intern_type;
 typedef _Byte extern_type;
 typedef _Statype state_type;

 result in(_Statype& _State,
  const _Byte *_First1, const _Byte *_Last1, const _Byte *& _Mid1,
  _Elem *_First2, _Elem *_Last2, _Elem *& _Mid2) const
  {
  return (do_in(_State,
   _First1, _Last1, _Mid1, _First2, _Last2, _Mid2));
  }

 result out(_Statype& _State,
  const _Elem *_First1, const _Elem *_Last1, const _Elem *& _Mid1,
  _Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
  {
  return (do_out(_State,
   _First1, _Last1, _Mid1, _First2, _Last2, _Mid2));
  }

 result unshift(_Statype& _State,
  _Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
  {
  return (do_unshift(_State,
   _First2, _Last2, _Mid2));
  }

 int length(const _Statype& _State, const _Byte *_First1,
  const _Byte *_Last1, size_t _Count) const
  {
  return (do_length(_State, _First1, _Last1, _Count));
  }

 static locale::id id;

 explicit codecvt(size_t _Refs = 0)
  : codecvt_base(_Refs), _Maxcode(0x10ffff), _Mode(_Consume_header)
  {
  { _Locinfo _Lobj;
   _Init(_Lobj);
  }
  }

 codecvt(const _Locinfo& _Lobj, size_t _Refs = 0)
  : codecvt_base(_Refs), _Maxcode(0x10ffff), _Mode(_Consume_header)
  {
  _Init(_Lobj);
  }

 codecvt(const _Locinfo& _Lobj, unsigned long _Maxcode_arg,
  _Codecvt_mode _Mode_arg, size_t _Refs = 0)
  : codecvt_base(_Refs), _Maxcode(_Maxcode_arg), _Mode(_Mode_arg)
  {
  _Init(_Lobj);
  }

 static size_t _Getcat(const locale::facet **_Ppf = 0,
  const locale *_Ploc = 0)
  {
  if (_Ppf != 0 && *_Ppf == 0)
   *_Ppf = new codecvt<_Elem, _Byte, _Statype>(
    _Locinfo(_Ploc->c_str()));
  return (2);
  }

protected:
 virtual ~codecvt()
  {
  }

 void _Init(const _Locinfo&)
  {
  }

 virtual result do_in(_Statype& _State,
  const _Byte *_First1, const _Byte *_Last1, const _Byte *& _Mid1,
  _Elem *_First2, _Elem *_Last2, _Elem *& _Mid2) const
  {
  unsigned short *_Pstate = (unsigned short *)&_State;
  _Mid1 = _First1;
  _Mid2 = _First2;

  for (; _Mid1 != _Last1 && _Mid2 != _Last2; )
   {
   unsigned char _By = (unsigned char)*_Mid1;
   unsigned long _Ch;
   int _Nextra, _Nskip;

   if (*_Pstate <= 1)
    ;
   else if (_By < 0x80 || 0xc0 <= _By)
    return (_Mybase::error);
   else
    {
    ++_Mid1;
    *_Mid2++ = (_Elem)(*_Pstate | _By & 0x3f);
    *_Pstate = 1;
    continue;
    }

   if (_By < 0x80)
    _Ch = _By, _Nextra = 0;
   else if (_By < 0xc0)
    {
    ++_Mid1;
    return (_Mybase::error);
    }
   else if (_By < 0xe0)
    _Ch = _By & 0x1f, _Nextra = 1;
   else if (_By < 0xf0)
    _Ch = _By & 0x0f, _Nextra = 2;
   else if (_By < 0xf8)
    _Ch = _By & 0x07, _Nextra = 3;
   else
    _Ch = _By & 0x03, _Nextra = _By < 0xfc ? 4 : 5;

   _Nskip = _Nextra < 3 ? 0 : 1;
   _First1 = _Mid1;

   if (_Nextra == 0)
    ++_Mid1;
   else if (_Last1 - _Mid1 < _Nextra + 1 - _Nskip)
    break;
   else
    for (++_Mid1; _Nskip < _Nextra; --_Nextra, ++_Mid1)
     if ((_By = (unsigned char)*_Mid1) < 0x80 || 0xc0 <= _By)
      return (_Mybase::error);
     else
      _Ch = _Ch << 6 | _By & 0x3f;
   if (0 < _Nskip)
    _Ch <<= 6;

   if ((_Maxcode < 0x10ffff ? _Maxcode : 0x10ffff) < _Ch)
    return (_Mybase::error);
   else if (0xffff < _Ch)
    {
    unsigned short _Ch0 =
     (unsigned short)(0xd800 | (_Ch >> 10) - 0x0040);

    *_Mid2++ = (_Elem)_Ch0;
    *_Pstate = (unsigned short)(0xdc00 | _Ch & 0x03ff);
    continue;
    }

   if (_Nskip == 0)
    ;
   else if (_Mid1 == _Last1)
    {
    _Mid1 = _First1;
    break;
    }
   else if ((_By = (unsigned char)*_Mid1++) < 0x80 || 0xc0 <= _By)
    return (_Mybase::error);
   else
    _Ch |= _By & 0x3f;

   if (*_Pstate == 0)
    {
    *_Pstate = 1;

    if ((_Mode & _Consume_header) != 0 && _Ch == 0xfeff)
     {
     result _Ans = do_in(_State, _Mid1, _Last1, _Mid1,
      _First2, _Last2, _Mid2);

     if (_Ans == _Mybase::partial)
      {
      *_Pstate = 0;
      _Mid1 = _First1;
      }
     return (_Ans);
     }
    }

   *_Mid2++ = (_Elem)_Ch;
   }

  return (_First1 == _Mid1 ? _Mybase::partial : _Mybase::ok);
  }

 virtual result do_out(_Statype& _State,
  const _Elem *_First1, const _Elem *_Last1, const _Elem *& _Mid1,
  _Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
  {
  unsigned short *_Pstate = (unsigned short *)&_State;
  _Mid1 = _First1;
  _Mid2 = _First2;

  for (; _Mid1 != _Last1 && _Mid2 != _Last2; )
   {
   unsigned long _Ch;
   unsigned short _Ch1 = (unsigned short)*_Mid1;
   bool _Save = false;

   if (1 < *_Pstate)
    {
    if (_Ch1 < 0xdc00 || 0xe000 <= _Ch1)
     return (_Mybase::error);
    _Ch = (*_Pstate << 10) | (_Ch1 - 0xdc00);
    }
   else if (0xd800 <= _Ch1 && _Ch1 < 0xdc00)
    {
    _Ch = (_Ch1 - 0xd800 + 0x0040) << 10;
    _Save = true;
    }
   else
    _Ch = _Ch1;

   _Byte _By;
   int _Nextra;

   if (_Ch < 0x0080)
    _By = (_Byte)_Ch, _Nextra = 0;
   else if (_Ch < 0x0800)
    _By = (_Byte)(0xc0 | _Ch >> 6), _Nextra = 1;
   else if (_Ch < 0x10000)
    _By = (_Byte)(0xe0 | _Ch >> 12), _Nextra = 2;
   else
    _By = (_Byte)(0xf0 | _Ch >> 18), _Nextra = 3;

   int _Nput = _Nextra < 3 ? _Nextra + 1 : _Save ? 1 : 3;

   if (_Last2 - _Mid2 < _Nput)
    break;
   else if (*_Pstate != 0 || (_Mode & _Generate_header) == 0)
    ;
   else if (_Last2 - _Mid2 < 3 + _Nput)
    break;
   else
    {
    *_Mid2++ = (_Byte)(unsigned char)0xef;
    *_Mid2++ = (_Byte)(unsigned char)0xbb;
    *_Mid2++ = (_Byte)(unsigned char)0xbf;
    }

   ++_Mid1;
   if (_Save || _Nextra < 3)
    {
    *_Mid2++ = _By;
    --_Nput;
    }
   for (; 0 < _Nput; --_Nput)
    *_Mid2++ = (_Byte)(_Ch >> 6 * --_Nextra & 0x3f | 0x80);

   *_Pstate = (unsigned short)(_Save ? _Ch >> 10 : 1);
   }

  return (_First1 == _Mid1 ? _Mybase::partial : _Mybase::ok);
  }

 virtual result do_unshift(_Statype& _State,
  _Byte *_First2, _Byte *, _Byte *& _Mid2) const
  {
  unsigned short *_Pstate = (unsigned short *)&_State;
  _Mid2 = _First2;

  return (1 < *_Pstate
   ? _Mybase::error : _Mybase::ok);
  }

 virtual int do_length(const _Statype& _State, const _Byte *_First1,
  const _Byte *_Last1, size_t _Count) const throw ()
  {
  size_t _Wchars = 0;
  _Statype _Mystate = _State;

  for (; _Wchars < _Count && _First1 != _Last1; )
   {
   const _Byte *_Mid1;
   _Elem *_Mid2;
   _Elem _Ch;

   switch (do_in(_Mystate, _First1, _Last1, _Mid1,
    &_Ch, &_Ch + 1, _Mid2))
    {
   case _Mybase::noconv:
    return ((int)(_Wchars + (_Last1 - _First1)));

   case _Mybase::ok:
    if (_Mid2 == &_Ch + 1)
     ++_Wchars;
    _First1 = _Mid1;
    break;

   default:
    return ((int)_Wchars);
    }
   }

  return ((int)_Wchars);
  }

 virtual bool do_always_noconv() const throw ()
  {
  return (false);
  }

 virtual int do_max_length() const throw ()
  {
  return ((_Mode & _Consume_header) != 0 ? 9
   : (_Mode & _Generate_header) != 0 ? 7
   : 6);
  }

 virtual int do_encoding() const throw ()
  {
  return (0);
  }

private:
 unsigned long _Maxcode;
 _Codecvt_mode _Mode;
 };


template<>
 class codecvt<char32_t, char, _Mbstatet>
 : public codecvt_base
 {
public:
 typedef codecvt<char32_t, char, _Mbstatet> _Mybase;
 typedef char32_t _Elem;
 typedef char _Byte;
 typedef _Mbstatet _Statype;
 typedef _Elem intern_type;
 typedef _Byte extern_type;
 typedef _Statype state_type;

 result in(_Statype& _State,
  const _Byte *_First1, const _Byte *_Last1, const _Byte *& _Mid1,
  _Elem *_First2, _Elem *_Last2, _Elem *& _Mid2) const
  {
  return (do_in(_State,
   _First1, _Last1, _Mid1, _First2, _Last2, _Mid2));
  }

 result out(_Statype& _State,
  const _Elem *_First1, const _Elem *_Last1, const _Elem *& _Mid1,
  _Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
  {
  return (do_out(_State,
   _First1, _Last1, _Mid1, _First2, _Last2, _Mid2));
  }

 result unshift(_Statype& _State,
  _Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
  {
  return (do_unshift(_State,
   _First2, _Last2, _Mid2));
  }

 int length(const _Statype& _State, const _Byte *_First1,
  const _Byte *_Last1, size_t _Count) const
  {
  return (do_length(_State, _First1, _Last1, _Count));
  }

 static locale::id id;

 explicit codecvt(size_t _Refs = 0)
  : codecvt_base(_Refs), _Maxcode(0xffffffff), _Mode(_Consume_header)
  {
  { _Locinfo _Lobj;
   _Init(_Lobj);
  }
  }

 codecvt(const _Locinfo& _Lobj, size_t _Refs = 0)
  : codecvt_base(_Refs), _Maxcode(0xffffffff), _Mode(_Consume_header)
  {
  _Init(_Lobj);
  }

 codecvt(const _Locinfo& _Lobj, unsigned long _Maxcode_arg,
  _Codecvt_mode _Mode_arg, size_t _Refs = 0)
  : codecvt_base(_Refs), _Maxcode(_Maxcode_arg), _Mode(_Mode_arg)
  {
  _Init(_Lobj);
  }

 static size_t _Getcat(const locale::facet **_Ppf = 0,
  const locale *_Ploc = 0)
  {
  if (_Ppf != 0 && *_Ppf == 0)
   *_Ppf = new codecvt<_Elem, _Byte, _Statype>(
    _Locinfo(_Ploc->c_str()));
  return (2);
  }

protected:
 virtual ~codecvt()
  {
  }

 void _Init(const _Locinfo&)
  {
  }

 virtual result do_in(_Statype& _State,
  const _Byte *_First1, const _Byte *_Last1, const _Byte *& _Mid1,
  _Elem *_First2, _Elem *_Last2, _Elem *& _Mid2) const
  {
  char *_Pstate = (char *)&_State;
  _Mid1 = _First1;
  _Mid2 = _First2;

  for (; _Mid1 != _Last1 && _Mid2 != _Last2; )
   {
   unsigned char _By = (unsigned char)*_Mid1;
   unsigned long _Ch;
   int _Nextra;

   if (_By < 0x80)
    _Ch = _By, _Nextra = 0;
   else if (_By < 0xc0)
    {
    ++_Mid1;
    return (_Mybase::error);
    }
   else if (_By < 0xe0)
    _Ch = _By & 0x1f, _Nextra = 1;
   else if (_By < 0xf0)
    _Ch = _By & 0x0f, _Nextra = 2;
   else if (_By < 0xf8)
    _Ch = _By & 0x07, _Nextra = 3;
   else
    _Ch = _By & 0x03, _Nextra = _By < 0xfc ? 4 : 5;

   if (_Nextra == 0)
    ++_Mid1;
   else if (_Last1 - _Mid1 < _Nextra + 1)
    break;
   else
    for (++_Mid1; 0 < _Nextra; --_Nextra, ++_Mid1)
     if ((_By = (unsigned char)*_Mid1) < 0x80 || 0xc0 <= _By)
      return (_Mybase::error);
     else
      _Ch = _Ch << 6 | _By & 0x3f;

   if (*_Pstate == 0)
    {
    *_Pstate = 1;

    if ((_Mode & _Consume_header) != 0 && _Ch == 0xfeff)
     {
     result _Ans = do_in(_State, _Mid1, _Last1, _Mid1,
      _First2, _Last2, _Mid2);

     if (_Ans == _Mybase::partial)
      {
      *_Pstate = 0;
      _Mid1 = _First1;
      }
     return (_Ans);
     }
    }

   if (_Maxcode < _Ch)
    return (_Mybase::error);
   *_Mid2++ = (_Elem)_Ch;
   }

  return (_First1 == _Mid1 ? _Mybase::partial : _Mybase::ok);
  }

 virtual result do_out(_Statype& _State,
  const _Elem *_First1, const _Elem *_Last1, const _Elem *& _Mid1,
  _Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
  {
  char *_Pstate = (char *)&_State;
  _Mid1 = _First1;
  _Mid2 = _First2;

  for (; _Mid1 != _Last1 && _Mid2 != _Last2; )
   {
   _Byte _By;
   int _Nextra;
   unsigned long _Ch = (unsigned long)*_Mid1;

   if (_Maxcode < _Ch)
    return (_Mybase::error);

   if (_Ch < 0x0080)
    _By = (_Byte)_Ch, _Nextra = 0;
   else if (_Ch < 0x0800)
    _By = (_Byte)(0xc0 | _Ch >> 6), _Nextra = 1;
   else if (_Ch < 0x00010000)
    _By = (_Byte)(0xe0 | _Ch >> 12), _Nextra = 2;
   else if (_Ch < 0x00200000)
    _By = (_Byte)(0xf0 | _Ch >> 18), _Nextra = 3;
   else if (_Ch < 0x04000000)
    _By = (_Byte)(0xf8 | _Ch >> 24), _Nextra = 4;
   else
    _By = (_Byte)(0xfc | _Ch >> 30 & 0x03), _Nextra = 5;

   if (*_Pstate == 0)
    {
    *_Pstate = 1;
    if ((_Mode & _Generate_header) == 0)
     ;
    else if (_Last2 - _Mid2 < 3 + 1 + _Nextra)
     return (_Mybase::partial);
    else
     {
     *_Mid2++ = (_Byte)(unsigned char)0xef;
     *_Mid2++ = (_Byte)(unsigned char)0xbb;
     *_Mid2++ = (_Byte)(unsigned char)0xbf;
     }
    }

   if (_Last2 - _Mid2 < 1 + _Nextra)
    break;

   ++_Mid1;
   for (*_Mid2++ = _By; 0 < _Nextra; )
    *_Mid2++ = (_Byte)(_Ch >> 6 * --_Nextra & 0x3f | 0x80);
   }
  return (_First1 == _Mid1 ? _Mybase::partial : _Mybase::ok);
  }

 virtual result do_unshift(_Statype&,
  _Byte *_First2, _Byte *, _Byte *& _Mid2) const
  {
  _Mid2 = _First2;
  return (_Mybase::ok);
  }

 virtual int do_length(const _Statype& _State, const _Byte *_First1,
  const _Byte *_Last1, size_t _Count) const throw ()
  {
  int _Wchars = 0;
  _Statype _Mystate = _State;

  for (; (size_t)_Wchars < _Count && _First1 != _Last1; )
   {
   const _Byte *_Mid1;
   _Elem *_Mid2;
   _Elem _Ch;

   switch (do_in(_Mystate, _First1, _Last1, _Mid1,
    &_Ch, &_Ch + 1, _Mid2))
    {
   case _Mybase::noconv:
    return ((int)(_Wchars + (int)(_Last1 - _First1)));

   case _Mybase::ok:
    if (_Mid2 == &_Ch + 1)
     ++_Wchars;
    _First1 = _Mid1;
    break;

   default:
    return ((int)_Wchars);
    }
   }

  return ((int)_Wchars);
  }

 virtual bool do_always_noconv() const throw ()
  {
  return (false);
  }

 virtual int do_max_length() const throw ()
  {
  return ((_Mode & (_Consume_header | _Generate_header)) != 0
   ? 9 : 6);
  }

 virtual int do_encoding() const throw ()
  {
  return ((_Mode & (_Consume_header | _Generate_header)) != 0
   ? -1 : 0);
  }

private:
 unsigned long _Maxcode;
 _Codecvt_mode _Mode;
 };



template<>
 class codecvt<wchar_t, char, _Mbstatet>
 : public codecvt_base
 {
public:
 typedef wchar_t _Elem;
 typedef char _Byte;
 typedef _Mbstatet _Statype;
 typedef _Elem intern_type;
 typedef _Byte extern_type;
 typedef _Statype state_type;

 result in(_Statype& _State,
  const _Byte *_First1, const _Byte *_Last1, const _Byte *& _Mid1,
  _Elem *_First2, _Elem *_Last2, _Elem *& _Mid2) const
  {
  return (do_in(_State,
   _First1, _Last1, _Mid1, _First2, _Last2, _Mid2));
  }

 result out(_Statype& _State,
  const _Elem *_First1, const _Elem *_Last1, const _Elem *& _Mid1,
  _Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
  {
  return (do_out(_State,
   _First1, _Last1, _Mid1, _First2, _Last2, _Mid2));
  }

 result unshift(_Statype& _State,
  _Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
  {
  return (do_unshift(_State,
   _First2, _Last2, _Mid2));
  }

 int length(const _Statype& _State, const _Byte *_First1,
  const _Byte *_Last1, size_t _Count) const
  {
  return (do_length(_State, _First1, _Last1, _Count));
  }

 static locale::id id;

 explicit codecvt(size_t _Refs = 0)
  : codecvt_base(_Refs)
  {
  { _Locinfo _Lobj;
   _Init(_Lobj);
  }
  }

 codecvt(const _Locinfo& _Lobj, size_t _Refs = 0)
  : codecvt_base(_Refs)
  {
  _Init(_Lobj);
  }

 static size_t _Getcat(const locale::facet **_Ppf = 0,
  const locale *_Ploc = 0)
  {
  if (_Ppf != 0 && *_Ppf == 0)
   *_Ppf = new codecvt<_Elem, _Byte, _Statype>(
    _Locinfo(_Ploc->c_str()));
  return (2);
  }

protected:
 virtual ~codecvt()
  {
  }

 void _Init(const _Locinfo& _Lobj)
  {
  _Cvt = _Lobj._Getcvt();
  }

 virtual result do_in(_Statype& _State,
  const _Byte *_First1, const _Byte *_Last1, const _Byte *& _Mid1,
   _Elem *_First2, _Elem *_Last2, _Elem *& _Mid2) const
  {
  ;
  ;
  _Mid1 = _First1, _Mid2 = _First2;
  result _Ans = _Mid1 == _Last1 ? ok : partial;
  int _Bytes;

  while (_Mid1 != _Last1 && _Mid2 != _Last2)
   switch (_Bytes = _Mbrtowc(_Mid2, _Mid1, _Last1 - _Mid1,
    &_State, &_Cvt))
   {
   case -2:
    _Mid1 = _Last1;
    return (_Ans);

   case -1:
    return (error);

   case 0:
    if (*_Mid2 == (_Elem)0)
     _Bytes = (int):: strlen(_Mid1) + 1;


   default:
    if (_Bytes == -3)
     _Bytes = 0;
    _Mid1 += _Bytes;
    ++_Mid2;
    _Ans = ok;
   }
  return (_Ans);
  }

 virtual result do_out(_Statype& _State,
  const _Elem *_First1, const _Elem *_Last1, const _Elem *& _Mid1,
   _Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
  {
  ;
  ;
  _Mid1 = _First1, _Mid2 = _First2;
  result _Ans = _Mid1 == _Last1 ? ok : partial;
  int _Bytes;

  while (_Mid1 != _Last1 && _Mid2 != _Last2)
   if ((int):: _Getmbcurmax() <= _Last2 - _Mid2)
    if ((_Bytes = _Wcrtomb(_Mid2, *_Mid1,
     &_State, &_Cvt)) < 0)
     return (error);
    else
     ++_Mid1, _Mid2 += _Bytes, _Ans = ok;
   else
    {
    _Byte _Buf[1];
    _Statype _Stsave = _State;

    if ((_Bytes = _Wcrtomb(_Buf, *_Mid1,
     &_State, &_Cvt)) < 0)
     return (error);
    else if (_Last2 - _Mid2 < _Bytes)
     {
     _State = _Stsave;
     return (_Ans);
     }
    else
     {
     :: memcpy(_Mid2, _Buf, _Bytes);
     ++_Mid1, _Mid2 += _Bytes, _Ans = ok;
     }
    }
  return (_Ans);
  }

 virtual result do_unshift(_Statype& _State,
  _Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
  {
  ;
  _Mid2 = _First2;
  result _Ans = ok;
  int _Bytes;
  _Byte _Buf[1];
  _Statype _Stsave = _State;

  if ((_Bytes = _Wcrtomb(_Buf, L'\0', &_State, &_Cvt)) <= 0)
   _Ans = error;
  else if (_Last2 - _Mid2 < --_Bytes)
   {
   _State = _Stsave;
   _Ans = partial;
   }
  else if (0 < _Bytes)
   {
   :: memcpy(_Mid2, _Buf, _Bytes);
   _Mid2 += _Bytes;
   }
  return (_Ans);
  }

 virtual int do_length(const _Statype& _State, const _Byte *_First1,
  const _Byte *_Last1, size_t _Count) const
  {





  ;
  int _Wchars;
  const _Byte *_Mid1;
  _Statype _Mystate = _State;

  for (_Wchars = 0, _Mid1 = _First1;
   (size_t)_Wchars < _Count && _Mid1 != _Last1; )
   {
   int _Bytes;
   _Elem _Ch;

   switch (_Bytes = _Mbrtowc(&_Ch, _Mid1, _Last1 - _Mid1,
    &_Mystate, &_Cvt))
    {
   case -2:
    return (_Wchars);

   case -1:
    return (_Wchars);

   case 0:
    if (_Ch == (_Elem)0)
     _Bytes = (int):: strlen(_Mid1) + 1;


   default:
    if (_Bytes == -3)
     _Bytes = 0;
    _Mid1 += _Bytes;
    ++_Wchars;
    }
   }
  return (_Wchars);

  }

 virtual bool do_always_noconv() const throw ()
  {
  return (false);
  }

 virtual int do_max_length() const throw ()
  {
  return (1);
  }

 virtual int do_encoding() const throw ()
  {
  return (0);
  }

private:
 _Locinfo::_Cvtvec _Cvt;
 };


template<class _Elem,
 class _Byte,
 class _Statype>
 class codecvt_byname
  : public codecvt<_Elem, _Byte, _Statype>
 {
public:
 explicit codecvt_byname(const char *_Locname, size_t _Refs = 0)
  : codecvt<_Elem, _Byte, _Statype>(_Locinfo(_Locname), _Refs)
  {
  }


 explicit codecvt_byname(const string& _Str, size_t _Refs = 0)
  : codecvt<_Elem, _Byte, _Statype>(_Locinfo(_Str.c_str()), _Refs)
  {
  }


protected:
 virtual ~codecvt_byname()
  {
  }
 };



struct ctype_base
 : public locale::facet
 {
 enum
  {
  alnum = 0x20|0x10|0x02|0x200, alpha = 0x10|0x02|0x200,
  cntrl = 0x80, digit = 0x20, graph = 0x20|0x10|0x08|0x02|0x200,
  lower = 0x10, print = 0x20|0x10|0x08|0x04|0x02|0x200|0x01,
  punct = 0x08, space = 0x40|0x04|0x100, upper = 0x02,
  xdigit = 0x01};
 typedef short mask;

 ctype_base(size_t _Refs = 0)
  : locale::facet(_Refs)
  {
  }

 ~ctype_base()
  {
  }
 };


template<class _Elem>
 class ctype
  : public ctype_base
 {
public:
 typedef _Elem char_type;

 bool is(mask _Maskval, _Elem _Ch) const
  {
  return (do_is(_Maskval, _Ch));
  }

 const _Elem *is(const _Elem *_First, const _Elem *_Last,
  mask *_Dest) const
  {
  return (do_is(_First, _Last, _Dest));
  }

 const _Elem *scan_is(mask _Maskval, const _Elem *_First,
  const _Elem *_Last) const
  {
  return (do_scan_is(_Maskval, _First, _Last));
  }

 const _Elem *scan_not(mask _Maskval, const _Elem *_First,
  const _Elem *_Last) const
  {
  return (do_scan_not(_Maskval, _First, _Last));
  }

 _Elem tolower(_Elem _Ch) const
  {
  return (do_tolower(_Ch));
  }

 const _Elem *tolower(_Elem *_First, const _Elem *_Last) const
  {
  return (do_tolower(_First, _Last));
  }

 _Elem toupper(_Elem _Ch) const
  {
  return (do_toupper(_Ch));
  }

 const _Elem *toupper(_Elem *_First, const _Elem *_Last) const
  {
  return (do_toupper(_First, _Last));
  }

 _Elem widen(char _Byte) const
  {
  return (do_widen(_Byte));
  }

 const char *widen(const char *_First, const char *_Last,
  _Elem *_Dest) const
  {
  return (do_widen(_First, _Last, _Dest));
  }

 char narrow(_Elem _Ch, char _Dflt = '\0') const
  {
  return (do_narrow(_Ch, _Dflt));
  }

 const _Elem *narrow(const _Elem *_First, const _Elem *_Last,
  char _Dflt, char *_Dest) const
  {
  return (do_narrow(_First, _Last, _Dflt, _Dest));
  }

 static locale::id id;

 explicit ctype(size_t _Refs = 0)
  : ctype_base(_Refs)
  {
  { _Locinfo _Lobj;
   _Init(_Lobj);
  }
  }

 ctype(const _Locinfo& _Lobj, size_t _Refs = 0)
  : ctype_base(_Refs)
  {
  _Init(_Lobj);
  }

 static size_t _Getcat(const locale::facet **_Ppf = 0,
  const locale *_Ploc = 0)
  {
  if (_Ppf != 0 && *_Ppf == 0)
   *_Ppf = new ctype<_Elem>(
    _Locinfo(_Ploc->c_str()));
  return (2);
  }

protected:
 virtual ~ctype()
  {
  if (_Ctype._Delfl)
   free((void *)_Ctype._Table);
  }

 void _Init(const _Locinfo& _Lobj)
  {
  _Ctype = _Lobj._Getctype();
  }

 virtual bool do_is(mask _Maskval, _Elem _Ch) const
  {
  return ((_Ctype._Table[(unsigned char)narrow(_Ch)]
   & _Maskval) != 0);
  }

 virtual const _Elem *do_is(const _Elem *_First, const _Elem *_Last,
  mask *_Dest) const
  {
  ;
  ;
  for (; _First != _Last; ++_First, ++_Dest)
   *_Dest = _Ctype._Table[(unsigned char)narrow(*_First)];
  return (_First);
  }

 virtual const _Elem *do_scan_is(mask _Maskval,
  const _Elem *_First, const _Elem *_Last) const
  {
  ;
  for (; _First != _Last && !is(_Maskval, *_First); ++_First)
   ;
  return (_First);
  }

 virtual const _Elem *do_scan_not(mask _Maskval,
  const _Elem *_First, const _Elem *_Last) const
  {
  ;
  for (; _First != _Last && is(_Maskval, *_First); ++_First)
   ;
  return (_First);
  }

 virtual _Elem do_tolower(_Elem _Ch) const
  {
  unsigned char _Byte = (unsigned char)narrow(_Ch, '\0');
  if (_Byte == '\0')
   return (_Ch);
  else
   return (widen((char)_Tolower(_Byte, &_Ctype)));
  }

 virtual const _Elem *do_tolower(_Elem *_First,
  const _Elem *_Last) const
  {
  ;
  for (; _First != _Last; ++_First)
   {
   unsigned char _Byte = (unsigned char)narrow(*_First, '\0');
   if (_Byte != '\0')
    *_First = (widen((char)_Tolower(_Byte, &_Ctype)));
   }
  return ((const _Elem *)_First);
  }

 virtual _Elem do_toupper(_Elem _Ch) const
  {
  unsigned char _Byte = (unsigned char)narrow(_Ch, '\0');
  if (_Byte == '\0')
   return (_Ch);
  else
   return (widen((char)_Toupper(_Byte, &_Ctype)));
  }

 virtual const _Elem *do_toupper(_Elem *_First,
  const _Elem *_Last) const
  {
  ;
  for (; _First != _Last; ++_First)
   {
   unsigned char _Byte = (unsigned char)narrow(*_First, '\0');
   if (_Byte != '\0')
    *_First = (widen((char)_Toupper(_Byte, &_Ctype)));
   }
  return ((const _Elem *)_First);
  }

 virtual _Elem do_widen(char _Byte) const
  {
  return (_Maklocchr(_Byte, (_Elem *)0, _Cvt));
  }

 virtual const char *do_widen(const char *_First,
  const char *_Last, _Elem *_Dest) const
  {
  ;
  ;
  for (; _First != _Last; ++_First, ++_Dest)
   *_Dest = _Maklocchr(*_First, (_Elem *)0, _Cvt);
  return (_First);
  }

 char _Donarrow(_Elem _Ch, char _Dflt) const
  {
  char _Byte;
  if (_Ch == (_Elem)0)
   return ('\0');
  else if ((_Byte = _Maklocbyte((_Elem)_Ch, _Cvt)) == '\0')
   return (_Dflt);
  else
   return (_Byte);
  }

 virtual char do_narrow(_Elem _Ch, char _Dflt) const
  {
  return (_Donarrow(_Ch, _Dflt));
  }

 virtual const _Elem *do_narrow(const _Elem *_First,
  const _Elem *_Last, char _Dflt, char *_Dest) const
  {
  ;
  ;
  for (; _First != _Last; ++_First, ++_Dest)
   *_Dest = _Donarrow(*_First, _Dflt);
  return (_First);
  }

private:
 _Locinfo::_Ctypevec _Ctype;
 _Locinfo::_Cvtvec _Cvt;
 };


template<class _Elem>
 locale::id ctype<_Elem>::id;


template<>
 class ctype<char>
 : public ctype_base
 {
 typedef ctype<char> _Myt;

public:
 typedef char _Elem;
 typedef _Elem char_type;

 bool is(mask _Maskval, _Elem _Ch) const
  {
  return ((_Ctype._Table[(unsigned char)_Ch] & _Maskval) != 0);
  }

 const _Elem *is(const _Elem *_First,
  const _Elem *_Last, mask *_Dest) const
  {
  ;
  ;
  for (; _First != _Last; ++_First, ++_Dest)
   *_Dest = _Ctype._Table[(unsigned char)*_First];
  return (_First);
  }

 const _Elem *scan_is(mask _Maskval,
  const _Elem *_First, const _Elem *_Last) const
  {
  ;
  for (; _First != _Last && !is(_Maskval, *_First); ++_First)
   ;
  return (_First);
  }

 const _Elem *scan_not(mask _Maskval,
  const _Elem *_First, const _Elem *_Last) const
  {
  ;
  for (; _First != _Last && is(_Maskval, *_First); ++_First)
   ;
  return (_First);
  }

 _Elem tolower(_Elem _Ch) const
  {
  return (do_tolower(_Ch));
  }

 const _Elem *tolower(_Elem *_First, const _Elem *_Last) const
  {
  return (do_tolower(_First, _Last));
  }

 _Elem toupper(_Elem _Ch) const
  {
  return (do_toupper(_Ch));
  }

 const _Elem *toupper(_Elem *_First, const _Elem *_Last) const
  {
  return (do_toupper(_First, _Last));
  }

 _Elem widen(char _Byte) const
  {
  return (do_widen(_Byte));
  }

 const _Elem *widen(const char *_First, const char *_Last,
  _Elem *_Dest) const
  {
  return (do_widen(_First, _Last, _Dest));
  }

 _Elem narrow(_Elem _Ch, char _Dflt = '\0') const
  {
  return (do_narrow(_Ch, _Dflt));
  }

 const _Elem *narrow(const _Elem *_First, const _Elem *_Last,
  char _Dflt, char *_Dest) const
  {
  return (do_narrow(_First, _Last, _Dflt, _Dest));
  }

 static locale::id id;

 explicit ctype(const mask *_Table = 0,
  bool _Deletetable = false,
  size_t _Refs = 0)
  : ctype_base(_Refs)
  {
  { _Locinfo _Lobj;
   _Init(_Lobj);
  }
  if (_Table != 0)
   {
   _Tidy();
   _Ctype._Table = _Table;
   _Ctype._Delfl = _Deletetable ? -1 : 0;
   }
  }

 ctype(const _Locinfo& _Lobj, size_t _Refs = 0)
  : ctype_base(_Refs)
  {
  _Init(_Lobj);
  }

 static size_t _Getcat(const locale::facet **_Ppf = 0,
  const locale *_Ploc = 0)
  {
  if (_Ppf != 0 && *_Ppf == 0)
   *_Ppf = new ctype<_Elem>(
    _Locinfo(_Ploc->c_str()));
  return (2);
  }

 const mask *table() const throw ()
  {
  return (_Ctype._Table);
  }

 static const mask *classic_table() throw ()
  {
  const _Myt& _Ctype_fac = use_facet< _Myt >(locale::classic());
  return (_Ctype_fac.table());
  }

 static const size_t table_size;

protected:
 virtual ~ctype()
  {
  _Tidy();
  }

 void _Init(const _Locinfo& _Lobj)
  {




  _Ctype = _Lobj._Getctype();
  }

 void _Tidy()
  {
  if (0 < _Ctype._Delfl)
   free((void *)_Ctype._Table);
  else if (_Ctype._Delfl < 0)
   delete[] _Ctype._Table;
  }

 virtual _Elem do_tolower(_Elem _Ch) const
  {
  return ((_Elem)_Tolower((unsigned char)_Ch, &_Ctype));
  }

 virtual const _Elem *do_tolower(_Elem *_First,
  const _Elem *_Last) const
  {
  ;
  for (; _First != _Last; ++_First)
   *_First = (_Elem)_Tolower((unsigned char)*_First, &_Ctype);
  return ((const _Elem *)_First);
  }

 virtual _Elem do_toupper(_Elem _Ch) const
  {
  return ((_Elem)_Toupper((unsigned char)_Ch, &_Ctype));
  }

 virtual const _Elem *do_toupper(_Elem *_First,
  const _Elem *_Last) const
  {
  ;
  for (; _First != _Last; ++_First)
   *_First = (_Elem)_Toupper((unsigned char)*_First, &_Ctype);
  return ((const _Elem *)_First);
  }

 virtual _Elem do_widen(char _Byte) const
  {
  return (_Byte);
  }

 virtual const _Elem *do_widen(const char *_First,
  const char *_Last, _Elem *_Dest) const
  {
  ;
  ;
  :: memcpy(_Dest, _First, _Last - _First);
  return (_Last);
  }

 virtual _Elem do_narrow(_Elem _Ch, char) const
  {
  return (_Ch);
  }

 virtual const _Elem *do_narrow(const _Elem *_First,
  const _Elem *_Last, char, char *_Dest) const
  {
  ;
  ;
  :: memcpy(_Dest, _First, _Last - _First);
  return (_Last);
  }

private:
 _Locinfo::_Ctypevec _Ctype;
 };


template<>
 class ctype<wchar_t>
 : public ctype_base
 {
 typedef ctype<wchar_t> _Myt;

public:
 typedef wchar_t _Elem;
 typedef _Elem char_type;

 bool is(mask _Maskval, _Elem _Ch) const
  {
  return (do_is(_Maskval, _Ch));
  }

 const _Elem *is(const _Elem *_First, const _Elem *_Last,
  mask *_Dest) const
  {
  return (do_is(_First, _Last, _Dest));
  }

 const _Elem *scan_is(mask _Maskval, const _Elem *_First,
  const _Elem *_Last) const
  {
  return (do_scan_is(_Maskval, _First, _Last));
  }

 const _Elem *scan_not(mask _Maskval, const _Elem *_First,
  const _Elem *_Last) const
  {
  return (do_scan_not(_Maskval, _First, _Last));
  }

 _Elem tolower(_Elem _Ch) const
  {
  return (do_tolower(_Ch));
  }

 const _Elem *tolower(_Elem *_First, const _Elem *_Last) const
  {
  return (do_tolower(_First, _Last));
  }

 _Elem toupper(_Elem _Ch) const
  {
  return (do_toupper(_Ch));
  }

 const _Elem *toupper(_Elem *_First, const _Elem *_Last) const
  {
  return (do_toupper(_First, _Last));
  }

 _Elem widen(char _Byte) const
  {
  return (do_widen(_Byte));
  }

 const char *widen(const char *_First, const char *_Last,
  _Elem *_Dest) const
  {
  return (do_widen(_First, _Last, _Dest));
  }

 char narrow(_Elem _Ch, char _Dflt = '\0') const
  {
  return (do_narrow(_Ch, _Dflt));
  }

 const _Elem *narrow(const _Elem *_First, const _Elem *_Last,
  char _Dflt, char *_Dest) const
  {
  return (do_narrow(_First, _Last, _Dflt, _Dest));
  }

 static locale::id id;

 explicit ctype(size_t _Refs = 0)
  : ctype_base(_Refs)
  {
  { _Locinfo _Lobj;
   _Init(_Lobj);
  }
  }

 ctype(const _Locinfo& _Lobj, size_t _Refs = 0)
  : ctype_base(_Refs)
  {
  _Init(_Lobj);
  }

 static size_t _Getcat(const locale::facet **_Ppf = 0,
  const locale *_Ploc = 0)
  {
  if (_Ppf != 0 && *_Ppf == 0)
   *_Ppf = new ctype<_Elem>(
    _Locinfo(_Ploc->c_str()));
  return (2);
  }

protected:
 virtual ~ctype()
  {
  if (_Ctype._Delfl)
   free((void *)_Ctype._Table);
  }

 void _Init(const _Locinfo& _Lobj)
  {
  _Ctype = _Lobj._Getctype();
  _Cvt = _Lobj._Getcvt();
  }

 virtual bool do_is(mask _Maskval, _Elem _Ch) const
  {
  return ((_Ctype._Table[(unsigned char)narrow(_Ch)]
   & _Maskval) != 0);
  }

 virtual const _Elem *do_is(const _Elem *_First,
  const _Elem *_Last, mask *_Dest) const
  {
  ;
  ;
  for (; _First != _Last; ++_First, ++_Dest)
   *_Dest = _Ctype._Table[(unsigned char)narrow(*_First)];
  return (_First);
  }

 virtual const _Elem *do_scan_is(mask _Maskval,
  const _Elem *_First, const _Elem *_Last) const
  {
  ;
  for (; _First != _Last && !is(_Maskval, *_First); ++_First)
   ;
  return (_First);
  }

 virtual const _Elem *do_scan_not(mask _Maskval,
  const _Elem *_First, const _Elem *_Last) const
  {
  ;
  for (; _First != _Last && is(_Maskval, *_First); ++_First)
   ;
  return (_First);
  }

 virtual _Elem do_tolower(_Elem _Ch) const
  {
  unsigned char _Byte = (unsigned char)narrow(_Ch, '\0');
  if (_Byte == '\0')
   return (_Ch);
  else
   return (widen((char)_Tolower(_Byte, &_Ctype)));
  }

 virtual const _Elem *do_tolower(_Elem *_First,
  const _Elem *_Last) const
  {
  ;
  for (; _First != _Last; ++_First)
   {
   unsigned char _Byte = (unsigned char)narrow(*_First, '\0');
   if (_Byte != '\0')
    *_First = (widen((char)_Tolower(_Byte, &_Ctype)));
   }
  return ((const _Elem *)_First);
  }

 virtual _Elem do_toupper(_Elem _Ch) const
  {
  unsigned char _Byte = (unsigned char)narrow(_Ch, '\0');
  if (_Byte == '\0')
   return (_Ch);
  else
   return (widen((char)_Toupper(_Byte, &_Ctype)));
  }

 virtual const _Elem *do_toupper(_Elem *_First,
  const _Elem *_Last) const
  {
  ;
  for (; _First != _Last; ++_First)
   {
   unsigned char _Byte = (unsigned char)narrow(*_First, '\0');
   if (_Byte != '\0')
    *_First = (widen((char)_Toupper(_Byte, &_Ctype)));
   }
  return ((const _Elem *)_First);
  }

 _Elem _Dowiden(char _Byte) const
  {
  _Mbstatet _Mbst = {0, 0};
  wchar_t _Wc;
  return (_Mbrtowc(&_Wc, &_Byte, 1, &_Mbst, &_Cvt) < 0
   ? (wchar_t)((:: wint_t)(-1)) : _Wc);
  }

 virtual _Elem do_widen(char _Byte) const
  {
  return (_Dowiden(_Byte));
  }

 virtual const char *do_widen(const char *_First,
  const char *_Last, _Elem *_Dest) const
  {
  ;
  ;
  for (; _First != _Last; ++_First, ++_Dest)
   *_Dest = _Dowiden(*_First);
  return (_First);
  }

 char _Donarrow(_Elem _Ch, char _Dflt) const
  {
  char _Buf[1];
  _Mbstatet _Mbst = {0, 0};
  return (_Wcrtomb(_Buf, _Ch, &_Mbst, &_Cvt) != 1
   ? _Dflt : _Buf[0]);
  }

 virtual char do_narrow(_Elem _Ch, char _Dflt) const
  {
  return (_Donarrow(_Ch, _Dflt));
  }

 virtual const _Elem *do_narrow(const _Elem *_First,
  const _Elem *_Last, char _Dflt, char *_Dest) const
  {
  ;
  ;
  for (; _First != _Last; ++_First, ++_Dest)
   *_Dest = _Donarrow(*_First, _Dflt);
  return (_First);
  }

private:
 _Locinfo::_Ctypevec _Ctype;
 _Locinfo::_Cvtvec _Cvt;
 };


template<class _Elem>
 class ctype_byname
 : public ctype<_Elem>
 {
public:
 explicit ctype_byname(const char *_Locname, size_t _Refs = 0)
  : ctype<_Elem>(_Locinfo(_Locname), _Refs)
  {
  }


 explicit ctype_byname(const string& _Str, size_t _Refs = 0)
  : ctype<_Elem>(_Locinfo(_Str.c_str()), _Refs)
  {
  }


protected:
 virtual ~ctype_byname()
  {
  }
 };


template<>
 class ctype_byname<char>
 : public ctype<char>
 {
public:
 explicit ctype_byname(const char *_Locname, size_t _Refs = 0)
  : ctype<char>(_Locinfo(_Locname), _Refs)
  {
  }


 explicit ctype_byname(const string& _Str, size_t _Refs = 0)
  : ctype<char>(_Locinfo(_Str.c_str()), _Refs)
  {
  }


protected:
 virtual ~ctype_byname()
  {
  }
 };
}
# 5 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/xiosbase" 2 3


# 1 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/system_error" 1 3



# 1 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/cerrno" 1 3



# 1 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/c/yvals.h" 1 3
# 5 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/cerrno" 2 3







# 1 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/c/errno.h" 1 3








# 487 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/c/errno.h" 3
extern "C" {


extern int _Errno;
# 500 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/c/errno.h" 3
}


extern "C" {






}


# 13 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/cerrno" 2 3
# 5 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/system_error" 2 3
# 14 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/system_error" 3
namespace std {

 namespace errc {
enum errc {
 address_family_not_supported = 1004,
 address_in_use = 1002,
 address_not_available = 1003,
 already_connected = 1028,
 argument_list_too_long = 0x0007,
 argument_out_of_domain = 0x0021,
 bad_address = 0x000E,
 bad_file_descriptor = 0x0009,
 bad_message = 0x004D,
 broken_pipe = 0x0020,
 connection_aborted = 1012,
 connection_already_in_progress = 1006,
 connection_refused = 1013,
 connection_reset = 1014,
 cross_device_link = 0x0012,
 destination_address_required = 1016,
 device_or_resource_busy = 0x0010,
 directory_not_empty = 0x005D,
 executable_format_error = 0x0008,
 file_exists = 0x0011,
 file_too_large = 0x001B,
 filename_too_long = 0x004E,
 function_not_supported = 0x0059,
 host_unreachable = 1021,
 identifier_removed = 1022,
 illegal_byte_sequence = 0x0058,
 inappropriate_io_control_operation = 0x0019,
 interrupted = 0x0004,
 invalid_argument = 0x0016,
 invalid_seek = 0x001D,
 io_error = 0x0005,
 is_a_directory = 0x0015,
 message_size = 0x0061,
 network_down = 1035,
 network_reset = 1036,
 network_unreachable = 1037,
 no_buffer_space = 1039,
 no_child_process = 0x000A,
 no_link = 1045,
 no_lock_available = 0x002E,
 no_message_available = 1040,
 no_message = 1047,
 no_protocol_option = 1048,
 no_space_on_device = 0x001C,
 no_stream_resources = 1050,
 no_such_device_or_address = 0x0006,
 no_such_device = 0x0013,
 no_such_file_or_directory = 0x0002,
 no_such_process = 0x0003,
 not_a_directory = 0x0014,
 not_a_socket = 1057,
 not_a_stream = 1051,
 not_connected = 1053,
 not_enough_memory = 0x000C,
 not_supported = 0x0030,
 operation_canceled = 0x002F,
 operation_in_progress = 0x0096,
 operation_not_permitted = 0x0001,
 operation_not_supported = 1061,
 operation_would_block = 1077,
 owner_dead = 1064,
 permission_denied = 0x000D,
 protocol_error = 1067,
 protocol_not_supported = 1068,
 read_only_file_system = 0x001E,
 resource_deadlock_would_occur = 0x002D,
 resource_unavailable_try_again = 0x000B,
 result_out_of_range = 0x0022,
 state_not_recoverable = 1056,
 stream_timeout = 1074,
 text_file_busy = 1076,
 timed_out = 0x0091,
 too_many_files_open_in_system = 0x0017,
 too_many_files_open = 0x0018,
 too_many_links = 0x001F,
 too_many_synbolic_link_levels = 1030,
 value_too_large = 1063,
 wrong_protocol_type = 1069
 };
 }

typedef errc::errc generic_errno;


template<class _Enum>
 struct is_error_code_enum
  : public tr1::false_type
 {
 };


template<class _Enum>
 struct is_error_condition_enum
  : public tr1::false_type
 {
 };

template<>
 struct is_error_condition_enum<generic_errno>
  : public tr1::true_type
 {
 };


 namespace io_errc {
enum io_errc {
 stream = 1
 };
 }

typedef io_errc::io_errc _Io_errc;


class error_code;
class error_condition;
class error_category;

const error_category& generic_category();
const error_category& iostream_category();
const error_category& system_category();

class error_category
 {
public:
 typedef int value_type;

 error_category()
  {
  }

 virtual ~error_category()
  {
  }

 virtual const char *name() const = 0;

 virtual string message(value_type _Errval) const = 0;

 virtual error_condition default_error_condition(value_type _Errval) const;

 virtual bool equivalent(value_type _Errval,
  const error_condition& _Cond) const;

 virtual bool equivalent(const error_code& _Code,
  value_type _Errval) const;

 bool operator==(const error_category& _Right) const
  {
  return (this == &_Right);
  }

 bool operator!=(const error_category& _Right) const
  {
  return (!(*this == _Right));
  }

 bool operator<(const error_category& _Right) const
  {
  return (this < &_Right);
  }

private:
 error_category(const error_category&);

 error_category& operator=(const error_category&);
 };


class error_code
 {
public:
 typedef int value_type;

 error_code()
  : _Myval(0),
   _Mycat(&system_category())
  {
  }

 error_code(value_type _Val, const error_category& _Cat)
  : _Myval(_Val), _Mycat(&_Cat)
  {
  }
# 213 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/system_error" 3
 template<class _Enum>
  explicit error_code(_Enum _Errcode,
   typename tr1::enable_if<is_error_code_enum<_Enum>::value,
    error_code>::type * = 0)
  : _Myval(0), _Mycat(0)
  {
  *this = make_error_code(_Errcode);
  }


 void assign(value_type _Val, const error_category& _Cat)
  {
  _Myval = _Val;
  _Mycat = &_Cat;
  }

 template<class _Enum>
  typename tr1::enable_if<is_error_code_enum<_Enum>::value,
   error_code>::type& operator=(_Enum _Errcode)
  {
  *this = make_error_code(_Errcode);
  return (*this);
  }

 void clear()
  {
  _Myval = 0;
  _Mycat = &system_category();
  }

 value_type value() const
  {
  return (_Myval);
  }

 const error_category& category() const
  {
  return (*_Mycat);
  }

 error_condition default_error_condition() const;

 string message() const
  {
  return (category().message(value()));
  }

 operator bool() const
  {
  return (value() != 0 ? 1 : 0);
  }

 bool operator !() const
  {
  return (value() == 0);
  }

 bool operator==(const error_code& _Right) const
  {
  return (category() == _Right.category()
   && value() == _Right.value());
  }

 bool operator!=(const error_code& _Right) const
  {
  return (!(*this == _Right));
  }

 bool operator<(const error_code& _Right) const
  {
  return (category() < _Right.category()
   || category() == _Right.category()
    && value() < _Right.value());
  }

private:
 value_type _Myval;
 const error_category *_Mycat;
 };


class error_condition
 {
public:
 typedef int value_type;

 error_condition()
  : _Myval(0),
   _Mycat(&generic_category())
  {
  }

 error_condition(value_type _Val, const error_category& _Cat)
  : _Myval(_Val), _Mycat(&_Cat)
  {
  }

 template<class _Enum>
  error_condition(_Enum _Errcode,
   typename tr1::enable_if<is_error_condition_enum<_Enum>::value,
    error_condition>::type * = 0)
  : _Myval(0), _Mycat(0)
  {
  *this = make_error_condition(_Errcode);
  }

 void assign(value_type _Val, const error_category& _Cat)
  {
  _Myval = _Val;
  _Mycat = &_Cat;
  }

 template<class _Enum>
  typename tr1::enable_if<is_error_condition_enum<_Enum>::value,
   error_condition>::type& operator=(_Enum _Errcode)
  {
  *this = make_error_condition(_Errcode);
  return (*this);
  }

 void clear()
  {
  _Myval = 0;
  _Mycat = &generic_category();
  }

 value_type value() const
  {
  return (_Myval);
  }

 const error_category& category() const
  {
  return (*_Mycat);
  }

 string message() const
  {
  return (category().message(value()));
  }

 operator bool() const
  {
  return (value() != 0 ? 1 : 0);
  }

 bool operator !() const
  {
  return (value() == 0);
  }

 bool operator==(const error_condition& _Right) const
  {
  return (category() == _Right.category()
   && value() == _Right.value());
  }

 bool operator!=(const error_condition& _Right) const
  {
  return (!(*this == _Right));
  }

 bool operator<(const error_condition& _Right) const
  {
  return (category() < _Right.category()
   || category() == _Right.category()
    && value() < _Right.value());
  }

private:
 value_type _Myval;
 const error_category *_Mycat;
 };


inline error_condition
 error_category::default_error_condition(value_type _Errval) const
 {
 return (error_condition(_Errval, *this));
 }

inline bool
 error_category::equivalent(value_type _Errval,
  const error_condition& _Cond) const
 {
 return (default_error_condition(_Errval) == _Cond);
 }

inline bool
 error_category::equivalent(const error_code& _Code,
  value_type _Errval) const
 {
 return (*this == _Code.category() && _Code.value() == _Errval);
 }


inline error_condition error_code::default_error_condition() const
 {
 return (category().default_error_condition(value()));
 }


inline bool operator==(
 const error_code& _Left,
 const error_condition& _Right)
 {
 return (_Left.category().equivalent(_Left.value(), _Right)
  || _Right.category().equivalent(_Left, _Right.value()));
 }

inline bool operator==(
 const error_condition& _Left,
 const error_code& _Right)
 {
 return (_Right.category().equivalent(_Right.value(), _Left)
  || _Left.category().equivalent(_Right, _Left.value()));
 }


inline bool operator!=(
 const error_code& _Left,
 const error_condition& _Right)
 {
 return (!(_Left == _Right));
 }

inline bool operator!=(
 const error_condition& _Left,
 const error_code& _Right)
 {
 return (!(_Left == _Right));
 }


inline error_code make_error_code(generic_errno _Errno)
 {
 return (error_code(_Errno, generic_category()));
 }

inline error_code make_error_code(_Io_errc _Errno)
 {
 return (error_code(_Errno, iostream_category()));
 }


inline error_condition make_error_condition(generic_errno _Errno)
 {
 return (error_condition(_Errno, generic_category()));
 }

inline error_condition make_error_condition(_Io_errc _Errno)
 {
 return (error_condition(_Errno, iostream_category()));
 }
# 478 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/system_error" 3
template<class _Kty>
 class hash;

template<>
 class hash< ::std:: error_code>
  : public unary_function<error_code, size_t>
 {
public:
 typedef ::std:: error_code _Kty;

 size_t operator()(const _Kty& _Keyval) const
  {
  ldiv_t _Qrem = :: ldiv((long)(size_t)_Keyval.value(), 127773);

  _Qrem.rem = 16807 * _Qrem.rem - 2836 * _Qrem.quot;
  if (_Qrem.rem < 0)
   _Qrem.rem += 2147483647;
  return ((size_t)_Qrem.rem);
  }
 };

template<>
 class hash< ::std:: error_condition>
  : public unary_function<error_condition, size_t>
 {
public:
 typedef ::std:: error_condition _Kty;

 size_t operator()(const _Kty& _Keyval) const
  {
  ldiv_t _Qrem = :: ldiv((long)(size_t)_Keyval.value(), 127773);

  _Qrem.rem = 16807 * _Qrem.rem - 2836 * _Qrem.quot;
  if (_Qrem.rem < 0)
   _Qrem.rem += 2147483647;
  return ((size_t)_Qrem.rem);
  }
 };


class system_error
 : public runtime_error
 {
public:
 explicit system_error(error_code _Errcode,
  const string& _Message = "")
  : runtime_error(_Message), _Mycode(_Errcode)
  {
  _Makestr();
  }

 system_error(error_code _Errcode,
  const char *_Message)
  : runtime_error(_Message), _Mycode(_Errcode)
  {
  _Makestr();
  }

 system_error(error_code::value_type _Errval,
  const error_category& _Errcat,
  const string& _Message = "")
  : runtime_error(_Message), _Mycode(_Errval, _Errcat)
  {
  _Makestr();
  }

 system_error(error_code::value_type _Errval,
  const error_category& _Errcat,
  const char *_Message)
  : runtime_error(_Message), _Mycode(_Errval, _Errcat)
  {
  _Makestr();
  }
# 561 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/system_error" 3
 const error_code& code() const throw ()
  {
  return (_Mycode);
  }
# 576 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/system_error" 3
private:
 void _Makestr()
  {




  }

 error_code _Mycode;

 };
}
# 8 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/xiosbase" 2 3




namespace std {
# 71 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/xiosbase" 3
template<class _Dummy>
 class _Iosb
 {
public:
 enum _Dummy_enum {_Dummy_enum_val = 1};
 enum _Fmtflags
  {
  _Fmtmask = 0xffff, _Fmtzero = 0};

 static const _Fmtflags skipws = (_Fmtflags)0x0001;
 static const _Fmtflags unitbuf = (_Fmtflags)0x2000;
 static const _Fmtflags uppercase = (_Fmtflags)0x0200;
 static const _Fmtflags showbase = (_Fmtflags)0x0080;
 static const _Fmtflags showpoint = (_Fmtflags)0x0100;
 static const _Fmtflags showpos = (_Fmtflags)0x0400;
 static const _Fmtflags left = (_Fmtflags)0x0002;
 static const _Fmtflags right = (_Fmtflags)0x0004;
 static const _Fmtflags internal = (_Fmtflags)0x0008;
 static const _Fmtflags dec = (_Fmtflags)0x0010;
 static const _Fmtflags oct = (_Fmtflags)0x0020;
 static const _Fmtflags hex = (_Fmtflags)0x0040;
 static const _Fmtflags scientific = (_Fmtflags)0x0800;
 static const _Fmtflags fixed = (_Fmtflags)0x1000;

 static const _Fmtflags hexfloat =
  (_Fmtflags)0x1800;

 static const _Fmtflags boolalpha = (_Fmtflags)0x8000;
 static const _Fmtflags _Stdio = (_Fmtflags)0x4000;
 static const _Fmtflags adjustfield = (_Fmtflags)(0x0002
  | 0x0004 | 0x0008);
 static const _Fmtflags basefield = (_Fmtflags)(0x0010
  | 0x0020 | 0x0040);
 static const _Fmtflags floatfield = (_Fmtflags)(0x0800
  | 0x1000);

 enum _Iostate
  {
  _Statmask = 0x17};

 static const _Iostate goodbit = (_Iostate)0x0;
 static const _Iostate eofbit = (_Iostate)0x1;
 static const _Iostate failbit = (_Iostate)0x2;
 static const _Iostate badbit = (_Iostate)0x4;
 static const _Iostate _Hardfail = (_Iostate)0x10;

 enum _Openmode
  {
  _Openmask = 0xff};

 static const _Openmode in = (_Openmode)0x01;
 static const _Openmode out = (_Openmode)0x02;
 static const _Openmode ate = (_Openmode)0x04;
 static const _Openmode app = (_Openmode)0x08;
 static const _Openmode trunc = (_Openmode)0x10;
 static const _Openmode _Nocreate = (_Openmode)0x20;
 static const _Openmode _Noreplace = (_Openmode)0x40;
 static const _Openmode binary = (_Openmode)0x80;

 enum _Seekdir
  {
  _Seekmask = 0x3};

 static const _Seekdir beg = (_Seekdir)0;
 static const _Seekdir cur = (_Seekdir)1;
 static const _Seekdir end = (_Seekdir)2;

 enum
  {
  _Openprot = 0666};
 };

template<class _Dummy>
 const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::skipws;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::unitbuf;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::uppercase;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::showbase;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::showpoint;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::showpos;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::left;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::right;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::internal;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::dec;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::oct;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::hex;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::scientific;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::fixed;

template<class _Dummy>
 const typename _Iosb<_Dummy>::_Fmtflags
  _Iosb<_Dummy>::hexfloat;

template<class _Dummy>
 const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::boolalpha;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::_Stdio;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::adjustfield;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::basefield;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::floatfield;

template<class _Dummy>
 const typename _Iosb<_Dummy>::_Iostate _Iosb<_Dummy>::goodbit;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Iostate _Iosb<_Dummy>::eofbit;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Iostate _Iosb<_Dummy>::failbit;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Iostate _Iosb<_Dummy>::badbit;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Iostate _Iosb<_Dummy>::_Hardfail;

template<class _Dummy>
 const typename _Iosb<_Dummy>::_Openmode _Iosb<_Dummy>::in;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Openmode _Iosb<_Dummy>::out;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Openmode _Iosb<_Dummy>::ate;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Openmode _Iosb<_Dummy>::app;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Openmode _Iosb<_Dummy>::trunc;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Openmode _Iosb<_Dummy>::_Nocreate;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Openmode _Iosb<_Dummy>::_Noreplace;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Openmode _Iosb<_Dummy>::binary;

template<class _Dummy>
 const typename _Iosb<_Dummy>::_Seekdir _Iosb<_Dummy>::beg;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Seekdir _Iosb<_Dummy>::cur;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Seekdir _Iosb<_Dummy>::end;


class ios_base
 : public _Iosb<int>
 {
public:
 typedef _Fmtflags fmtflags;
 typedef _Iostate iostate;
 typedef _Openmode openmode;
 typedef _Seekdir seekdir;

 typedef ::std:: streamoff streamoff;
 typedef ::std:: streampos streampos;

 enum event
  {
  erase_event, imbue_event, copyfmt_event};

 typedef void (*event_callback)(event, ios_base&, int);
 typedef unsigned int io_state, open_mode, seek_dir;


 class failure


  : public system_error
  {
 public:
  explicit failure(const string &_Message,
   const error_code& _Errcode = make_error_code(io_errc::stream))
   : system_error(_Errcode, _Message)
   {
   }

  explicit failure(const char *_Message,
   const error_code& _Errcode = make_error_code(io_errc::stream))
   : system_error(_Errcode, _Message)
   {
   }
# 285 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/xiosbase" 3
  };


 class Init
  {
 public:
  Init();

  ~Init();

 private:
  static int _Init_cnt;
  };

 ios_base& operator=(const ios_base& _Right)
  {
  if (this != &_Right)
   {
   _Mystate = _Right._Mystate;
   copyfmt(_Right);
   }
  return (*this);
  }


 operator bool() const
  {
  return (!fail() ? 1 : 0);
  }
# 322 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/xiosbase" 3
 bool operator!() const
  {
  return (fail());
  }

 void clear(iostate _State, bool _Reraise)
  {
  _Mystate = (iostate)(_State & _Statmask);
  if ((_Mystate & _Except) == 0)
   ;
  else if (_Reraise)
   throw;
  else if (_Mystate & _Except & badbit)
   throw failure("ios_base::badbit set");
  else if (_Mystate & _Except & failbit)
   throw failure("ios_base::failbit set");
  else
   throw failure("ios_base::eofbit set");
  }

 void clear(iostate _State = goodbit)
  {
  clear(_State, false);
  }

 void clear(io_state _State)
  {
  clear((iostate)_State);
  }

 iostate rdstate() const
  {
  return (_Mystate);
  }

 void setstate(iostate _State, bool _Exreraise)
  {
  if (_State != goodbit)
   clear((iostate)((int)rdstate() | (int)_State), _Exreraise);
  }

 void setstate(iostate _State)
  {
  if (_State != goodbit)
   clear((iostate)((int)rdstate() | (int)_State), false);
  }

 void setstate(io_state _State)
  {
  setstate((iostate)_State);
  }

 bool good() const
  {
  return (rdstate() == goodbit);
  }

 bool eof() const
  {
  return ((int)rdstate() & (int)eofbit);
  }

 bool fail() const
  {
  return (((int)rdstate()
   & ((int)badbit | (int)failbit)) != 0);
  }

 bool bad() const
  {
  return (((int)rdstate() & (int)badbit) != 0);
  }

 iostate exceptions() const
  {
  return (_Except);
  }

 void exceptions(iostate _Newexcept)
  {
  _Except = (iostate)((int)_Newexcept & (int)_Statmask);
  clear(_Mystate);
  }

 void exceptions(io_state _State)
  {
  exceptions((iostate)_State);
  }

 fmtflags flags() const
  {
  return (_Fmtfl);
  }

 fmtflags flags(fmtflags _Newfmtflags)
  {
  fmtflags _Oldfmtflags = _Fmtfl;
  _Fmtfl = (fmtflags)((int)_Newfmtflags & (int)_Fmtmask);
  return (_Oldfmtflags);
  }

 fmtflags setf(fmtflags _Newfmtflags)
  {
  ios_base::fmtflags _Oldfmtflags = _Fmtfl;
  _Fmtfl = (fmtflags)((int)_Fmtfl
   | (int)_Newfmtflags & (int)_Fmtmask);
  return (_Oldfmtflags);
  }

 fmtflags setf(fmtflags _Newfmtflags, fmtflags _Mask)
  {
  ios_base::fmtflags _Oldfmtflags = _Fmtfl;
  _Fmtfl = (fmtflags)(((int)_Fmtfl & (int)~_Mask)
   | ((int)_Newfmtflags & (int)_Mask & (int)_Fmtmask));
  return (_Oldfmtflags);
  }

 void unsetf(fmtflags _Mask)
  {
  _Fmtfl = (fmtflags)((int)_Fmtfl & (int)~_Mask);
  }

 streamsize precision() const
  {
  return (_Prec);
  }

 streamsize precision(streamsize _Newprecision)
  {
  streamsize _Oldprecision = _Prec;
  _Prec = _Newprecision;
  return (_Oldprecision);
  }

 streamsize width() const
  {
  return (_Wide);
  }

 streamsize width(streamsize _Newwidth)
  {
  streamsize _Oldwidth = _Wide;
  _Wide = _Newwidth;
  return (_Oldwidth);
  }

 locale getloc() const
  {
  return (*_Ploc);
  }

 locale imbue(const locale& _Loc)
  {
  locale _Oldlocale = *_Ploc;
  *_Ploc = _Loc;
  _Callfns(imbue_event);
  return (_Oldlocale);
  }

 static int xalloc()
  {
  {
   return (_Index++);
  }
  }

 long& iword(int _Idx)
  {
  return (_Findarr(_Idx)._Lo);
  }

 void *& pword(int _Idx)
  {
  return (_Findarr(_Idx)._Vp);
  }

 void register_callback(event_callback _Pfn,
  int _Idx)
  {
  _Calls = new _Fnarray(_Idx, _Pfn, _Calls);
  }

 ios_base& copyfmt(const ios_base& _Other)
  {
  if (this != &_Other)
   {
   _Tidy();
   *_Ploc = *_Other._Ploc;
   _Fmtfl = _Other._Fmtfl;
   _Prec = _Other._Prec;
   _Wide = _Other._Wide;
   _Iosarray *_Ptr = _Other._Arr;

   for (_Arr = 0; _Ptr != 0; _Ptr = _Ptr->_Next)
    if (_Ptr->_Lo != 0 || _Ptr->_Vp != 0)
     {
     iword(_Ptr->_Index) = _Ptr->_Lo;
     pword(_Ptr->_Index) = _Ptr->_Vp;
     }

   for (_Fnarray *_Pfa = _Other._Calls; _Pfa != 0;
    _Pfa = _Pfa->_Next)
    register_callback(_Pfa->_Pfn, _Pfa->_Index);

   _Callfns(copyfmt_event);
   exceptions(_Other._Except);
   }
  return (*this);
  }

 static bool sync_with_stdio(bool _Newsync = true)
  {
  {
   const bool _Oldsync = _Sync;
   _Sync = _Newsync;
   return (_Oldsync);
  }
  }

 void swap(ios_base& _Right)
  {
  if (this != &_Right)
   {
   ::std:: swap(_Mystate, _Right._Mystate);
   ::std:: swap(_Except, _Right._Except);
   ::std:: swap(_Fmtfl, _Right._Fmtfl);
   ::std:: swap(_Prec, _Right._Prec);
   ::std:: swap(_Wide, _Right._Wide);

   ::std:: swap(_Arr, _Right._Arr);
   ::std:: swap(_Calls, _Right._Calls);
   ::std:: swap(_Ploc, _Right._Ploc);
   }
  }

 virtual ~ios_base();

 static void _Addstd(ios_base *);

 size_t _Stdstr;

protected:
 ios_base()
  {
  }

 void _Init()
  {
  _Ploc = 0;
  _Stdstr = 0;
  _Except = goodbit;
  _Fmtfl = (fmtflags)(skipws | dec);
  _Prec = 6;
  _Wide = 0;
  _Arr = 0;
  _Calls = 0;
  clear(goodbit);
  _Ploc = new locale;
  }

private:

 struct _Iosarray
  {
 public:
  _Iosarray(int _Idx, _Iosarray *_Link)
   : _Next(_Link), _Index(_Idx), _Lo(0), _Vp(0)
   {
   }

  _Iosarray *_Next;
  int _Index;
  long _Lo;
  void *_Vp;
  };


 struct _Fnarray
  {
  _Fnarray(int _Idx, event_callback _Pnew, _Fnarray *_Link)
   : _Next(_Link), _Index(_Idx), _Pfn(_Pnew)
   {
   }

  _Fnarray *_Next;
  int _Index;
  event_callback _Pfn;
  };

 void _Callfns(event _Ev)
  {
  for (_Fnarray *_Pfa = _Calls; _Pfa != 0; _Pfa = _Pfa->_Next)
   (*_Pfa->_Pfn)(_Ev, *this, _Pfa->_Index);
  }

 _Iosarray& _Findarr(int _Idx)
  {
  _Iosarray *_Ptr1, *_Ptr2;

  for (_Ptr1 = _Arr, _Ptr2 = 0; _Ptr1 != 0; _Ptr1 = _Ptr1->_Next)
   if (_Ptr1->_Index == _Idx)
    return (*_Ptr1);
   else if (_Ptr2 == 0 && _Ptr1->_Lo == 0 && _Ptr1->_Vp == 0)
    _Ptr2 = _Ptr1;

  if (_Ptr2 != 0)
   {
   _Ptr2->_Index = _Idx;
   return (*_Ptr2);
   }

  _Arr = new _Iosarray(_Idx, _Arr);
  return (*_Arr);
  }

 void _Tidy()
  {
  _Callfns(erase_event);
  _Iosarray *_Ptr1, *_Ptr2;

  for (_Ptr1 = _Arr; _Ptr1 != 0; _Ptr1 = _Ptr2)
   {
   _Ptr2 = _Ptr1->_Next;
   delete (_Ptr1);
   }
  _Arr = 0;

  _Fnarray *_Pfa1, *_Pfa2;
  for (_Pfa1 = _Calls; _Pfa1 != 0; _Pfa1 = _Pfa2)
   {
   _Pfa2 = _Pfa1->_Next;
   delete (_Pfa1);
   }
  _Calls = 0;
  }

 iostate _Mystate;
 iostate _Except;
 fmtflags _Fmtfl;
 streamsize _Prec;
 streamsize _Wide;
 _Iosarray *_Arr;
 _Fnarray *_Calls;
 locale *_Ploc;

 static int _Index;
 static bool _Sync;
 };

inline ios_base::_Fmtflags& operator&=(ios_base::_Fmtflags& _Left, ios_base::_Fmtflags _Right) { _Left = (ios_base::_Fmtflags)((int)_Left & (int)_Right); return _Left; } inline ios_base::_Fmtflags& operator|=(ios_base::_Fmtflags& _Left, ios_base::_Fmtflags _Right) { _Left = (ios_base::_Fmtflags)((int)_Left | (int)_Right); return _Left; } inline ios_base::_Fmtflags& operator^=(ios_base::_Fmtflags& _Left, ios_base::_Fmtflags _Right) { _Left = (ios_base::_Fmtflags)((int)_Left ^ (int)_Right); return _Left; } inline ios_base::_Fmtflags operator&(ios_base::_Fmtflags _Left, ios_base::_Fmtflags _Right) { return ((ios_base::_Fmtflags)((int)_Left & (int)_Right)); } inline ios_base::_Fmtflags operator|(ios_base::_Fmtflags _Left, ios_base::_Fmtflags _Right) { return ((ios_base::_Fmtflags)((int)_Left | (int)_Right)); } inline ios_base::_Fmtflags operator^(ios_base::_Fmtflags _Left, ios_base::_Fmtflags _Right) { return ((ios_base::_Fmtflags)((int)_Left ^ (int)_Right)); } inline ios_base::_Fmtflags operator~(ios_base::_Fmtflags _Left) { return ((ios_base::_Fmtflags)~(int)_Left); }
inline ios_base::_Iostate& operator&=(ios_base::_Iostate& _Left, ios_base::_Iostate _Right) { _Left = (ios_base::_Iostate)((int)_Left & (int)_Right); return _Left; } inline ios_base::_Iostate& operator|=(ios_base::_Iostate& _Left, ios_base::_Iostate _Right) { _Left = (ios_base::_Iostate)((int)_Left | (int)_Right); return _Left; } inline ios_base::_Iostate& operator^=(ios_base::_Iostate& _Left, ios_base::_Iostate _Right) { _Left = (ios_base::_Iostate)((int)_Left ^ (int)_Right); return _Left; } inline ios_base::_Iostate operator&(ios_base::_Iostate _Left, ios_base::_Iostate _Right) { return ((ios_base::_Iostate)((int)_Left & (int)_Right)); } inline ios_base::_Iostate operator|(ios_base::_Iostate _Left, ios_base::_Iostate _Right) { return ((ios_base::_Iostate)((int)_Left | (int)_Right)); } inline ios_base::_Iostate operator^(ios_base::_Iostate _Left, ios_base::_Iostate _Right) { return ((ios_base::_Iostate)((int)_Left ^ (int)_Right)); } inline ios_base::_Iostate operator~(ios_base::_Iostate _Left) { return ((ios_base::_Iostate)~(int)_Left); }
inline ios_base::_Openmode& operator&=(ios_base::_Openmode& _Left, ios_base::_Openmode _Right) { _Left = (ios_base::_Openmode)((int)_Left & (int)_Right); return _Left; } inline ios_base::_Openmode& operator|=(ios_base::_Openmode& _Left, ios_base::_Openmode _Right) { _Left = (ios_base::_Openmode)((int)_Left | (int)_Right); return _Left; } inline ios_base::_Openmode& operator^=(ios_base::_Openmode& _Left, ios_base::_Openmode _Right) { _Left = (ios_base::_Openmode)((int)_Left ^ (int)_Right); return _Left; } inline ios_base::_Openmode operator&(ios_base::_Openmode _Left, ios_base::_Openmode _Right) { return ((ios_base::_Openmode)((int)_Left & (int)_Right)); } inline ios_base::_Openmode operator|(ios_base::_Openmode _Left, ios_base::_Openmode _Right) { return ((ios_base::_Openmode)((int)_Left | (int)_Right)); } inline ios_base::_Openmode operator^(ios_base::_Openmode _Left, ios_base::_Openmode _Right) { return ((ios_base::_Openmode)((int)_Left ^ (int)_Right)); } inline ios_base::_Openmode operator~(ios_base::_Openmode _Left) { return ((ios_base::_Openmode)~(int)_Left); }
inline ios_base::_Seekdir& operator&=(ios_base::_Seekdir& _Left, ios_base::_Seekdir _Right) { _Left = (ios_base::_Seekdir)((int)_Left & (int)_Right); return _Left; } inline ios_base::_Seekdir& operator|=(ios_base::_Seekdir& _Left, ios_base::_Seekdir _Right) { _Left = (ios_base::_Seekdir)((int)_Left | (int)_Right); return _Left; } inline ios_base::_Seekdir& operator^=(ios_base::_Seekdir& _Left, ios_base::_Seekdir _Right) { _Left = (ios_base::_Seekdir)((int)_Left ^ (int)_Right); return _Left; } inline ios_base::_Seekdir operator&(ios_base::_Seekdir _Left, ios_base::_Seekdir _Right) { return ((ios_base::_Seekdir)((int)_Left & (int)_Right)); } inline ios_base::_Seekdir operator|(ios_base::_Seekdir _Left, ios_base::_Seekdir _Right) { return ((ios_base::_Seekdir)((int)_Left | (int)_Right)); } inline ios_base::_Seekdir operator^(ios_base::_Seekdir _Left, ios_base::_Seekdir _Right) { return ((ios_base::_Seekdir)((int)_Left ^ (int)_Right)); } inline ios_base::_Seekdir operator~(ios_base::_Seekdir _Left) { return ((ios_base::_Seekdir)~(int)_Left); }
}
# 5 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/streambuf" 2 3

namespace std {

template<class _Elem,
 class _Traits>
 class basic_streambuf
 {
 typedef basic_streambuf<_Elem, _Traits> _Myt;

protected:
 basic_streambuf()
  : _Plocale(new locale)
  {
  _Init();
  }

 basic_streambuf(_Uninitialized)
  : _Mylock(_Noinit)
  {
  }
# 68 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/streambuf" 3
private:
 basic_streambuf(const basic_streambuf<_Elem, _Traits>&);
 basic_streambuf<_Elem, _Traits>&
  operator=(const basic_streambuf<_Elem, _Traits>&);


public:
 typedef _Elem char_type;
 typedef _Traits traits_type;

 virtual ~basic_streambuf()
  {
  delete (_Plocale);
  }

 typedef typename _Traits::int_type int_type;
 typedef typename _Traits::pos_type pos_type;
 typedef typename _Traits::off_type off_type;

 pos_type pubseekoff(off_type _Off,
  ios_base::seekdir _Way,
  ios_base::openmode _Mode = ios_base::in | ios_base::out)
  {
  return (seekoff(_Off, _Way, _Mode));
  }

 pos_type pubseekoff(off_type _Off,
  ios_base::seek_dir _Way,
  ios_base::open_mode _Mode)
  {
  return (pubseekoff(_Off, (ios_base::seekdir)_Way,
   (ios_base::openmode)_Mode));
  }

 pos_type pubseekpos(pos_type _Pos,
  ios_base::openmode _Mode = ios_base::in | ios_base::out)
  {
  return (seekpos(_Pos, _Mode));
  }

 pos_type pubseekpos(pos_type _Pos,
  ios_base::open_mode _Mode)
  {
  return (seekpos(_Pos, (ios_base::openmode)_Mode));
  }

 _Myt *pubsetbuf(_Elem *_Buffer,
  streamsize _Count)
  {
  return (setbuf(_Buffer, _Count));
  }

 locale pubimbue(const locale &_Newlocale)
  {
  locale _Oldlocale = *_Plocale;
  imbue(_Newlocale);
  *_Plocale = _Newlocale;
  return (_Oldlocale);
  }

 locale getloc() const
  {
  return (*_Plocale);
  }

 streamsize in_avail()
  {
  streamsize _Res = _Gnavail();
  return (0 < _Res ? _Res : showmanyc());
  }

 int pubsync()
  {
  return (sync());
  }

 int_type sbumpc()
  {
  return (0 < _Gnavail()
   ? _Traits::to_int_type(*_Gninc()) : uflow());
  }

 int_type sgetc()
  {
  return (0 < _Gnavail()
   ? _Traits::to_int_type(*gptr()) : underflow());
  }

 streamsize sgetn(_Elem *_Ptr,
  streamsize _Count)
  {
  return (xsgetn(_Ptr, _Count));
  }

 int_type snextc()
  {
  return (1 < _Gnavail()
   ? _Traits::to_int_type(*_Gnpreinc())
   : _Traits::eq_int_type(_Traits::eof(), sbumpc())
    ? _Traits::eof() : sgetc());
  }

 int_type sputbackc(_Elem _Ch)
  {
  return (gptr() != 0 && eback() < gptr()
   && _Traits::eq(_Ch, gptr()[-1])
   ? _Traits::to_int_type(*_Gndec())
   : pbackfail(_Traits::to_int_type(_Ch)));
  }

 void stossc()
  {
  if (0 < _Gnavail())
   _Gninc();
  else
   uflow();
  }

 int_type sungetc()
  {
  return (gptr() != 0 && eback() < gptr()
   ? _Traits::to_int_type(*_Gndec()) : pbackfail());
  }

 int_type sputc(_Elem _Ch)
  {
  return (0 < _Pnavail()
   ? _Traits::to_int_type(*_Pninc() = _Ch)
   : overflow(_Traits::to_int_type(_Ch)));
  }

 streamsize sputn(const _Elem *_Ptr,
  streamsize _Count)
  {
  return (xsputn(_Ptr, _Count));
  }

 virtual void _Lock()
  {
  _Mylock._Lock();
  }

 virtual void _Unlock()
  {
  _Mylock._Unlock();
  }

protected:
 _Elem *eback() const
  {
  return (*_IGfirst);
  }

 _Elem *gptr() const
  {
  return (*_IGnext);
  }

 _Elem *pbase() const
  {
  return (*_IPfirst);
  }

 _Elem *pptr() const
  {
  return (*_IPnext);
  }
# 338 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/streambuf" 3
 _Elem *egptr() const
  {
  return (*_IGlast);
  }

 void gbump(int _Off)
  {
  *_IGnext += _Off;
  }

 void setg(_Elem *_First, _Elem *_Next, _Elem *_Last)
  {
  *_IGfirst = _First, *_IGnext = _Next, *_IGlast = _Last;
  }

 _Elem *epptr() const
  {
  return (*_IPlast);
  }

 _Elem *_Gndec()
  {
  return (--*_IGnext);
  }

 _Elem *_Gninc()
  {
  return ((*_IGnext)++);
  }

 _Elem *_Gnpreinc()
  {
  return (++(*_IGnext));
  }

 streamsize _Gnavail() const
  {
  return ((streamsize)(*_IGnext != 0 ? *_IGlast - *_IGnext : 0));
  }

 void pbump(int _Off)
  {
  *_IPnext += _Off;
  }

 void setp(_Elem *_First, _Elem *_Last)
  {
  *_IPfirst = _First;
  *_IPnext = _First;
  *_IPlast = _Last;
  }

 void setp(_Elem *_First, _Elem *_Next, _Elem *_Last)
  {
  *_IPfirst = _First;
  *_IPnext = _Next;
  *_IPlast = _Last;
  }

 _Elem *_Pninc()
  {
  return ((*_IPnext)++);
  }

 streamsize _Pnavail() const
  {
  return ((streamsize)(*_IPnext != 0 ? *_IPlast - *_IPnext : 0));
  }

 void _Init()
  {
  _IGfirst = &_Gfirst;
  _IPfirst = &_Pfirst;
  _IGnext = &_Gnext;
  _IPnext = &_Pnext;
  _IGlast = &_Glast;
  _IPlast = &_Plast;
  setp(0, 0);
  setg(0, 0, 0);
  }

 void _Init(_Elem **_Gf, _Elem **_Gn, _Elem **_Gl,
  _Elem **_Pf, _Elem **_Pn, _Elem **_Pl)
  {
  _IGfirst = _Gf;
  _IPfirst = _Pf;
  _IGnext = _Gn;
  _IPnext = _Pn;
  _IGlast = _Gl;
  _IPlast = _Pl;
  }



public:
 int allocate()
  {
  return (0);
  }

 _Elem *base() const
  {
  return (eback());
  }

 int blen() const
  {
  return (egptr() == 0 ? 0 : (int)(egptr() - eback()));
  }

 int in_avail() const
  {
  return (egptr() == 0 ? 0 : (int)(egptr() - gptr()));
  }

 int out_waiting() const
  {
  return (epptr() == 0 ? 0 : (int)(epptr() - pptr()));
  }

 void setb(char *, char *, int)
  {
  }


 virtual int_type overflow(int_type = _Traits::eof())
  {
  return (_Traits::eof());
  }

 virtual int_type pbackfail(int_type = _Traits::eof())
  {
  return (_Traits::eof());
  }

 virtual streamsize showmanyc()
  {
  return (0);
  }

 virtual int_type underflow()
  {
  return (_Traits::eof());
  }

 virtual int_type uflow()
  {
  return (_Traits::eq_int_type(_Traits::eof(), underflow())
   ? _Traits::eof() : _Traits::to_int_type(*_Gninc()));
  }

 virtual streamsize xsgetn(_Elem * _Ptr,
  streamsize _Count)
  {
  int_type _Meta;
  streamsize _Size, _Copied;

  for (_Copied = 0; 0 < _Count; )
   if (0 < (_Size = _Gnavail()))
    {
    if (_Count < _Size)
     _Size = _Count;
    _Traits::copy(_Ptr, gptr(), (size_t)_Size);
    _Ptr += _Size;
    _Copied += _Size;
    _Count -= _Size;
    gbump((int)_Size);
    }
   else if (_Traits::eq_int_type(_Traits::eof(), _Meta = uflow()))
    break;
   else
    {
    *_Ptr++ = _Traits::to_char_type(_Meta);
    ++_Copied;
    --_Count;
    }

  return (_Copied);
  }

 virtual streamsize xsputn(const _Elem *_Ptr,
  streamsize _Count)
  {
  streamsize _Size, _Copied;

  for (_Copied = 0; 0 < _Count; )
   if (0 < (_Size = _Pnavail()))
    {
    if (_Count < _Size)
     _Size = _Count;
    _Traits::copy(pptr(), _Ptr, (size_t)_Size);
    _Ptr += _Size;
    _Copied += _Size;
    _Count -= _Size;
    pbump((int)_Size);
    }
   else if (_Traits::eq_int_type(_Traits::eof(),
    overflow(_Traits::to_int_type(*_Ptr))))
    break;
   else
    {
    ++_Ptr;
    ++_Copied;
    --_Count;
    }

  return (_Copied);
  }

 virtual pos_type seekoff(off_type,
  ios_base::seekdir,
  ios_base::openmode = ios_base::in | ios_base::out)
  {
  return (streampos(_BADOFF));
  }

 virtual pos_type seekpos(pos_type,
  ios_base::openmode = ios_base::in | ios_base::out)
  {
  return (streampos(_BADOFF));
  }

 virtual _Myt *setbuf(_Elem *, streamsize)
  {
  return (this);
  }

 virtual int sync()
  {
  return (0);
  }

 virtual void imbue(const locale&)
  {
  }

private:
 _Mutex _Mylock;
 _Elem *_Gfirst;
 _Elem *_Pfirst;
 _Elem **_IGfirst;
 _Elem **_IPfirst;
 _Elem *_Gnext;
 _Elem *_Pnext;
 _Elem **_IGnext;
 _Elem **_IPnext;
# 592 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/streambuf" 3
 _Elem *_Glast;
 _Elem *_Plast;
 _Elem **_IGlast;
 _Elem **_IPlast;


 locale *_Plocale;
 };


template<class _Elem,
 class _Traits>
 class istreambuf_iterator
  : public iterator<input_iterator_tag,
   _Elem, typename _Traits::off_type, _Elem *, _Elem&>
 {
 typedef istreambuf_iterator<_Elem, _Traits> _Myt;
public:
 typedef _Elem char_type;
 typedef _Traits traits_type;
 typedef basic_streambuf<_Elem, _Traits> streambuf_type;
 typedef basic_istream<_Elem, _Traits> istream_type;

 typedef typename traits_type::int_type int_type;

 istreambuf_iterator(streambuf_type *_Sb = 0) throw ()
  : _Strbuf(_Sb), _Got(_Sb == 0)
  {
  }

 istreambuf_iterator(istream_type& _Istr) throw ()
  : _Strbuf(_Istr.rdbuf()), _Got(_Istr.rdbuf() == 0)
  {
  }

 _Elem operator*() const
  {
  if (!_Got)
   _Peek();






  return (_Val);
  }

 _Myt& operator++()
  {





  _Inc();
  return (*this);
  }

 _Myt operator++(int)
  {
  if (!_Got)
   _Peek();
  _Myt _Tmp = *this;
  ++*this;
  return (_Tmp);
  }

 bool equal(const _Myt& _Right) const
  {
  if (!_Got)
   _Peek();
  if (!_Right._Got)
   _Right._Peek();
  return (_Strbuf == 0 && _Right._Strbuf == 0
   || _Strbuf != 0 && _Right._Strbuf != 0);
  }

private:
 void _Inc()
  {
  if (_Strbuf == 0
   || traits_type::eq_int_type(traits_type::eof(),
    _Strbuf->sbumpc()))
   _Strbuf = 0, _Got = true;
  else
   _Got = false;
  }

 _Elem _Peek() const
  {
  int_type _Meta;
  if (_Strbuf == 0
   || traits_type::eq_int_type(traits_type::eof(),
    _Meta = _Strbuf->sgetc()))
   _Strbuf = 0;
  else
   _Val = traits_type::to_char_type(_Meta);
  _Got = true;
  return (_Val);
  }

 mutable streambuf_type *_Strbuf;
 mutable bool _Got;
 mutable _Elem _Val;
 };

template<class _Elem,
 class _Traits>
 struct _Is_checked_helper<istreambuf_iterator<_Elem, _Traits> >
  : public _True_type
 {
 };


template<class _Elem,
 class _Traits> inline
 bool operator==(
  const istreambuf_iterator<_Elem, _Traits>& _Left,
  const istreambuf_iterator<_Elem, _Traits>& _Right)
 {
 return (_Left.equal(_Right));
 }

template<class _Elem,
 class _Traits> inline
 bool operator!=(
  const istreambuf_iterator<_Elem, _Traits>& _Left,
  const istreambuf_iterator<_Elem, _Traits>& _Right)
 {
 return (!(_Left == _Right));
 }


template<class _Elem,
 class _Traits>
 class ostreambuf_iterator
  : public _Outit
 {
 typedef ostreambuf_iterator<_Elem, _Traits> _Myt;
public:
 typedef _Elem char_type;
 typedef _Traits traits_type;
 typedef basic_streambuf<_Elem, _Traits> streambuf_type;
 typedef basic_ostream<_Elem, _Traits> ostream_type;

 ostreambuf_iterator(streambuf_type *_Sb) throw ()
  : _Failed(false), _Strbuf(_Sb)
  {
  }

 ostreambuf_iterator(ostream_type& _Ostr) throw ()
  : _Failed(false), _Strbuf(_Ostr.rdbuf())
  {
  }

 _Myt& operator=(_Elem _Right)
  {
  if (_Strbuf == 0
   || traits_type::eq_int_type(_Traits::eof(),
    _Strbuf->sputc(_Right)))
   _Failed = true;
  return (*this);
  }

 _Myt& operator*()
  {
  return (*this);
  }

 _Myt& operator++()
  {
  return (*this);
  }

 _Myt& operator++(int)
  {
  return (*this);
  }

 bool failed() const throw ()
  {
  return (_Failed);
  }

private:
 bool _Failed;
 streambuf_type *_Strbuf;
 };

template<class _Elem,
 class _Traits>
 struct _Is_checked_helper<ostreambuf_iterator<_Elem, _Traits> >
  : public _True_type
 {
 };
}
# 9 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/xlocnum" 2 3



extern "C" {
extern float _Stofx(const char *, char **,
 long, int *);
extern double _Stodx(const char *, char **,
 long, int *);
extern long double _Stoldx(const char *, char **,
 long, int *);
extern long _Stolx(const char *, char **,
 int, int *);
extern unsigned long _Stoulx(const char *, char **,
 int, int *);
extern long long _Stollx(const char *, char **,
 int, int *);
extern unsigned long long _Stoullx(const char *, char **,
 int, int *);
}


namespace std {



template<class _Elem>
 class numpunct
  : public locale::facet
 {
public:
 typedef basic_string<_Elem, char_traits<_Elem>, allocator<_Elem> >
  string_type;
 typedef _Elem char_type;

 static locale::id id;

 _Elem decimal_point() const
  {
  return (do_decimal_point());
  }

 _Elem thousands_sep() const
  {
  return (do_thousands_sep());
  }

 string grouping() const
  {
  return (do_grouping());
  }

 string_type falsename() const
  {
  return (do_falsename());
  }

 string_type truename() const
  {
  return (do_truename());
  }

 explicit numpunct(size_t _Refs = 0)
  : locale::facet(_Refs)
  {
  { _Locinfo _Lobj;
   _Init(_Lobj);
   if (_Kseparator == 0)
    _Kseparator =
     _Maklocchr(',', (_Elem *)0, _Lobj._Getcvt());
  }
  }

 numpunct(const _Locinfo& _Lobj, size_t _Refs = 0, bool _Isdef = false)
  : locale::facet(_Refs)
  {
  _Init(_Lobj, _Isdef);
  }

 static size_t _Getcat(const locale::facet **_Ppf = 0,
  const locale *_Ploc = 0)
  {
  if (_Ppf != 0 && *_Ppf == 0)
   *_Ppf = new numpunct<_Elem>(
    _Locinfo(_Ploc->c_str()), 0, true);
  return (4);
  }

protected:
 virtual ~numpunct()
  {
  _Tidy();
  }

 numpunct(const char *_Locname, size_t _Refs = 0, bool _Isdef = false)
  : locale::facet(_Refs)
  {
  { _Locinfo _Lobj(_Locname);
   _Init(_Lobj, _Isdef);
  }
  }

 void _Init(const _Locinfo& _Lobj, bool _Isdef = false)
  {
  const lconv *_Ptr = _Lobj._Getlconv();

  _Grouping = 0;
  _Falsename = 0;
  _Truename = 0;

  try {
  _Grouping = _Maklocstr(_Isdef ? "" : _Ptr->grouping, (char *)0, _Lobj._Getcvt())
                   ;
  _Falsename = _Maklocstr(_Lobj._Getfalse(), (_Elem *)0, _Lobj._Getcvt());
  _Truename = _Maklocstr(_Lobj._Gettrue(), (_Elem *)0, _Lobj._Getcvt());
  } catch (...) {
  _Tidy();
  throw;
  }

  _Dp = _Maklocchr(_Ptr->decimal_point[0], (_Elem *)0, _Lobj._Getcvt());
  _Kseparator =
   _Maklocchr(_Ptr->thousands_sep[0], (_Elem *)0, _Lobj._Getcvt());

  if (_Isdef)
   {

   _Dp = _Maklocchr('.', (_Elem *)0, _Lobj._Getcvt());
   _Kseparator = _Maklocchr(',', (_Elem *)0, _Lobj._Getcvt());
   }
  }

 virtual _Elem do_decimal_point() const
  {
  return (_Dp);
  }

 virtual _Elem do_thousands_sep() const
  {
  return (_Kseparator);
  }

 virtual string do_grouping() const
  {
  return (string(_Grouping));
  }

 virtual string_type do_falsename() const
  {
  return (string_type(_Falsename));
  }

 virtual string_type do_truename() const
  {
  return (string_type(_Truename));
  }

private:
 void _Tidy()
  {
  delete[] _Grouping;
  delete[] _Falsename;
  delete[] _Truename;
  }

 const char *_Grouping;
 _Elem _Dp;
 _Elem _Kseparator;
 const _Elem *_Falsename;
 const _Elem *_Truename;
 };


template<class _Elem>
 class numpunct_byname
  : public numpunct<_Elem>
 {
public:
 explicit numpunct_byname(const char *_Locname, size_t _Refs = 0)
  : numpunct<_Elem>(_Locname, _Refs)
  {
  }


 explicit numpunct_byname(const string& _Str, size_t _Refs = 0)
  : numpunct<_Elem>(_Str.c_str(), _Refs)
  {
  }


protected:
 virtual ~numpunct_byname()
  {
  }
 };


template<class _Elem>
 locale::id numpunct<_Elem>::id;


template<class _Elem,
 class _InIt = istreambuf_iterator<_Elem, char_traits<_Elem> > >
 class num_get
  : public locale::facet
 {
public:
 typedef numpunct<_Elem> _Mypunct;
 typedef basic_string<_Elem, char_traits<_Elem>, allocator<_Elem> >
  _Mystr;

 static size_t _Getcat(const locale::facet **_Ppf = 0,
  const locale *_Ploc = 0)
  {
  if (_Ppf != 0 && *_Ppf == 0)
   *_Ppf = new num_get<_Elem, _InIt>(
    _Locinfo(_Ploc->c_str()));
  return (4);
  }

 static locale::id id;

protected:
 virtual ~num_get()
  {
  }

 void _Init(const _Locinfo& _Lobj)
  {
  _Cvt = _Lobj._Getcvt();
  }

 _Locinfo::_Cvtvec _Cvt;

public:
 explicit num_get(size_t _Refs = 0)
  : locale::facet(_Refs)
  {
  { _Locinfo _Lobj;
   _Init(_Lobj);
  }
  }

 num_get(const _Locinfo& _Lobj, size_t _Refs = 0)
  : locale::facet(_Refs)
  {
  _Init(_Lobj);
  }

 typedef _Elem char_type;
 typedef _InIt iter_type;

 _InIt get(_InIt _First, _InIt _Last,
  ios_base& _Iosbase, ios_base::iostate& _State,
   _Bool& _Val) const
  {
  return (do_get(_First, _Last, _Iosbase, _State, _Val));
  }

 _InIt get(_InIt _First, _InIt _Last,
  ios_base& _Iosbase, ios_base::iostate& _State,
   unsigned short& _Val) const
  {
  return (do_get(_First, _Last, _Iosbase, _State, _Val));
  }

 _InIt get(_InIt _First, _InIt _Last,
  ios_base& _Iosbase, ios_base::iostate& _State,
   unsigned int& _Val) const
  {
  return (do_get(_First, _Last, _Iosbase, _State, _Val));
  }

 _InIt get(_InIt _First, _InIt _Last,
  ios_base& _Iosbase, ios_base::iostate& _State,
   long& _Val) const
  {
  return (do_get(_First, _Last, _Iosbase, _State, _Val));
  }

 _InIt get(_InIt _First, _InIt _Last,
  ios_base& _Iosbase, ios_base::iostate& _State,
   unsigned long& _Val) const
  {
  return (do_get(_First, _Last, _Iosbase, _State, _Val));
  }


 _InIt get(_InIt _First, _InIt _Last,
  ios_base& _Iosbase, ios_base::iostate& _State,
   long long& _Val) const
  {
  return (do_get(_First, _Last, _Iosbase, _State, _Val));
  }

 _InIt get(_InIt _First, _InIt _Last,
  ios_base& _Iosbase, ios_base::iostate& _State,
   unsigned long long& _Val) const
  {
  return (do_get(_First, _Last, _Iosbase, _State, _Val));
  }


 _InIt get(_InIt _First, _InIt _Last,
  ios_base& _Iosbase, ios_base::iostate& _State,
   float& _Val) const
  {
  return (do_get(_First, _Last, _Iosbase, _State, _Val));
  }

 _InIt get(_InIt _First, _InIt _Last,
  ios_base& _Iosbase, ios_base::iostate& _State,
   double& _Val) const
  {
  return (do_get(_First, _Last, _Iosbase, _State, _Val));
  }

 _InIt get(_InIt _First, _InIt _Last,
  ios_base& _Iosbase, ios_base::iostate& _State,
   long double& _Val) const
  {
  return (do_get(_First, _Last, _Iosbase, _State, _Val));
  }

 _InIt get(_InIt _First, _InIt _Last,
  ios_base& _Iosbase, ios_base::iostate& _State,
   void *& _Val) const
  {
  return (do_get(_First, _Last, _Iosbase, _State, _Val));
  }

protected:
 virtual _InIt do_get(_InIt _First, _InIt _Last,
  ios_base& _Iosbase, ios_base::iostate& _State,
   _Bool& _Val) const
  {
  ;
  int _Ans = -1;

  if (_Iosbase.flags() & ios_base::boolalpha)
   {
   typedef typename _Mystr::size_type _Mystrsize;
   const _Mypunct& _Punct_fac = use_facet< _Mypunct >(_Iosbase.getloc());
   _Mystr _Str((_Mystrsize)1, (char_type)0);
   _Str += _Punct_fac.falsename();
   _Str += (char_type)0;
   _Str += _Punct_fac.truename();
   _Ans = _Getloctxt(_First, _Last, (size_t)2, _Str.c_str());
   }
  else
   {
   char _Ac[32], *_Ep;
   int _Errno = 0;
   const unsigned long _Ulo = :: _Stoulx(_Ac, &_Ep,
    _Getifld(_Ac, _First, _Last, _Iosbase.flags(),
     _Iosbase.getloc()), &_Errno);
   if (_Ep != _Ac && _Errno == 0 && _Ulo <= 1)
    _Ans = _Ulo;
   }

  if (_First == _Last)
   _State |= ios_base::eofbit;
  if (_Ans < 0)
   _State |= ios_base::failbit;
  else
   _Val = _Ans != 0;
  return (_First);
  }

 virtual _InIt do_get(_InIt _First, _InIt _Last,
  ios_base& _Iosbase, ios_base::iostate& _State,
   unsigned short& _Val) const
  {
  ;
  char _Ac[32], *_Ep;
  int _Errno = 0;
  int _Base = _Getifld(_Ac, _First, _Last, _Iosbase.flags(),
   _Iosbase.getloc());
  char *_Ptr = _Ac[0] == '-' ? _Ac + 1 : _Ac;
  const unsigned long _Ans =
   :: _Stoulx(_Ptr, &_Ep, _Base, &_Errno);

  if (_First == _Last)
   _State |= ios_base::eofbit;
  if (_Ep == _Ptr || _Errno != 0 || (32767 * 2 + 1) < _Ans)
   _State |= ios_base::failbit;
  else
   _Val = (unsigned short)(_Ac[0] == '-'
    ? 0 -_Ans : _Ans);
  return (_First);
  }

 virtual _InIt do_get(_InIt _First, _InIt _Last,
  ios_base& _Iosbase, ios_base::iostate& _State,
   unsigned int& _Val) const
  {
  ;
  char _Ac[32], *_Ep;
  int _Errno = 0;
  int _Base = _Getifld(_Ac, _First, _Last, _Iosbase.flags(),
   _Iosbase.getloc());
  char *_Ptr = _Ac[0] == '-' ? _Ac + 1 : _Ac;
  const unsigned long _Ans =
   :: _Stoulx(_Ptr, &_Ep, _Base, &_Errno);

  if (_First == _Last)
   _State |= ios_base::eofbit;
  if (_Ep == _Ptr || _Errno != 0 || (2147483647 * 2U + 1U) < _Ans)
   _State |= ios_base::failbit;
  else
   _Val = _Ac[0] == '-' ? 0 -_Ans : _Ans;
  return (_First);
  }

 virtual _InIt do_get(_InIt _First, _InIt _Last,
  ios_base& _Iosbase, ios_base::iostate& _State,
   long& _Val) const
  {
  ;
  char _Ac[32], *_Ep;
  int _Errno = 0;
  const long _Ans = :: _Stolx(_Ac, &_Ep,
   _Getifld(_Ac, _First, _Last, _Iosbase.flags(),
    _Iosbase.getloc()), &_Errno);

  if (_First == _Last)
   _State |= ios_base::eofbit;
  if (_Ep == _Ac || _Errno != 0)
   _State |= ios_base::failbit;
  else
   _Val = _Ans;
  return (_First);
  }

 virtual _InIt do_get(_InIt _First, _InIt _Last,
  ios_base& _Iosbase, ios_base::iostate& _State,
   unsigned long& _Val) const
  {
  ;
  char _Ac[32], *_Ep;
  int _Errno = 0;
  const unsigned long _Ans = :: _Stoulx(_Ac, &_Ep,
   _Getifld(_Ac, _First, _Last, _Iosbase.flags(),
    _Iosbase.getloc()), &_Errno);

  if (_First == _Last)
   _State |= ios_base::eofbit;
  if (_Ep == _Ac || _Errno != 0)
   _State |= ios_base::failbit;
  else
   _Val = _Ans;
  return (_First);
  }


 virtual _InIt do_get(_InIt _First, _InIt _Last,
  ios_base& _Iosbase, ios_base::iostate& _State,
   long long& _Val) const
  {
  ;
  char _Ac[32], *_Ep;
  int _Errno = 0;
  const long long _Ans = :: _Stollx(_Ac, &_Ep,
   _Getifld(_Ac, _First, _Last, _Iosbase.flags(),
    _Iosbase.getloc()), &_Errno);

  if (_First == _Last)
   _State |= ios_base::eofbit;
  if (_Ep == _Ac || _Errno != 0)
   _State |= ios_base::failbit;
  else
   _Val = _Ans;
  return (_First);
  }

 virtual _InIt do_get(_InIt _First, _InIt _Last,
  ios_base& _Iosbase, ios_base::iostate& _State,
   unsigned long long& _Val) const
  {
  ;
  char _Ac[32], *_Ep;
  int _Errno = 0;
  const unsigned long long _Ans = :: _Stoullx(_Ac, &_Ep,
   _Getifld(_Ac, _First, _Last, _Iosbase.flags(),
    _Iosbase.getloc()), &_Errno);

  if (_First == _Last)
   _State |= ios_base::eofbit;
  if (_Ep == _Ac || _Errno != 0)
   _State |= ios_base::failbit;
  else
   _Val = _Ans;
  return (_First);
  }


 virtual _InIt do_get(_InIt _First, _InIt _Last,
  ios_base& _Iosbase, ios_base::iostate& _State,
   float& _Val) const
  {
  ;
  char _Ac[8 + 48 + 16], *_Ep;
  int _Errno = 0;
  int _Hexexp = 0;
  float _Ans = :: _Stofx(_Ac, &_Ep,
   _Getffld(_Ac, _First, _Last,
    _Iosbase, &_Hexexp), &_Errno);

  if (_Hexexp != 0)
   _Ans = :: ldexpf(_Ans, 4 * _Hexexp);

  if (_First == _Last)
   _State |= ios_base::eofbit;
  if (_Ep == _Ac || _Errno != 0)
   _State |= ios_base::failbit;
  else
   _Val = _Ans;
  return (_First);
  }

 virtual _InIt do_get(_InIt _First, _InIt _Last,
  ios_base& _Iosbase, ios_base::iostate& _State,
   double& _Val) const
  {
  ;
  char _Ac[8 + 48 + 16], *_Ep;
  int _Errno = 0;
  int _Hexexp = 0;
  double _Ans = :: _Stodx(_Ac, &_Ep,
   _Getffld(_Ac, _First, _Last,
    _Iosbase, &_Hexexp), &_Errno);

  if (_Hexexp != 0)
   _Ans = :: ldexp(_Ans, 4 * _Hexexp);

  if (_First == _Last)
   _State |= ios_base::eofbit;
  if (_Ep == _Ac || _Errno != 0)
   _State |= ios_base::failbit;
  else
   _Val = _Ans;
  return (_First);
  }

 virtual _InIt do_get(_InIt _First, _InIt _Last,
  ios_base& _Iosbase, ios_base::iostate& _State,
   long double& _Val) const
  {
  ;
  char _Ac[8 + 48 + 16], *_Ep;
  int _Errno = 0;
  int _Hexexp = 0;
  long double _Ans = :: _Stoldx(_Ac, &_Ep,
   _Getffld(_Ac, _First, _Last,
    _Iosbase, &_Hexexp), &_Errno);

  if (_Hexexp != 0)
   _Ans = :: ldexpl(_Ans, 4 * _Hexexp);

  if (_First == _Last)
   _State |= ios_base::eofbit;
  if (_Ep == _Ac || _Errno != 0)
   _State |= ios_base::failbit;
  else
   _Val = _Ans;
  return (_First);
  }

 virtual _InIt do_get(_InIt _First, _InIt _Last,
  ios_base& _Iosbase, ios_base::iostate& _State,
   void *& _Val) const
  {
  ;
  char _Ac[32], *_Ep;
  int _Errno = 0;


  int _Base = _Getifld(_Ac, _First, _Last, ios_base::hex,
   _Iosbase.getloc());
  const unsigned long long _Ans =
   (sizeof (void *) == sizeof (unsigned long))
    ? (unsigned long long):: _Stoulx(_Ac, &_Ep, _Base, &_Errno)
    : :: _Stoullx(_Ac, &_Ep, _Base, &_Errno);







  if (_First == _Last)
   _State |= ios_base::eofbit;
  if (_Ep == _Ac || _Errno != 0)
   _State |= ios_base::failbit;
  else
   _Val = (void *)((char *)0 + _Ans);
  return (_First);
  }

private:
 int _Getifld(char *_Ac,
  _InIt& _First, _InIt& _Last, ios_base::fmtflags _Basefield,
   const locale& _Loc) const
  {
  const _Mypunct& _Punct_fac = use_facet< _Mypunct >(_Loc);
  const string _Grouping = _Punct_fac.grouping();
  const _Elem _Kseparator = _Grouping.size() == 0
   ? (_Elem)0 : _Punct_fac.thousands_sep();
  const _Elem _E0 = _Maklocchr('0', (_Elem *)0, _Cvt);
  char *_Ptr = _Ac;

  if (_First == _Last)
   ;
  else if (*_First == _Maklocchr('+', (_Elem *)0, _Cvt))
   *_Ptr++ = '+', ++_First;
  else if (*_First == _Maklocchr('-', (_Elem *)0, _Cvt))
   *_Ptr++ = '-', ++_First;

  _Basefield &= ios_base::basefield;
  int _Base = _Basefield == ios_base::oct ? 8
   : _Basefield == ios_base::hex ? 16
   : _Basefield == ios_base::_Fmtzero ? 0 : 10;

  bool _Seendigit = false;
  bool _Nonzero = false;

  if (_First != _Last && *_First == _E0)
   {
   _Seendigit = true, ++_First;
   if (_First != _Last && (*_First == _Maklocchr('x', (_Elem *)0, _Cvt)
     || *_First == _Maklocchr('X', (_Elem *)0, _Cvt))
    && (_Base == 0 || _Base == 16))
    _Base = 16, _Seendigit = false, ++_First;
   else if (_Base == 0)
    _Base = 8;
   }

  int _Dlen = _Base == 0 || _Base == 10 ? 10
   : _Base == 8 ? 8 : 16 + 6;
  string _Groups((size_t)1, (char)_Seendigit);
  size_t _Group = 0;

  for (char *const _Pe = &_Ac[32 - 1];
   _First != _Last; ++_First)
   if (:: memchr((const char *)"0123456789abcdefABCDEF",
    *_Ptr = _Maklocbyte((_Elem)*_First, _Cvt), _Dlen) != 0)
    {
    if ((_Nonzero || *_Ptr != '0') && _Ptr < _Pe)
     ++_Ptr, _Nonzero = true;
    _Seendigit = true;
    if (_Groups[_Group] != 127)
     ++_Groups[_Group];
    }
   else if (_Groups[_Group] == '\0'
    || _Kseparator == (_Elem)0
    || *_First != _Kseparator)
    break;
   else
    {
    _Groups.append((string::size_type)1, '\0');
    ++_Group;
    }

  if (_Group == 0)
   ;
  else if ('\0' < _Groups[_Group])
   ++_Group;
  else
   _Seendigit = false;

  for (const char *_Pg = _Grouping.c_str(); _Seendigit && 0 < _Group; )
   if (*_Pg == 127)
    break;
   else if (0 < --_Group && *_Pg != _Groups[_Group]
    || 0 == _Group && *_Pg < _Groups[_Group])
    _Seendigit = false;
   else if ('\0' < _Pg[1])
    ++_Pg;

  if (_Seendigit && !_Nonzero)
   *_Ptr++ = '0';
  else if (!_Seendigit)
   _Ptr = _Ac;
  *_Ptr = '\0';
  return (_Base);
  }

 int _Getffld(char *_Ac,
  _InIt& _First, _InIt &_Last,
  ios_base& _Iosbase, int *_Phexexp) const
  {
  if ((_Iosbase.flags() & ios_base::floatfield) == ios_base::hexfloat)
   return (_Getffldx(_Ac, _First, _Last,
    _Iosbase, _Phexexp));

  const _Mypunct& _Punct_fac = use_facet< _Mypunct >(_Iosbase.getloc());
  const string _Grouping = _Punct_fac.grouping();
  const _Elem _E0 = _Maklocchr('0', (_Elem *)0, _Cvt);
  char *_Ptr = _Ac;
  bool _Bad = false;

  if (_First == _Last)
   ;
  else if (*_First == _Maklocchr('+', (_Elem *)0, _Cvt))
   *_Ptr++ = '+', ++_First;
  else if (*_First == _Maklocchr('-', (_Elem *)0, _Cvt))
   *_Ptr++ = '-', ++_First;

  bool _Seendigit = false;
  int _Significant = 0;
  int _Pten = 0;

  if (*_Grouping.c_str() == 127 || *_Grouping.c_str() <= '\0')
   for (; _First != _Last
    && _E0 <= *_First && *_First <= _E0 + 9;
     _Seendigit = true, ++_First)
    if (48 <= _Significant)
     ++_Pten;
    else if (*_First == _E0 && _Significant == 0)
     ;
    else
     {
     *_Ptr++ = (char)((*_First - _E0) + '0');
     ++_Significant;
     }
  else
   {
   const _Elem _Kseparator = _Grouping.size() == 0
    ? (_Elem)0 : _Punct_fac.thousands_sep();
   string _Groups((size_t)1, '\0');
   size_t _Group = 0;

   for (; _First != _Last; ++_First)
    if (_E0 <= *_First && *_First <= _E0 + 9)
     {
     _Seendigit = true;
     if (48 <= _Significant)
      ++_Pten;
     else if (*_First == _E0 && _Significant == 0)
      ;
     else
      {
      *_Ptr++ = (char)((*_First - _E0) + '0');
      ++_Significant;
      }
     if (_Groups[_Group] != 127)
      ++_Groups[_Group];
     }
    else if (_Groups[_Group] == '\0'
     || _Kseparator == (_Elem)0
     || *_First != _Kseparator)
     break;
    else
     {
     _Groups.append((size_t)1, '\0');
     ++_Group;
     }
   if (_Group == 0)
    ;
   else if ('\0' < _Groups[_Group])
    ++_Group;
   else
    _Bad = true;

   for (const char *_Pg = _Grouping.c_str();
    !_Bad && 0 < _Group; )
    if (*_Pg == 127)
     break;
    else if (0 < --_Group && *_Pg != _Groups[_Group]
     || 0 == _Group && *_Pg < _Groups[_Group])
     _Bad = true;
    else if ('\0' < _Pg[1])
     ++_Pg;
   }

  if (_Seendigit && _Significant == 0)
   *_Ptr++ = '0';

  if (_First != _Last && *_First == _Punct_fac.decimal_point())
   *_Ptr++ = localeconv()->decimal_point[0], ++_First;

  if (_Significant == 0)
   {
   for (; _First != _Last && *_First == _E0;
    _Seendigit = true, ++_First)
    --_Pten;
   if (_Pten < 0)
    *_Ptr++ = '0', ++_Pten;
   }

  for (; _First != _Last
    && _E0 <= *_First && *_First <= _E0 + 9;
    _Seendigit = true, ++_First)
   if (_Significant < 48)
    {
    *_Ptr++ = (char)((*_First - _E0) + '0');
    ++_Significant;
    }

  if (_Seendigit && _First != _Last
   && (*_First == _Maklocchr('e', (_Elem *)0, _Cvt)
    || *_First == _Maklocchr('E', (_Elem *)0, _Cvt)))
   {
   *_Ptr++ = 'e', ++_First;
   _Seendigit = false, _Significant = 0;

   if (_First == _Last)
    ;
   else if (*_First == _Maklocchr('+', (_Elem *)0, _Cvt))
    *_Ptr++ = '+', ++_First;
   else if (*_First == _Maklocchr('-', (_Elem *)0, _Cvt))
    *_Ptr++ = '-', ++_First;
   for (; _First != _Last && *_First == _E0; )
    _Seendigit = true, ++_First;
   if (_Seendigit)
    *_Ptr++ = '0';
   for (; _First != _Last
    && _E0 <= *_First && *_First <= _E0 + 9;
    _Seendigit = true, ++_First)
    if (_Significant < 8)
     {
     *_Ptr++ = (char)((*_First - _E0) + '0');
     ++_Significant;
     }
   }

  if (_Bad || !_Seendigit)
   _Ptr = _Ac;
  *_Ptr = '\0';
  return (_Pten);
  }

 int _Hexdig(const _Elem _Dig, const _Elem _E0,
  const _Elem _Al, const _Elem _Au) const
  {
  if (_E0 <= _Dig && _Dig <= _E0 + 9)
   return (_Dig - _E0);
  else if (_Al <= _Dig && _Dig <= _Al + 5)
   return (_Dig - _Al + 10);
  else if (_Au <= _Dig && _Dig <= _Au + 5)
   return (_Dig - _Au + 10);
  else
   return (-1);
  }

 int _Getffldx(char *_Ac,
  _InIt& _First, _InIt &_Last,
  ios_base& _Iosbase, int *_Phexexp) const
  {
  const _Mypunct& _Punct_fac = use_facet< _Mypunct >(_Iosbase.getloc());
  const string _Grouping = _Punct_fac.grouping();
  const _Elem _E0 = _Maklocchr('0', (_Elem *)0, _Cvt);
  const _Elem _Al = _Maklocchr('a', (_Elem *)0, _Cvt);
  const _Elem _Au = _Maklocchr('A', (_Elem *)0, _Cvt);
  char *_Ptr = _Ac;
  bool _Bad = false;
  int _Dig;

  if (_First == _Last)
   ;
  else if (*_First == _Maklocchr('+', (_Elem *)0, _Cvt))
   *_Ptr++ = '+', ++_First;
  else if (*_First == _Maklocchr('-', (_Elem *)0, _Cvt))
   *_Ptr++ = '-', ++_First;

  *_Ptr++ = '0';
  *_Ptr++ = 'x';

  bool _Seendigit = false;
  int _Significant = 0;
  int _Phex = 0;

  if (_First == _Last || *_First != _E0)
   ;
  else if (++_First != _Last
   && (*_First == _Maklocchr('x', (_Elem *)0, _Cvt)
     || *_First == _Maklocchr('X', (_Elem *)0, _Cvt)))
   ++_First;
  else
   _Seendigit = true;

  if (*_Grouping.c_str() == 127 || *_Grouping.c_str() <= '\0')
   for (; _First != _Last
    && 0 <= (_Dig = _Hexdig(*_First, _E0, _Al, _Au));
     _Seendigit = true, ++_First)
    if (48 <= _Significant)
     ++_Phex;
    else if (*_First == _E0 && _Significant == 0)
     ;
    else
     {
     *_Ptr++ = "0123456789abcdef"[_Dig];
     ++_Significant;
     }
  else
   {
   const _Elem _Kseparator = _Grouping.size() == 0
    ? (_Elem)0 : _Punct_fac.thousands_sep();
   string _Groups((size_t)1, '\0');
   size_t _Group = 0;

   for (; _First != _Last; ++_First)
    if (0 <= (_Dig = _Hexdig(*_First, _E0, _Al, _Au)))
     {
     _Seendigit = true;
     if (48 <= _Significant)
      ++_Phex;
     else if (*_First == _E0 && _Significant == 0)
      ;
     else
      {
      *_Ptr++ = "0123456789abcdef"[_Dig];
      ++_Significant;
      }
     if (_Groups[_Group] != 127)
      ++_Groups[_Group];
     }
    else if (_Groups[_Group] == '\0'
     || _Kseparator == (_Elem)0
     || *_First != _Kseparator)
     break;
    else
     {
     _Groups.append((size_t)1, '\0');
     ++_Group;
     }
   if (_Group == 0)
    ;
   else if ('\0' < _Groups[_Group])
    ++_Group;
   else
    _Bad = true;

   for (const char *_Pg = _Grouping.c_str();
    !_Bad && 0 < _Group; )
    if (*_Pg == 127)
     break;
    else if (0 < --_Group && *_Pg != _Groups[_Group]
     || 0 == _Group && *_Pg < _Groups[_Group])
     _Bad = true;
    else if ('\0' < _Pg[1])
     ++_Pg;
   }

  if (_Seendigit && _Significant == 0)
   *_Ptr++ = '0';

  if (_First != _Last && *_First == _Punct_fac.decimal_point())
   *_Ptr++ = localeconv()->decimal_point[0], ++_First;

  if (_Significant == 0)
   {
   for (; _First != _Last && *_First == _E0;
    _Seendigit = true, ++_First)
    --_Phex;
   if (_Phex < 0)
    *_Ptr++ = '0', ++_Phex;
   }

  for (; _First != _Last
    && 0 <= (_Dig = _Hexdig(*_First, _E0, _Al, _Au));
    _Seendigit = true, ++_First)
   if (_Significant < 48)
    {
    *_Ptr++ = "0123456789abcdef"[_Dig];
    ++_Significant;
    }

  if (_Seendigit && _First != _Last
   && (*_First == _Maklocchr('p', (_Elem *)0, _Cvt)
    || *_First == _Maklocchr('P', (_Elem *)0, _Cvt)))
   {
   *_Ptr++ = 'p', ++_First;
   _Seendigit = false, _Significant = 0;

   if (_First == _Last)
    ;
   else if (*_First == _Maklocchr('+', (_Elem *)0, _Cvt))
    *_Ptr++ = '+', ++_First;
   else if (*_First == _Maklocchr('-', (_Elem *)0, _Cvt))
    *_Ptr++ = '-', ++_First;
   for (; _First != _Last && *_First == _E0; )
    _Seendigit = true, ++_First;
   if (_Seendigit)
    *_Ptr++ = '0';
   for (; _First != _Last
    && _E0 <= *_First && *_First <= _E0 + 9;
    _Seendigit = true, ++_First)
    if (_Significant < 8)
     {
     *_Ptr++ = (char)((*_First - _E0) + '0');
     ++_Significant;
     }
   }

  if (_Bad || !_Seendigit)
   _Ptr = _Ac;
  *_Ptr = '\0';
  *_Phexexp = _Phex;
  return (0);
  }
 };


template<class _Elem,
 class _InIt>
 locale::id num_get<_Elem, _InIt>::id;


template<class _Elem,
 class _OutIt = ostreambuf_iterator<_Elem, char_traits<_Elem> > >
 class num_put
  : public locale::facet
 {
public:
 typedef numpunct<_Elem> _Mypunct;
 typedef basic_string<_Elem, char_traits<_Elem>, allocator<_Elem> >
  _Mystr;

 static size_t _Getcat(const locale::facet **_Ppf = 0,
  const locale *_Ploc = 0)
  {
  if (_Ppf != 0 && *_Ppf == 0)
   *_Ppf = new num_put<_Elem, _OutIt>(
    _Locinfo(_Ploc->c_str()));
  return (4);
  }

 static locale::id id;

protected:
 virtual ~num_put()
  {
  }

 void _Init(const _Locinfo& _Lobj)
  {
  _Cvt = _Lobj._Getcvt();
  }

 _Locinfo::_Cvtvec _Cvt;

public:
 explicit num_put(size_t _Refs = 0)
  : locale::facet(_Refs)
  {
  { _Locinfo _Lobj;
   _Init(_Lobj);
  }
  }

 num_put(const _Locinfo& _Lobj, size_t _Refs = 0)
  : locale::facet(_Refs)
  {
  _Init(_Lobj);
  }

 typedef _Elem char_type;
 typedef _OutIt iter_type;

 _OutIt put(_OutIt _Dest,
  ios_base& _Iosbase, _Elem _Fill, _Bool _Val) const
  {
  return (do_put(_Dest, _Iosbase, _Fill, _Val));
  }

 _OutIt put(_OutIt _Dest,
  ios_base& _Iosbase, _Elem _Fill, long _Val) const
  {
  return (do_put(_Dest, _Iosbase, _Fill, _Val));
  }

 _OutIt put(_OutIt _Dest,
  ios_base& _Iosbase, _Elem _Fill, unsigned long _Val) const
  {
  return (do_put(_Dest, _Iosbase, _Fill, _Val));
  }


 _OutIt put(_OutIt _Dest,
  ios_base& _Iosbase, _Elem _Fill, long long _Val) const
  {
  return (do_put(_Dest, _Iosbase, _Fill, _Val));
  }

 _OutIt put(_OutIt _Dest,
  ios_base& _Iosbase, _Elem _Fill, unsigned long long _Val) const
  {
  return (do_put(_Dest, _Iosbase, _Fill, _Val));
  }


 _OutIt put(_OutIt _Dest,
  ios_base& _Iosbase, _Elem _Fill, double _Val) const
  {
  return (do_put(_Dest, _Iosbase, _Fill, _Val));
  }

 _OutIt put(_OutIt _Dest,
  ios_base& _Iosbase, _Elem _Fill, long double _Val) const
  {
  return (do_put(_Dest, _Iosbase, _Fill, _Val));
  }

 _OutIt put(_OutIt _Dest,
  ios_base& _Iosbase, _Elem _Fill, const void *_Val) const
  {
  return (do_put(_Dest, _Iosbase, _Fill, _Val));
  }

protected:
 virtual _OutIt do_put(_OutIt _Dest,
  ios_base& _Iosbase, _Elem _Fill, _Bool _Val) const
  {
  ;
  if (!(_Iosbase.flags() & ios_base::boolalpha))
   return (do_put(_Dest, _Iosbase, _Fill, (long)_Val));
  else
   {
   const _Mypunct& _Punct_fac = use_facet< _Mypunct >(_Iosbase.getloc());
   _Mystr _Str;
   if (_Val)
    _Str.assign(_Punct_fac.truename());
   else
    _Str.assign(_Punct_fac.falsename());

   size_t _Fillcount = _Iosbase.width() <= 0
    || (size_t)_Iosbase.width() <= _Str.size()
     ? 0 : (size_t)_Iosbase.width() - _Str.size();

   if ((_Iosbase.flags() & ios_base::adjustfield) != ios_base::left)
    {
    _Dest = _Rep(_Dest, _Fill, _Fillcount);
    _Fillcount = 0;
    }
   _Dest = _Put(_Dest, _Str.c_str(), _Str.size());
   _Iosbase.width(0);
   return (_Rep(_Dest, _Fill, _Fillcount));
   }
  }

 virtual _OutIt do_put(_OutIt _Dest,
  ios_base& _Iosbase, _Elem _Fill, long _Val) const
  {
  char _Buf[2 * 32], _Fmt[6];
  return (_Iput(_Dest, _Iosbase, _Fill, _Buf,
   :: sprintf(_Buf, _Ifmt(_Fmt, "ld",
    _Iosbase.flags()), _Val)));
  }

 virtual _OutIt do_put(_OutIt _Dest,
  ios_base& _Iosbase, _Elem _Fill, unsigned long _Val) const
  {
  char _Buf[2 * 32], _Fmt[6];
  return (_Iput(_Dest, _Iosbase, _Fill, _Buf,
   :: sprintf(_Buf, _Ifmt(_Fmt, "lu",
    _Iosbase.flags()), _Val)));
  }


 virtual _OutIt do_put(_OutIt _Dest,
  ios_base& _Iosbase, _Elem _Fill, long long _Val) const
  {
  char _Buf[2 * 32], _Fmt[8];
  return (_Iput(_Dest, _Iosbase, _Fill, _Buf,
   :: sprintf(_Buf, _Ifmt(_Fmt, "Ld",
    _Iosbase.flags()), _Val)));
  }

 virtual _OutIt do_put(_OutIt _Dest,
  ios_base& _Iosbase, _Elem _Fill, unsigned long long _Val) const
  {
  char _Buf[2 * 32], _Fmt[8];
  return (_Iput(_Dest, _Iosbase, _Fill, _Buf,
   :: sprintf(_Buf, _Ifmt(_Fmt, "Lu",
    _Iosbase.flags()), _Val)));
  }


 virtual _OutIt do_put(_OutIt _Dest,
  ios_base& _Iosbase, _Elem _Fill, double _Val) const
  {
  char _Buf[8 + 48 + 64], _Fmt[8];
  streamsize _Precision = _Iosbase.precision() <= 0
   && !(_Iosbase.flags() & ios_base::fixed)
    ? 6 : _Iosbase.precision();
  int _Significance = 48 < _Precision
   ? 48 : (int)_Precision;
  _Precision -= _Significance;
  size_t _Beforepoint = 0;
  size_t _Afterpoint = 0;

  if ((_Iosbase.flags() & ios_base::floatfield) == ios_base::fixed
   && _Val * 0.5 != _Val)
   {
   bool _Signed = _Val < 0;
   if (_Signed)
    _Val = -_Val;

   for (; 1e35 <= _Val && _Beforepoint < 5000; _Beforepoint += 10)
    _Val /= 1e10;

   if (0 < _Val)
    for (; 10 <= _Precision && _Val <= 1e-35
     && _Afterpoint < 5000; _Afterpoint += 10)
     {
     _Val *= 1e10;
     _Precision -= 10;
     }

   if (_Signed)
    _Val = -_Val;
   }

  return (_Fput(_Dest, _Iosbase, _Fill, _Buf,
   _Beforepoint, _Afterpoint, (size_t)_Precision,
    :: sprintf(_Buf,
     _Ffmt(_Fmt, 0, _Iosbase.flags()),
     _Significance, _Val)));
  }

 virtual _OutIt do_put(_OutIt _Dest,
  ios_base& _Iosbase, _Elem _Fill, long double _Val) const
  {
  char _Buf[8 + 48 + 64], _Fmt[8];
  streamsize _Precision = _Iosbase.precision() <= 0
   && !(_Iosbase.flags() & ios_base::fixed)
    ? 6 : _Iosbase.precision();
  int _Significance = 48 < _Precision
   ? 48 : (int)_Precision;
  _Precision -= _Significance;
  size_t _Beforepoint = 0;
  size_t _Afterpoint = 0;

  if ((_Iosbase.flags() & ios_base::floatfield) == ios_base::fixed)
   {
   bool _Signed = _Val < 0;
   if (_Signed)
    _Val = -_Val;

   for (; 1e35 <= _Val && _Beforepoint < 5000; _Beforepoint += 10)
    _Val /= 1e10;

   if (0 < _Val)
    for (; 10 <= _Precision && _Val <= 1e-35
     && _Afterpoint < 5000; _Afterpoint += 10)
     {
     _Val *= 1e10;
     _Precision -= 10;
     }

   if (_Signed)
    _Val = -_Val;
   }

  return (_Fput(_Dest, _Iosbase, _Fill, _Buf,
   _Beforepoint, _Afterpoint, (size_t)_Precision,
    :: sprintf(_Buf,
     _Ffmt(_Fmt, 'L', _Iosbase.flags()),
     _Significance, _Val)));
  }

 virtual _OutIt do_put(_OutIt _Dest,
  ios_base& _Iosbase, _Elem _Fill, const void *_Val) const
  {

  char _Buf[2 * 32], _Fmt[8];
  unsigned long long _Off = (unsigned long long)((char *)_Val - (char *)0);
  if (sizeof (void *) == sizeof (unsigned long))
   _Off = (unsigned long)_Off;
  return (_Iput(_Dest, _Iosbase, _Fill, _Buf,
   :: sprintf(_Buf, _Ifmt(_Fmt, "Lu",
    ios_base::hex), _Off)));
# 1289 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/xlocnum" 3
  }

private:
 char *_Ffmt(char *_Fmt,
  char _Spec, ios_base::fmtflags _Flags) const
  {
  char *_Ptr = _Fmt;
  *_Ptr++ = '%';

  if (_Flags & ios_base::showpos)
   *_Ptr++ = '+';
  if (_Flags & ios_base::showpoint)
   *_Ptr++ = '#';
  *_Ptr++ = '.';
  *_Ptr++ = '*';
  if (_Spec != '\0')
   *_Ptr++ = _Spec;

  ios_base::fmtflags _Ffl = _Flags & ios_base::floatfield;
  *_Ptr++ = _Ffl == ios_base::fixed ? 'f'
   : _Ffl == ios_base::hexfloat ? 'a'
   : _Ffl == ios_base::scientific ? 'e' : 'g';
  *_Ptr = '\0';
  return (_Fmt);
  }

 _OutIt _Fput(_OutIt _Dest,
  ios_base& _Iosbase, _Elem _Fill, const char *_Buf,
   size_t _Beforepoint, size_t _Afterpoint,
    size_t _Trailing, size_t _Count) const
  {
  ;
  const _Mypunct& _Punct_fac = use_facet< _Mypunct >(_Iosbase.getloc());
  const string _Grouping = _Punct_fac.grouping();
  const _Elem _Kseparator = _Punct_fac.thousands_sep();
  string _Groupstring;
  const _Elem _E0 = _Maklocchr('0', (_Elem *)0, _Cvt);
  size_t _Prefix = _Buf[0] == '+' || _Buf[0] == '-' ? 1 : 0;

  char _Enders[3];
  _Enders[0] = :: localeconv()->decimal_point[0];
  _Enders[1] = 'e';
  _Enders[2] = '\0';

  const char *_Eptr = (const char *):: memchr(_Buf,
   'e', _Count);
  const char *_Pointptr = (const char *):: memchr(_Buf,
   _Enders[0], _Count);
  if (_Pointptr == 0)
   _Trailing = 0;

  if (*_Grouping.c_str() != 127 && '\0' < *_Grouping.c_str())
   {
   _Groupstring.append(_Buf, _Count);
   if (_Eptr == 0)
    _Groupstring.append(_Trailing, '0');
   else
    {
    if (_Pointptr == 0)
     {
     _Groupstring.append(_Beforepoint, '0');
     _Beforepoint = 0;
     }
    _Groupstring.insert(_Eptr - _Buf, _Trailing, '0');
    }
   _Trailing = 0;

   if (_Pointptr == 0)
    _Groupstring.append(_Beforepoint, '0');
   else
    {
    _Groupstring.insert(_Pointptr - _Buf + 1, _Afterpoint, '0');
    _Groupstring.insert(_Pointptr - _Buf, _Beforepoint, '0');
    _Afterpoint = 0;
    }
   _Beforepoint = 0;

   const char *_Pg = _Grouping.c_str();
   size_t _Off = :: strcspn(&_Groupstring[0], &_Enders[0]);
   while (*_Pg != 127 && '\0' < *_Pg
    && (size_t)*_Pg < _Off - _Prefix)
    {
    _Groupstring.insert(_Off -= *_Pg, (size_t)1, '\0');
    if ('\0' < _Pg[1])
     ++_Pg;
    }

   _Buf = &_Groupstring[0];
   _Trailing = 0;
   _Count = _Groupstring.size();
   }

  size_t _Fillcount = _Beforepoint + _Afterpoint + _Trailing + _Count;
  _Fillcount = _Iosbase.width() <= 0
   || (size_t)_Iosbase.width() <= _Fillcount
    ? 0 : (size_t)_Iosbase.width() - _Fillcount;
  ios_base::fmtflags _Adjustfield =
   _Iosbase.flags() & ios_base::adjustfield;
  if (_Adjustfield != ios_base::left
   && _Adjustfield != ios_base::internal)
   {
   _Dest = _Rep(_Dest, _Fill, _Fillcount);
   _Fillcount = 0;
   }
  else if (_Adjustfield == ios_base::internal)
   {
   if (0 < _Prefix)
    {
    _Dest = _Putc(_Dest, _Buf, 1);
    ++_Buf, --_Count;
    }
   _Dest = _Rep(_Dest, _Fill, _Fillcount);
   _Fillcount = 0;
   }

  _Pointptr = (const char *):: memchr(_Buf,
   _Enders[0], _Count);
  if (_Pointptr != 0)
   {
   size_t _Fracoffset = _Pointptr - _Buf + 1;
   _Dest = _Putgrouped(_Dest, _Buf, _Fracoffset - 1, _Kseparator);
   _Dest = _Rep(_Dest, _E0, _Beforepoint);
   _Dest = _Rep(_Dest, _Punct_fac.decimal_point(), 1);
   _Dest = _Rep(_Dest, _E0, _Afterpoint);
   _Buf += _Fracoffset, _Count -= _Fracoffset;
   }

  _Eptr = (const char *):: memchr(_Buf,
   'e', _Count);
  if (_Eptr != 0)
   {
   size_t _Expoffset = _Eptr - _Buf + 1;
   _Dest = _Putgrouped(_Dest, _Buf, _Expoffset - 1, _Kseparator);
   _Dest = _Rep(_Dest, _E0, _Trailing), _Trailing = 0;
   _Dest = _Putc(_Dest, _Iosbase.flags() & ios_base::uppercase
    ? "E" : "e", 1);
   _Buf += _Expoffset, _Count -= _Expoffset;
   }

  _Dest = _Putgrouped(_Dest, _Buf, _Count,
   _Kseparator);
  _Dest = _Rep(_Dest, _E0, _Trailing);
  _Iosbase.width(0);
  return (_Rep(_Dest, _Fill, _Fillcount));
  }

 char *_Ifmt(char *_Fmt,
  const char *_Spec, ios_base::fmtflags _Flags) const
  {
  char *_Ptr = _Fmt;
  *_Ptr++ = '%';

  if (_Flags & ios_base::showpos)
   *_Ptr++ = '+';
  if (_Flags & ios_base::showbase)
   *_Ptr++ = '#';
  if (_Spec[0] != 'L')
   *_Ptr++ = _Spec[0];
  else


   {
   *_Ptr++ = 'l';
   *_Ptr++ = 'l';
   }
# 1462 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/xlocnum" 3
  ios_base::fmtflags _Basefield = _Flags & ios_base::basefield;
  *_Ptr++ = _Basefield == ios_base::oct ? 'o'
   : _Basefield != ios_base::hex ? _Spec[1]
   : _Flags & ios_base::uppercase ? 'X' : 'x';
  *_Ptr = '\0';
  return (_Fmt);
  }

 _OutIt _Iput(_OutIt _Dest,
  ios_base& _Iosbase, _Elem _Fill, char *_Buf, size_t _Count) const
  {
  ;
  const _Mypunct& _Punct_fac = use_facet< _Mypunct >(_Iosbase.getloc());
  const string _Grouping = _Punct_fac.grouping();
  const size_t _Prefix = *_Buf == '+' || *_Buf == '-' ? 1
   : *_Buf == '0' && (_Buf[1] == 'x' || _Buf[1] == 'X') ? 2
   : 0;

  if (*_Grouping.c_str() != 127 && '\0' < *_Grouping.c_str())
   {
   const char *_Pg = _Grouping.c_str();
   size_t _Off = _Count;
   while (*_Pg != 127 && '\0' < *_Pg
    && (size_t)*_Pg < _Off - _Prefix)
    {
    _Off -= *_Pg;
    :: memmove(&_Buf[_Off + 1], &_Buf[_Off],
     _Count + 1 - _Off);
    _Buf[_Off] = '\0', ++_Count;
    if ('\0' < _Pg[1])
     ++_Pg;
    }
   }

  size_t _Fillcount = _Iosbase.width() <= 0
   || (size_t)_Iosbase.width() <= _Count
    ? 0 : (size_t)_Iosbase.width() - _Count;

  ios_base::fmtflags _Adjustfield =
   _Iosbase.flags() & ios_base::adjustfield;
  if (_Adjustfield != ios_base::left
   && _Adjustfield != ios_base::internal)
   {
   _Dest = _Rep(_Dest, _Fill, _Fillcount);
   _Fillcount = 0;
   }
  else if (_Adjustfield == ios_base::internal)
   {
   _Dest = _Putc(_Dest, _Buf, _Prefix);
   _Buf += _Prefix, _Count -= _Prefix;
   _Dest = _Rep(_Dest, _Fill, _Fillcount), _Fillcount = 0;
   }

  _Dest = _Putgrouped(_Dest, _Buf, _Count,
   _Punct_fac.thousands_sep());
  _Iosbase.width(0);
  return (_Rep(_Dest, _Fill, _Fillcount));
  }

 _OutIt _Put(_OutIt _Dest,
  const _Elem *_Ptr, size_t _Count) const
  {
  for (; 0 < _Count; --_Count, ++_Dest, ++_Ptr)
   *_Dest = *_Ptr;
  return (_Dest);
  }

 _OutIt _Putc(_OutIt _Dest,
  const char *_Ptr, size_t _Count) const
  {
  for (; 0 < _Count; --_Count, ++_Dest, ++_Ptr)
   *_Dest = _Maklocchr(*_Ptr, (_Elem *)0, _Cvt);
  return (_Dest);
  }

 _OutIt _Putgrouped(_OutIt _Dest,
  const char *_Ptr, size_t _Count, _Elem _Kseparator) const
  {
  for (; ; ++_Ptr, --_Count)
   {
   const char *_Pend =
    (const char *):: memchr(_Ptr, '\0', _Count);
   size_t _Groupsize = _Pend != 0 ? _Pend - _Ptr : _Count;

   _Dest = _Putc(_Dest, _Ptr, _Groupsize);
   _Ptr += _Groupsize, _Count -= _Groupsize;
   if (_Count == 0)
    break;
   if (_Kseparator != (_Elem)0)
    _Dest = _Rep(_Dest, _Kseparator, 1);
   }
  return (_Dest);
  }

 _OutIt _Rep(_OutIt _Dest,
  _Elem _Ch, size_t _Count) const
  {
  for (; 0 < _Count; --_Count, ++_Dest)
   *_Dest = _Ch;
  return (_Dest);
  }
 };


template<class _Elem,
 class _OutIt>
 locale::id num_put<_Elem, _OutIt>::id;
}
# 5 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/ios" 2 3

namespace std {

template<class _Elem,
 class _Traits>
 class basic_ios
  : public ios_base
 {
public:
 typedef basic_ios<_Elem, _Traits> _Myt;
 typedef basic_ostream<_Elem, _Traits> _Myos;
 typedef basic_streambuf<_Elem, _Traits> _Mysb;
 typedef ctype<_Elem> _Ctype;
 typedef _Elem char_type;
 typedef _Traits traits_type;
 typedef typename _Traits::int_type int_type;
 typedef typename _Traits::pos_type pos_type;
 typedef typename _Traits::off_type off_type;

 explicit basic_ios(_Mysb *_Strbuf)
  {
  init(_Strbuf);
  }

 virtual ~basic_ios()
  {
  }

 void clear(iostate _State = goodbit,
  bool _Reraise = false)
  {
  ios_base::clear((iostate)(_Mystrbuf == 0
   ? (int)_State | (int)badbit : (int)_State), _Reraise);
  }

 void clear(io_state _State)
  {
  clear((iostate)_State);
  }

 void setstate(iostate _State,
  bool _Reraise = false)
  {
  if (_State != goodbit)
   clear((iostate)((int)rdstate() | (int)_State), _Reraise);
  }

 void setstate(io_state _State)
  {
  setstate((iostate)_State);
  }

 _Myt& copyfmt(const _Myt& _Right)
  {
  _Tiestr = _Right.tie();
  _Fillch = _Right.fill();
  ios_base::copyfmt(_Right);
  return (*this);
  }

 _Myos *tie() const
  {
  return (_Tiestr);
  }

 _Myos *tie(_Myos *_Newtie)
  {
  _Myos *_Oldtie = _Tiestr;
  _Tiestr = _Newtie;
  return (_Oldtie);
  }

 _Mysb *rdbuf() const
  {
  return (_Mystrbuf);
  }

 _Mysb *rdbuf(_Mysb *_Strbuf)
  {
  _Mysb *_Oldstrbuf = _Mystrbuf;
  _Mystrbuf = _Strbuf;
  clear();
  return (_Oldstrbuf);
  }

 locale imbue(const locale& _Loc)
  {
  locale _Oldlocale = ios_base::imbue(_Loc);
  if (rdbuf() != 0)
   rdbuf()->pubimbue(_Loc);
  return (_Oldlocale);
  }

 _Elem fill() const
  {
  return (_Fillch);
  }

 _Elem fill(_Elem _Newfill)
  {
  _Elem _Oldfill = _Fillch;
  _Fillch = _Newfill;
  return (_Oldfill);
  }

 char narrow(_Elem _Ch, char _Dflt = '\0') const
  {
  const _Ctype& _Ctype_fac = use_facet< _Ctype >(getloc());
  return (_Ctype_fac.narrow(_Ch, _Dflt));
  }

 _Elem widen(char _Byte) const
  {
  const _Ctype& _Ctype_fac = use_facet< _Ctype >(getloc());
  return (_Ctype_fac.widen(_Byte));
  }
# 146 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/ios" 3
protected:
 void init(_Mysb *_Strbuf = 0,
  bool _Isstd = false)
  {
  _Init();
  _Mystrbuf = _Strbuf;
  _Tiestr = 0;
  _Fillch = widen(' ');

  if (_Mystrbuf == 0)
   setstate(badbit);

  if (_Isstd)
   _Addstd(this);
  }

 basic_ios()
  {
  }

private:
 _Mysb *_Mystrbuf;
 _Myos *_Tiestr;
 _Elem _Fillch;





 };


inline ios_base& boolalpha(ios_base& _Iosbase)
 {
 _Iosbase.setf(ios_base::boolalpha);
 return (_Iosbase);
 }

inline ios_base& dec(ios_base& _Iosbase)
 {
 _Iosbase.setf(ios_base::dec, ios_base::basefield);
 return (_Iosbase);
 }


inline ios_base& defaultfloat(ios_base& _Iosbase)
 {
 _Iosbase.unsetf(ios_base::floatfield);
 return (_Iosbase);
 }


inline ios_base& fixed(ios_base& _Iosbase)
 {
 _Iosbase.setf(ios_base::fixed, ios_base::floatfield);
 return (_Iosbase);
 }

inline ios_base& hex(ios_base& _Iosbase)
 {
 _Iosbase.setf(ios_base::hex, ios_base::basefield);
 return (_Iosbase);
 }


 namespace tr1 {
inline ::std:: ios_base& hexfloat(::std:: ios_base& _Iosbase)
 {
 _Iosbase.setf(::std:: ios_base::hexfloat, ::std:: ios_base::floatfield);
 return (_Iosbase);
 }
 }



inline ios_base& hexfloat(ios_base& _Iosbase)
 {
 _Iosbase.setf(ios_base::hexfloat, ios_base::floatfield);
 return (_Iosbase);
 }


inline ios_base& internal(ios_base& _Iosbase)
 {
 _Iosbase.setf(ios_base::internal, ios_base::adjustfield);
 return (_Iosbase);
 }

inline ios_base& left(ios_base& _Iosbase)
 {
 _Iosbase.setf(ios_base::left, ios_base::adjustfield);
 return (_Iosbase);
 }

inline ios_base& noboolalpha(ios_base& _Iosbase)
 {
 _Iosbase.unsetf(ios_base::boolalpha);
 return (_Iosbase);
 }

inline ios_base& noshowbase(ios_base& _Iosbase)
 {
 _Iosbase.unsetf(ios_base::showbase);
 return (_Iosbase);
 }

inline ios_base& noshowpoint(ios_base& _Iosbase)
 {
 _Iosbase.unsetf(ios_base::showpoint);
 return (_Iosbase);
 }

inline ios_base& noshowpos(ios_base& _Iosbase)
 {
 _Iosbase.unsetf(ios_base::showpos);
 return (_Iosbase);
 }

inline ios_base& noskipws(ios_base& _Iosbase)
 {
 _Iosbase.unsetf(ios_base::skipws);
 return (_Iosbase);
 }

inline ios_base& nounitbuf(ios_base& _Iosbase)
 {
 _Iosbase.unsetf(ios_base::unitbuf);
 return (_Iosbase);
 }

inline ios_base& nouppercase(ios_base& _Iosbase)
 {
 _Iosbase.unsetf(ios_base::uppercase);
 return (_Iosbase);
 }

inline ios_base& oct(ios_base& _Iosbase)
 {
 _Iosbase.setf(ios_base::oct, ios_base::basefield);
 return (_Iosbase);
 }

inline ios_base& right(ios_base& _Iosbase)
 {
 _Iosbase.setf(ios_base::right, ios_base::adjustfield);
 return (_Iosbase);
 }

inline ios_base& scientific(ios_base& _Iosbase)
 {
 _Iosbase.setf(ios_base::scientific, ios_base::floatfield);
 return (_Iosbase);
 }

inline ios_base& showbase(ios_base& _Iosbase)
 {
 _Iosbase.setf(ios_base::showbase);
 return (_Iosbase);
 }

inline ios_base& showpoint(ios_base& _Iosbase)
 {
 _Iosbase.setf(ios_base::showpoint);
 return (_Iosbase);
 }

inline ios_base& showpos(ios_base& _Iosbase)
 {
 _Iosbase.setf(ios_base::showpos);
 return (_Iosbase);
 }

inline ios_base& skipws(ios_base& _Iosbase)
 {
 _Iosbase.setf(ios_base::skipws);
 return (_Iosbase);
 }

inline ios_base& unitbuf(ios_base& _Iosbase)
 {
 _Iosbase.setf(ios_base::unitbuf);
 return (_Iosbase);
 }

inline ios_base& uppercase(ios_base& _Iosbase)
 {
 _Iosbase.setf(ios_base::uppercase);
 return (_Iosbase);
 }
}
# 5 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/ostream" 2 3

namespace std {
# 27 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/ostream" 3
template<class _Elem,
 class _Traits>
 class basic_ostream
  : virtual public basic_ios<_Elem, _Traits>
 {
public:
 typedef basic_ostream<_Elem, _Traits> _Myt;
 typedef basic_ios<_Elem, _Traits> _Myios;
 typedef basic_streambuf<_Elem, _Traits> _Mysb;
 typedef ostreambuf_iterator<_Elem, _Traits> _Iter;
 typedef num_put<_Elem, _Iter> _Nput;


 explicit basic_ostream(
  basic_streambuf<_Elem, _Traits> *_Strbuf = 0,






  bool _Isstd = false)
  {
  _Myios::init(_Strbuf, _Isstd);
  }

 basic_ostream(_Uninitialized, bool _Addit = true)
  {
  if (_Addit)
   ios_base::_Addstd(this);
  }
# 79 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/ostream" 3
 virtual ~basic_ostream()
  {
  }

 typedef typename _Traits::int_type int_type;
 typedef typename _Traits::pos_type pos_type;
 typedef typename _Traits::off_type off_type;

 class _Sentry_base
  {
 public:
  _Sentry_base(_Myt& _Ostr)
   : _Myostr(_Ostr)
   {
   if (_Myostr.rdbuf() != 0)
    _Myostr.rdbuf()->_Lock();
   }

  ~_Sentry_base()
   {
   if (_Myostr.rdbuf() != 0)
    _Myostr.rdbuf()->_Unlock();
   }

  _Myt& _Myostr;

 private:
  _Sentry_base& operator=(const _Sentry_base&);
  };

 class sentry
  : public _Sentry_base
  {
 public:
  explicit sentry(_Myt& _Ostr)
   : _Sentry_base(_Ostr)
   {
   if (_Ostr.good() && _Ostr.tie() != 0)
    _Ostr.tie()->flush();
   _Ok = _Ostr.good();
   }

  ~sentry()
   {

   if (!::std:: uncaught_exception())
    this->_Myostr._Osfx();




   }

  operator bool() const
   {
   return (_Ok ? 1 : 0);
   }

 private:
  bool _Ok;

  sentry(const sentry&);
  sentry& operator=(const sentry&);
  };

 bool opfx()
  {
  if (ios_base::good() && _Myios::tie() != 0)
   _Myios::tie()->flush();
  return (ios_base::good());
  }

 void osfx()
  {
  _Osfx();
  }

 void _Osfx()
  {
  try {
  if (ios_base::flags() & ios_base::unitbuf)
   flush();
  } catch (...) {
  }
  }

 _Myt& operator<<(_Myt& (*_Pfn)(_Myt&))
  {
  ;
  return ((*_Pfn)(*this));
  }

 _Myt& operator<<(_Myios& (*_Pfn)(_Myios&))
  {
  ;
  (*_Pfn)(*(_Myios *)this);
  return (*this);
  }

 _Myt& operator<<(ios_base& (*_Pfn)(ios_base&))
  {
  ;
  (*_Pfn)(*(ios_base *)this);
  return (*this);
  }

 _Myt& operator<<(_Bool _Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);

  if (_Ok)
   {
   const _Nput& _Nput_fac = use_facet< _Nput >(ios_base::getloc());

   try {
   if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
    _Myios::fill(), _Val).failed())
    _State |= ios_base::badbit;
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& operator<<(short _Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);

  if (_Ok)
   {
   const _Nput& _Nput_fac = use_facet< _Nput >(ios_base::getloc());
   ios_base::fmtflags _Bfl =
    ios_base::flags() & ios_base::basefield;
   long _Tmp = (_Bfl == ios_base::oct
    || _Bfl == ios_base::hex)
    ? (long)(unsigned short)_Val : (long)_Val;

   try {
   if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
    _Myios::fill(), _Tmp).failed())
    _State |= ios_base::badbit;
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& operator<<(unsigned short _Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);

  if (_Ok)
   {
   const _Nput& _Nput_fac = use_facet< _Nput >(ios_base::getloc());

   try {
   if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
    _Myios::fill(), (unsigned long)_Val).failed())
    _State |= ios_base::badbit;
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& operator<<(int _Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);

  if (_Ok)
   {
   const _Nput& _Nput_fac = use_facet< _Nput >(ios_base::getloc());
   ios_base::fmtflags _Bfl =
    ios_base::flags() & ios_base::basefield;
   long _Tmp = (_Bfl == ios_base::oct
    || _Bfl == ios_base::hex)
    ? (long)(unsigned int)_Val : (long)_Val;

   try {
   if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
    _Myios::fill(), _Tmp).failed())
    _State |= ios_base::badbit;
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& operator<<(unsigned int _Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);

  if (_Ok)
   {
   const _Nput& _Nput_fac = use_facet< _Nput >(ios_base::getloc());

   try {
   if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
    _Myios::fill(), (unsigned long)_Val).failed())
    _State |= ios_base::badbit;
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& operator<<(long _Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);

  if (_Ok)
   {
   const _Nput& _Nput_fac = use_facet< _Nput >(ios_base::getloc());

   try {
   if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
    _Myios::fill(), _Val).failed())
    _State |= ios_base::badbit;
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& operator<<(unsigned long _Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);

  if (_Ok)
   {
   const _Nput& _Nput_fac = use_facet< _Nput >(ios_base::getloc());

   try {
   if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
    _Myios::fill(), _Val).failed())
    _State |= ios_base::badbit;
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }


 _Myt& operator<<(long long _Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);

  if (_Ok)
   {
   const _Nput& _Nput_fac = use_facet< _Nput >(ios_base::getloc());

   try {
   if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
    _Myios::fill(), _Val).failed())
    _State |= ios_base::badbit;
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& operator<<(unsigned long long _Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);

  if (_Ok)
   {
   const _Nput& _Nput_fac = use_facet< _Nput >(ios_base::getloc());

   try {
   if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
    _Myios::fill(), _Val).failed())
    _State |= ios_base::badbit;
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }


 _Myt& operator<<(float _Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);

  if (_Ok)
   {
   const _Nput& _Nput_fac = use_facet< _Nput >(ios_base::getloc());

   try {
   if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
    _Myios::fill(), (double)_Val).failed())
    _State |= ios_base::badbit;
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& operator<<(double _Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);

  if (_Ok)
   {
   const _Nput& _Nput_fac = use_facet< _Nput >(ios_base::getloc());

   try {
   if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
    _Myios::fill(), _Val).failed())
    _State |= ios_base::badbit;
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& operator<<(long double _Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);

  if (_Ok)
   {
   const _Nput& _Nput_fac = use_facet< _Nput >(ios_base::getloc());

   try {
   if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
    _Myios::fill(), _Val).failed())
    _State |= ios_base::badbit;
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& operator<<(const void *_Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);

  if (_Ok)
   {
   const _Nput& _Nput_fac = use_facet< _Nput >(ios_base::getloc());

   try {
   if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
    _Myios::fill(), _Val).failed())
    _State |= ios_base::badbit;
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& operator<<(_Mysb *_Strbuf)
  {
  ios_base::iostate _State = ios_base::goodbit;
  bool _Copied = false;
  const sentry _Ok(*this);

  if (_Ok && _Strbuf != 0)
   for (int_type _Meta = _Traits::eof(); ; _Copied = true)
    {
    try {
    _Meta = _Traits::eq_int_type(_Traits::eof(), _Meta)
     ? _Strbuf->sgetc() : _Strbuf->snextc();
    } catch (...) {
     _Myios::setstate(ios_base::failbit);
     throw;
    }

    if (_Traits::eq_int_type(_Traits::eof(), _Meta))
     break;

    try {
     if (_Traits::eq_int_type(_Traits::eof(),
      _Myios::rdbuf()->sputc(
       _Traits::to_char_type(_Meta))))
      {
      _State |= ios_base::badbit;
      break;
      }
    } catch (...) { _Myios::setstate(ios_base::badbit, true); }
    }

  ios_base::width(0);
  _Myios::setstate(_Strbuf == 0 ? ios_base::badbit
   : !_Copied ? _State | ios_base::failbit : _State);
  return (*this);
  }

 _Myt& put(_Elem _Ch)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);

  if (!_Ok)
   _State |= ios_base::badbit;
  else
   {
   try {
   if (_Traits::eq_int_type(_Traits::eof(),
    _Myios::rdbuf()->sputc(_Ch)))
    _State |= ios_base::badbit;
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& write(const _Elem *_Str,
  streamsize _Count)
  {





  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);

  if (!_Ok)
   _State |= ios_base::badbit;
  else
   {
   try {
   if (_Myios::rdbuf()->sputn(_Str, _Count) != _Count)
    _State |= ios_base::badbit;
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& flush()
  {
  ios_base::iostate _State = ios_base::goodbit;
  if (!ios_base::fail() && _Myios::rdbuf()->pubsync() == -1)
   _State |= ios_base::badbit;
  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& seekp(pos_type _Pos)
  {
  if (!ios_base::fail()
   && (off_type)_Myios::rdbuf()->pubseekpos(_Pos,
    ios_base::out) == _BADOFF)
   _Myios::setstate(ios_base::failbit);
  return (*this);
  }

 _Myt& seekp(off_type _Off, ios_base::seekdir _Way)
  {
  if (!ios_base::fail()
   && (off_type)_Myios::rdbuf()->pubseekoff(_Off, _Way,
    ios_base::out) == _BADOFF)
   _Myios::setstate(ios_base::failbit);
  return (*this);
  }

 pos_type tellp()
  {
  if (!ios_base::fail())
   return (_Myios::rdbuf()->pubseekoff(0,
    ios_base::cur, ios_base::out));
  else
   return (pos_type(_BADOFF));
  }
 };


template<class _Elem,
 class _Traits> inline
 void swap(basic_ostream<_Elem, _Traits>& _Left,
  basic_ostream<_Elem, _Traits>& _Right)
 {
 _Left.swap(_Right);
 }


template<class _Elem,
 class _Traits> inline
 basic_ostream<_Elem, _Traits>& operator<<(
  basic_ostream<_Elem, _Traits>& _Ostr, const char *_Val)
 {
 ios_base::iostate _State = ios_base::goodbit;
 streamsize _Count = (streamsize):: strlen(_Val);
 streamsize _Pad = _Ostr.width() <= 0 || _Ostr.width() <= _Count
  ? 0 : _Ostr.width() - _Count;
 const typename basic_ostream<_Elem, _Traits>::sentry _Ok(_Ostr);

 if (!_Ok)
  _State |= ios_base::badbit;
 else
  {
  try {
  const ctype<_Elem>& _Ctype_fac = use_facet< ctype<_Elem> >(_Ostr.getloc());
  if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left)
   for (; 0 < _Pad; --_Pad)
    if (_Traits::eq_int_type(_Traits::eof(),
     _Ostr.rdbuf()->sputc(_Ostr.fill())))
     {
     _State |= ios_base::badbit;
     break;
     }

  for (; _State == ios_base::goodbit && 0 < _Count; --_Count, ++_Val)
   if (_Traits::eq_int_type(_Traits::eof(),
    _Ostr.rdbuf()->sputc(_Ctype_fac.widen(*_Val))))
     _State |= ios_base::badbit;

  if (_State == ios_base::goodbit)
   for (; 0 < _Pad; --_Pad)
    if (_Traits::eq_int_type(_Traits::eof(),
     _Ostr.rdbuf()->sputc(_Ostr.fill())))
     {
     _State |= ios_base::badbit;
     break;
     }
  _Ostr.width(0);
  } catch (...) { (_Ostr).setstate(ios_base::badbit, true); }
  }

 _Ostr.setstate(_State);
 return (_Ostr);
 }

template<class _Elem,
 class _Traits> inline
 basic_ostream<_Elem, _Traits>& operator<<(
  basic_ostream<_Elem, _Traits>& _Ostr, char _Ch)
 {
 ios_base::iostate _State = ios_base::goodbit;
 const typename basic_ostream<_Elem, _Traits>::sentry _Ok(_Ostr);

 if (_Ok)
  {
  const ctype<_Elem>& _Ctype_fac = use_facet< ctype<_Elem> >(_Ostr.getloc());
  streamsize _Pad = _Ostr.width() <= 1 ? 0 : _Ostr.width() - 1;

  try {
  if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left)
   for (; _State == ios_base::goodbit && 0 < _Pad;
    --_Pad)
    if (_Traits::eq_int_type(_Traits::eof(),
     _Ostr.rdbuf()->sputc(_Ostr.fill())))
     _State |= ios_base::badbit;

  if (_State == ios_base::goodbit
   && _Traits::eq_int_type(_Traits::eof(),
    _Ostr.rdbuf()->sputc(_Ctype_fac.widen(_Ch))))
   _State |= ios_base::badbit;

  for (; _State == ios_base::goodbit && 0 < _Pad;
   --_Pad)
   if (_Traits::eq_int_type(_Traits::eof(),
    _Ostr.rdbuf()->sputc(_Ostr.fill())))
    _State |= ios_base::badbit;
  } catch (...) { (_Ostr).setstate(ios_base::badbit, true); }
  }

 _Ostr.width(0);
 _Ostr.setstate(_State);
 return (_Ostr);
 }

template<class _Traits> inline
 basic_ostream<char, _Traits>& operator<<(
  basic_ostream<char, _Traits>& _Ostr,
  const char *_Val)
 {
 typedef char _Elem;
 typedef basic_ostream<_Elem, _Traits> _Myos;
 ios_base::iostate _State = ios_base::goodbit;
 streamsize _Count = (streamsize)_Traits::length(_Val);
 streamsize _Pad = _Ostr.width() <= 0 || _Ostr.width() <= _Count
  ? 0 : _Ostr.width() - _Count;
 const typename _Myos::sentry _Ok(_Ostr);

 if (!_Ok)
  _State |= ios_base::badbit;
 else
  {
  try {
  if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left)
   for (; 0 < _Pad; --_Pad)
    if (_Traits::eq_int_type(_Traits::eof(),
     _Ostr.rdbuf()->sputc(_Ostr.fill())))
     {
     _State |= ios_base::badbit;
     break;
     }

  if (_State == ios_base::goodbit
   && _Ostr.rdbuf()->sputn(_Val, _Count) != _Count)
   _State |= ios_base::badbit;

  if (_State == ios_base::goodbit)
   for (; 0 < _Pad; --_Pad)
    if (_Traits::eq_int_type(_Traits::eof(),
     _Ostr.rdbuf()->sputc(_Ostr.fill())))
     {
     _State |= ios_base::badbit;
     break;
     }
  _Ostr.width(0);
  } catch (...) { (_Ostr).setstate(ios_base::badbit, true); }
  }

 _Ostr.setstate(_State);
 return (_Ostr);
 }

template<class _Traits> inline
 basic_ostream<char, _Traits>& operator<<(
  basic_ostream<char, _Traits>& _Ostr, char _Ch)
 {
 typedef char _Elem;
 typedef basic_ostream<_Elem, _Traits> _Myos;
 ios_base::iostate _State = ios_base::goodbit;
 const typename _Myos::sentry _Ok(_Ostr);

 if (_Ok)
  {
  streamsize _Pad = _Ostr.width() <= 1 ? 0 : _Ostr.width() - 1;

  try {
  if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left)
   for (; _State == ios_base::goodbit && 0 < _Pad;
    --_Pad)
    if (_Traits::eq_int_type(_Traits::eof(),
     _Ostr.rdbuf()->sputc(_Ostr.fill())))
     _State |= ios_base::badbit;

  if (_State == ios_base::goodbit
   && _Traits::eq_int_type(_Traits::eof(),
    _Ostr.rdbuf()->sputc(_Ch)))
   _State |= ios_base::badbit;

  for (; _State == ios_base::goodbit && 0 < _Pad;
   --_Pad)
   if (_Traits::eq_int_type(_Traits::eof(),
    _Ostr.rdbuf()->sputc(_Ostr.fill())))
    _State |= ios_base::badbit;
  } catch (...) { (_Ostr).setstate(ios_base::badbit, true); }
  }

 _Ostr.width(0);
 _Ostr.setstate(_State);
 return (_Ostr);
 }

template<class _Elem,
 class _Traits> inline
 basic_ostream<_Elem, _Traits>& operator<<(
  basic_ostream<_Elem, _Traits>& _Ostr, const _Elem *_Val)
 {
 typedef basic_ostream<_Elem, _Traits> _Myos;

 ios_base::iostate _State = ios_base::goodbit;
 streamsize _Count = (streamsize)_Traits::length(_Val);
 streamsize _Pad = _Ostr.width() <= 0 || _Ostr.width() <= _Count
  ? 0 : _Ostr.width() - _Count;
 const typename _Myos::sentry _Ok(_Ostr);

 if (!_Ok)
  _State |= ios_base::badbit;
 else
  {
  try {
  if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left)
   for (; 0 < _Pad; --_Pad)
    if (_Traits::eq_int_type(_Traits::eof(),
     _Ostr.rdbuf()->sputc(_Ostr.fill())))
     {
     _State |= ios_base::badbit;
     break;
     }

  if (_State == ios_base::goodbit
   && _Ostr.rdbuf()->sputn(_Val, _Count) != _Count)
   _State |= ios_base::badbit;

  if (_State == ios_base::goodbit)
   for (; 0 < _Pad; --_Pad)
    if (_Traits::eq_int_type(_Traits::eof(),
     _Ostr.rdbuf()->sputc(_Ostr.fill())))
     {
     _State |= ios_base::badbit;
     break;
     }
  _Ostr.width(0);
  } catch (...) { (_Ostr).setstate(ios_base::badbit, true); }
  }

 _Ostr.setstate(_State);
 return (_Ostr);
 }

template<class _Elem,
 class _Traits> inline
 basic_ostream<_Elem, _Traits>& operator<<(
  basic_ostream<_Elem, _Traits>& _Ostr, _Elem _Ch)
 {
 typedef basic_ostream<_Elem, _Traits> _Myos;

 ios_base::iostate _State = ios_base::goodbit;
 const typename _Myos::sentry _Ok(_Ostr);

 if (_Ok)
  {
  streamsize _Pad = _Ostr.width() <= 1 ? 0 : _Ostr.width() - 1;

  try {
  if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left)
   for (; _State == ios_base::goodbit && 0 < _Pad;
    --_Pad)
    if (_Traits::eq_int_type(_Traits::eof(),
     _Ostr.rdbuf()->sputc(_Ostr.fill())))
     _State |= ios_base::badbit;

  if (_State == ios_base::goodbit
   && _Traits::eq_int_type(_Traits::eof(),
    _Ostr.rdbuf()->sputc(_Ch)))
   _State |= ios_base::badbit;

  for (; _State == ios_base::goodbit && 0 < _Pad;
   --_Pad)
   if (_Traits::eq_int_type(_Traits::eof(),
    _Ostr.rdbuf()->sputc(_Ostr.fill())))
    _State |= ios_base::badbit;
  } catch (...) { (_Ostr).setstate(ios_base::badbit, true); }
  }

 _Ostr.width(0);
 _Ostr.setstate(_State);
 return (_Ostr);
 }

template<class _Traits> inline
 basic_ostream<char, _Traits>& operator<<(
  basic_ostream<char, _Traits>& _Ostr, const signed char *_Val)
 {
 return (_Ostr << (const char *)_Val);
 }

template<class _Traits> inline
 basic_ostream<char, _Traits>& operator<<(
  basic_ostream<char, _Traits>& _Ostr, signed char _Ch)
 {
 return (_Ostr << (char)_Ch);
 }

template<class _Traits> inline
 basic_ostream<char, _Traits>& operator<<(
  basic_ostream<char, _Traits>& _Ostr, const unsigned char *_Val)
 {
 return (_Ostr << (const char *)_Val);
 }

template<class _Traits> inline
 basic_ostream<char, _Traits>& operator<<(
  basic_ostream<char, _Traits>& _Ostr, unsigned char _Ch)
 {
 return (_Ostr << (char)_Ch);
 }
# 965 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/ostream" 3
template<class _Elem,
 class _Traits> inline
 basic_ostream<_Elem, _Traits>&
  endl(basic_ostream<_Elem, _Traits>& _Ostr)
 {
 _Ostr.put(_Ostr.widen('\n'));
 _Ostr.flush();
 return (_Ostr);
 }

template<class _Elem,
 class _Traits> inline
 basic_ostream<_Elem, _Traits>&
  ends(basic_ostream<_Elem, _Traits>& _Ostr)
 {
 _Ostr.put(_Elem());
 return (_Ostr);
 }

template<class _Elem,
 class _Traits> inline
 basic_ostream<_Elem, _Traits>&
  flush(basic_ostream<_Elem, _Traits>& _Ostr)
 {
 _Ostr.flush();
 return (_Ostr);
 }



template<class _Elem,
 class _Traits> inline
 basic_ostream<_Elem, _Traits>&
  operator<<(basic_ostream<_Elem, _Traits>& _Ostr,
   const error_code& _Errcode)
 {
 return (_Ostr << _Errcode.category().name() << ':' << _Errcode.value());
 }

}
# 5 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/istream" 2 3

namespace std {

template<class _Elem,
 class _Traits>
 class basic_istream
  : virtual public basic_ios<_Elem, _Traits>
 {
public:
 typedef basic_istream<_Elem, _Traits> _Myt;
 typedef basic_ios<_Elem, _Traits> _Myios;
 typedef basic_streambuf<_Elem, _Traits> _Mysb;
 typedef istreambuf_iterator<_Elem, _Traits> _Iter;
 typedef ctype<_Elem> _Ctype;
 typedef num_get<_Elem, _Iter> _Nget;


 explicit basic_istream(_Mysb *_Strbuf = 0,
  bool _Isstd = false)






  : _Chcount(0)
  {
  _Myios::init(_Strbuf, _Isstd);
  }

 basic_istream(_Uninitialized)
  {
  ios_base::_Addstd(this);
  }
# 62 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/istream" 3
 virtual ~basic_istream()
  {
  }

 typedef typename _Traits::int_type int_type;
 typedef typename _Traits::pos_type pos_type;
 typedef typename _Traits::off_type off_type;


 class _Sentry_base
  {
 public:
  _Sentry_base(_Myt& _Istr)
   : _Myistr(_Istr)
   {
   if (_Myistr.rdbuf() != 0)
    _Myistr.rdbuf()->_Lock();
   }

  ~_Sentry_base()
   {
   if (_Myistr.rdbuf() != 0)
    _Myistr.rdbuf()->_Unlock();
   }

  _Myt& _Myistr;

 private:
  _Sentry_base& operator=(const _Sentry_base&);
  };

 class sentry
  : public _Sentry_base
  {
 public:
  explicit sentry(_Myt& _Istr, bool _Noskip = false)
   : _Sentry_base(_Istr)
   {
   _Ok = this->_Myistr._Ipfx(_Noskip);
   }

  operator bool() const
   {
   return (_Ok ? 1 : 0);
   }

 private:
  bool _Ok;

  sentry(const sentry&);
  sentry& operator=(const sentry&);
  };

 bool _Ipfx(bool _Noskip = false)
  {
  if (ios_base::good())
   {
   if (_Myios::tie() != 0)
    _Myios::tie()->flush();

   if (!_Noskip && ios_base::flags() & ios_base::skipws)
    {
    const _Ctype& _Ctype_fac = use_facet< _Ctype >(ios_base::getloc());

    try {
    int_type _Meta = _Myios::rdbuf()->sgetc();

    for (; ; _Meta = _Myios::rdbuf()->snextc())
     if (_Traits::eq_int_type(_Traits::eof(), _Meta))
      {
      _Myios::setstate(ios_base::eofbit);
      break;
      }
     else if (!_Ctype_fac.is(_Ctype::space,
      _Traits::to_char_type(_Meta)))
      break;
    } catch (...) { _Myios::setstate(ios_base::badbit, true); }
    }

   if (ios_base::good())
    return (true);
   }
  _Myios::setstate(ios_base::failbit);
  return (false);
  }

 bool ipfx(bool _Noskip = false)
  {
  return (_Ipfx(_Noskip));
  }

 void isfx()
  {
  }

 _Myt& operator>>(_Myt& (*_Pfn)(_Myt&))
  {
  ;
  return ((*_Pfn)(*this));
  }

 _Myt& operator>>(_Myios& (*_Pfn)(_Myios&))
  {
  ;
  (*_Pfn)(*(_Myios *)this);
  return (*this);
  }

 _Myt& operator>>(ios_base& (*_Pfn)(ios_base&))
  {
  ;
  (*_Pfn)(*(ios_base *)this);
  return (*this);
  }

 _Myt& operator>>(_Bool& _Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);

  if (_Ok)
   {
   const _Nget& _Nget_fac = use_facet< _Nget >(ios_base::getloc());

   try {
   _Nget_fac.get(_Iter(_Myios::rdbuf()), _Iter(0),
    *this, _State, _Val);
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& operator>>(short& _Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);

  if (_Ok)
   {
   long _Tmp = 0;
   const _Nget& _Nget_fac = use_facet< _Nget >(ios_base::getloc());

   try {
   _Nget_fac.get(_Iter(_Myios::rdbuf()), _Iter(0),
    *this, _State, _Tmp);
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }

   if (_State & ios_base::failbit
    || _Tmp < (-32767 - 1) || 32767 < _Tmp)
    _State |= ios_base::failbit;
   else
    _Val = (short)_Tmp;
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& operator>>(unsigned short& _Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);

  if (_Ok)
   {
   const _Nget& _Nget_fac = use_facet< _Nget >(ios_base::getloc());

   try {
   _Nget_fac.get(_Iter(_Myios::rdbuf()), _Iter(0),
    *this, _State, _Val);
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& operator>>(int& _Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);

  if (_Ok)
   {
   long _Tmp = 0;
   const _Nget& _Nget_fac = use_facet< _Nget >(ios_base::getloc());

   try {
   _Nget_fac.get(_Iter(_Myios::rdbuf()), _Iter(0),
    *this, _State, _Tmp);
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }

   if (_State & ios_base::failbit
    || _Tmp < (-2147483647 - 1) || 2147483647 < _Tmp)
    _State |= ios_base::failbit;
   else
    _Val = _Tmp;
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& operator>>(unsigned int& _Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);
  if (_Ok)
   {
   const _Nget& _Nget_fac = use_facet< _Nget >(ios_base::getloc());

   try {
   _Nget_fac.get(_Iter(_Myios::rdbuf()), _Iter(0),
    *this, _State, _Val);
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& operator>>(long& _Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);

  if (_Ok)
   {
   const _Nget& _Nget_fac = use_facet< _Nget >(ios_base::getloc());
   try {
   _Nget_fac.get(_Iter(_Myios::rdbuf()), _Iter(0),
    *this, _State, _Val);
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& operator>>(unsigned long& _Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);

  if (_Ok)
   {
   const _Nget& _Nget_fac = use_facet< _Nget >(ios_base::getloc());

   try {
   _Nget_fac.get(_Iter(_Myios::rdbuf()), _Iter(0),
    *this, _State, _Val);
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }


 _Myt& operator>>(long long& _Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);

  if (_Ok)
   {
   const _Nget& _Nget_fac = use_facet< _Nget >(ios_base::getloc());

   try {
   _Nget_fac.get(_Iter(_Myios::rdbuf()), _Iter(0),
    *this, _State, _Val);
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& operator>>(unsigned long long& _Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);
  if (_Ok)
   {
   const _Nget& _Nget_fac = use_facet< _Nget >(ios_base::getloc());

   try {
   _Nget_fac.get(_Iter(_Myios::rdbuf()), _Iter(0),
    *this, _State, _Val);
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }


 _Myt& operator>>(float& _Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);

  if (_Ok)
   {
   const _Nget& _Nget_fac = use_facet< _Nget >(ios_base::getloc());

   try {
   _Nget_fac.get(_Iter(_Myios::rdbuf()), _Iter(0),
    *this, _State, _Val);
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& operator>>(double& _Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);
  if (_Ok)
   {
   const _Nget& _Nget_fac = use_facet< _Nget >(ios_base::getloc());

   try {
   _Nget_fac.get(_Iter(_Myios::rdbuf()), _Iter(0),
    *this, _State, _Val);
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& operator>>(long double& _Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);

  if (_Ok)
   {
   const _Nget& _Nget_fac = use_facet< _Nget >(ios_base::getloc());
   try {
   _Nget_fac.get(_Iter(_Myios::rdbuf()), _Iter(0),
    *this, _State, _Val);
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& operator>>(void *& _Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);

  if (_Ok)
   {
   const _Nget& _Nget_fac = use_facet< _Nget >(ios_base::getloc());

   try {
   _Nget_fac.get(_Iter(_Myios::rdbuf()), _Iter(0),
    *this, _State, _Val);
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& operator>>(_Mysb *_Strbuf)
  {
  ios_base::iostate _State = ios_base::goodbit;
  bool _Copied = false;
  const sentry _Ok(*this);

  if (_Ok && _Strbuf != 0)
   {
   try {
   int_type _Meta = _Myios::rdbuf()->sgetc();

   for (; ; _Meta = _Myios::rdbuf()->snextc())
    if (_Traits::eq_int_type(_Traits::eof(), _Meta))
     {
     _State |= ios_base::eofbit;
     break;
     }
    else
     {
     try {
      if (_Traits::eq_int_type(_Traits::eof(),
       _Strbuf->sputc(_Traits::to_char_type(_Meta))))
       break;
     } catch (...) {
      break;
     }
     _Copied = true;
     }
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(!_Copied ? _State | ios_base::failbit : _State);
  return (*this);
  }

 int_type get()
  {
  int_type _Meta = 0;
  ios_base::iostate _State = ios_base::goodbit;
  _Chcount = 0;
  const sentry _Ok(*this, true);

  if (!_Ok)
   _Meta = _Traits::eof();
  else
   {
   try {
   _Meta = _Myios::rdbuf()->sgetc();

   if (_Traits::eq_int_type(_Traits::eof(), _Meta))
    _State |= ios_base::eofbit | ios_base::failbit;
   else
    {
    _Myios::rdbuf()->sbumpc();
    ++_Chcount;
    }
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (_Meta);
  }

 _Myt& get(_Elem *_Str, streamsize _Count)
  {
  return (get(_Str, _Count, _Myios::widen('\n')));
  }

 _Myt& get(_Elem *_Str,
  streamsize _Count, _Elem _Delim)
  {
  ;
  ios_base::iostate _State = ios_base::goodbit;
  _Chcount = 0;
  const sentry _Ok(*this, true);

  if (_Ok && 0 < _Count)
   {
   try {
   int_type _Meta = _Myios::rdbuf()->sgetc();

   for (; 0 < --_Count; _Meta = _Myios::rdbuf()->snextc())
    if (_Traits::eq_int_type(_Traits::eof(), _Meta))
     {
     _State |= ios_base::eofbit;
     break;
     }
    else if (_Traits::to_char_type(_Meta) == _Delim)
     break;
    else
     {
     *_Str++ = _Traits::to_char_type(_Meta);
     ++_Chcount;
     }
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_Chcount == 0
   ? _State | ios_base::failbit : _State);
  *_Str = _Elem();
  return (*this);
  }

 _Myt& get(_Elem& _Ch)
  {
  int_type _Meta = get();
  if (!_Traits::eq_int_type(_Traits::eof(), _Meta))
   _Ch = _Traits::to_char_type(_Meta);
  return (*this);
  }

 _Myt& get(_Mysb& _Strbuf)
  {
  return (get(_Strbuf, _Myios::widen('\n')));
  }

 _Myt& get(_Mysb& _Strbuf, _Elem _Delim)
  {
  ios_base::iostate _State = ios_base::goodbit;
  _Chcount = 0;
  const sentry _Ok(*this, true);

  if (_Ok)
   {
   try {
   int_type _Meta = _Myios::rdbuf()->sgetc();

   for (; ; _Meta = _Myios::rdbuf()->snextc())
    if (_Traits::eq_int_type(_Traits::eof(), _Meta))
     {
     _State |= ios_base::eofbit;
     break;
     }
    else
     {
     try {
      _Elem _Ch = _Traits::to_char_type(_Meta);
      if (_Ch == _Delim
       || _Traits::eq_int_type(_Traits::eof(),
        _Strbuf.sputc(_Ch)))
       break;
     } catch (...) {
      break;
     }
     ++_Chcount;
     }
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  if (_Chcount == 0)
   _State |= ios_base::failbit;
  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& getline(_Elem *_Str, streamsize _Count)
  {
  return (getline(_Str, _Count, _Myios::widen('\n')));
  }

 _Myt& getline(_Elem *_Str,
  streamsize _Count, _Elem _Delim)
  {
  ;
  ios_base::iostate _State = ios_base::goodbit;
  _Chcount = 0;
  const sentry _Ok(*this, true);

  if (_Ok && 0 < _Count)
   {
   int_type _Metadelim = _Traits::to_int_type(_Delim);

   try {
   int_type _Meta = _Myios::rdbuf()->sgetc();

   for (; ; _Meta = _Myios::rdbuf()->snextc())
    if (_Traits::eq_int_type(_Traits::eof(), _Meta))
     {
     _State |= ios_base::eofbit;
     break;
     }
    else if (_Meta == _Metadelim)
     {
     ++_Chcount;
     _Myios::rdbuf()->sbumpc();
     break;
     }
    else if (--_Count <= 0)
     {
     _State |= ios_base::failbit;
     break;
     }
    else
     {
     ++_Chcount;
     *_Str++ = _Traits::to_char_type(_Meta);
     }
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  *_Str = _Elem();
  _Myios::setstate(_Chcount == 0 ? _State | ios_base::failbit : _State);
  return (*this);
  }

 _Myt& ignore(streamsize _Count = 1,
  int_type _Metadelim = _Traits::eof())
  {
  ios_base::iostate _State = ios_base::goodbit;
  _Chcount = 0;
  const sentry _Ok(*this, true);

  if (_Ok && 0 < _Count)
   {
   try {
   for (; ; )
    {
    int_type _Meta;
    if (_Count != 2147483647 && --_Count < 0)
     break;
    else if (_Traits::eq_int_type(_Traits::eof(),
     _Meta = _Myios::rdbuf()->sbumpc()))
     {
     _State |= ios_base::eofbit;
     break;
     }
    else
     {
     ++_Chcount;
     if (_Meta == _Metadelim)
      break;
     }
    }
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& read(_Elem *_Str, streamsize _Count)
  {
  ;
  ios_base::iostate _State = ios_base::goodbit;
  _Chcount = 0;
  const sentry _Ok(*this, true);

  if (_Ok)
   {
   try {
   const streamsize _Num = _Myios::rdbuf()->sgetn(_Str, _Count);
   _Chcount += _Num;
   if (_Num != _Count)
    _State |= ios_base::eofbit | ios_base::failbit;
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 streamsize readsome(_Elem *_Str,
  streamsize _Count)
  {
  ;
  ios_base::iostate _State = ios_base::goodbit;
  _Chcount = 0;
  const sentry _Ok(*this, true);
  streamsize _Num;

  if (!_Ok)
   _State |= ios_base::failbit;
  else if ((_Num = _Myios::rdbuf()->in_avail()) < 0)
   _State |= ios_base::eofbit;
  else if (0 < _Num)
   read(_Str, _Num < _Count ? _Num : _Count);

  _Myios::setstate(_State);
  return (gcount());
  }

 int_type peek()
  {
  ios_base::iostate _State = ios_base::goodbit;
  _Chcount = 0;
  int_type _Meta = 0;
  const sentry _Ok(*this, true);

  if (!_Ok)
   _Meta = _Traits::eof();
  else
   {
   try {
   if (_Traits::eq_int_type(_Traits::eof(),
    _Meta = _Myios::rdbuf()->sgetc()))
    _State |= ios_base::eofbit;
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (_Meta);
  }

 _Myt& putback(_Elem _Ch)
  {
  ios_base::iostate _State = ios_base::goodbit;
  _Chcount = 0;
  const sentry _Ok(*this, true);

  if (_Ok)
   {
   try {
   if (_Traits::eq_int_type(_Traits::eof(),
    _Myios::rdbuf()->sputbackc(_Ch)))
    _State |= ios_base::badbit;
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& unget()
  {
  ios_base::iostate _State = ios_base::goodbit;
  _Chcount = 0;
  const sentry _Ok(*this, true);

  if (_Ok)
   {
   try {
   if (_Traits::eq_int_type(_Traits::eof(),
    _Myios::rdbuf()->sungetc()))
    _State |= ios_base::badbit;
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 streamsize gcount() const
  {
  return (_Chcount);
  }

 int sync()
  {
  ios_base::iostate _State = ios_base::goodbit;
  int _Ans;

  if (_Myios::rdbuf() == 0)
   _Ans = -1;
  else if (_Myios::rdbuf()->pubsync() == -1)
   {
   _State |= ios_base::badbit;
   _Ans = -1;
   }
  else
   _Ans = 0;

  _Myios::setstate(_State);
  return (_Ans);
  }

 _Myt& seekg(pos_type _Pos)
  {
  if (!ios_base::fail()
   && (off_type)_Myios::rdbuf()->pubseekpos(_Pos,
    ios_base::in) == _BADOFF)
   _Myios::setstate(ios_base::failbit);
  return (*this);
  }

 _Myt& seekg(off_type _Off, ios_base::seekdir _Way)
  {
  if (!ios_base::fail()
   && (off_type)_Myios::rdbuf()->pubseekoff(_Off, _Way,
    ios_base::in) == _BADOFF)
   _Myios::setstate(ios_base::failbit);
  return (*this);
  }

 pos_type tellg()
  {
  if (!ios_base::fail())
   return (_Myios::rdbuf()->pubseekoff(0,
    ios_base::cur, ios_base::in));
  else
   return (pos_type(_BADOFF));
  }

private:
 streamsize _Chcount;
 };


template<class _Elem,
 class _Traits> inline
 void swap(basic_istream<_Elem, _Traits>& _Left,
  basic_istream<_Elem, _Traits>& _Right)
 {
 _Left.swap(_Right);
 }


template<class _Elem,
 class _Traits>
 class basic_iostream
 : public basic_istream<_Elem, _Traits>,
  public basic_ostream<_Elem, _Traits>
 {
public:
 typedef basic_iostream<_Elem, _Traits> _Myt;
 typedef basic_istream<_Elem, _Traits> _Myis;
 typedef basic_ostream<_Elem, _Traits> _Myos;
 typedef basic_ios<_Elem, _Traits> _Myios;
 typedef _Elem char_type;
 typedef _Traits traits_type;
 typedef typename _Traits::int_type int_type;
 typedef typename _Traits::pos_type pos_type;
 typedef typename _Traits::off_type off_type;

 explicit basic_iostream(basic_streambuf<_Elem, _Traits> *_Strbuf)
  : _Myis(_Strbuf, false),
   _Myos(_Noinit, false)
  {
  }
# 886 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/istream" 3
 virtual ~basic_iostream()
  {
  }
 };


template<class _Elem,
 class _Traits> inline
 void swap(basic_iostream<_Elem, _Traits>& _Left,
  basic_iostream<_Elem, _Traits>& _Right)
 {
 _Left.swap(_Right);
 }


template<class _Elem,
 class _Traits> inline
 basic_istream<_Elem, _Traits>& operator>>(
  basic_istream<_Elem, _Traits> & _Istr, _Elem *_Str)
 {
 ;
 typedef basic_istream<_Elem, _Traits> _Myis;
 typedef ctype<_Elem> _Ctype;
 ios_base::iostate _State = ios_base::goodbit;
 _Elem *_Str0 = _Str;
 const typename _Myis::sentry _Ok(_Istr);

 if (_Ok)
  {
  const _Ctype& _Ctype_fac = use_facet< _Ctype >(_Istr.getloc());

  try {
  streamsize _Count = 0 < _Istr.width() ? _Istr.width() : 2147483647;
  typename _Myis::int_type _Meta = _Istr.rdbuf()->sgetc();
  _Elem _Ch;
  for (; 0 < --_Count; _Meta = _Istr.rdbuf()->snextc())
   if (_Traits::eq_int_type(_Traits::eof(), _Meta))
    {
    _State |= ios_base::eofbit;
    break;
    }
   else if (_Ctype_fac.is(_Ctype::space,
    _Ch = _Traits::to_char_type(_Meta))
     || _Ch == _Elem())
    break;
   else
    *_Str++ = _Traits::to_char_type(_Meta);
  } catch (...) { (_Istr).setstate(ios_base::badbit, true); }
  }

 *_Str = _Elem();
 _Istr.width(0);
 _Istr.setstate(_Str == _Str0 ? _State | ios_base::failbit : _State);
 return (_Istr);
 }

template<class _Elem,
 class _Traits> inline
 basic_istream<_Elem, _Traits>& operator>>(
  basic_istream<_Elem, _Traits> & _Istr, _Elem& _Ch)
 {
 typedef basic_istream<_Elem, _Traits> _Myis;

 typename _Myis::int_type _Meta;
 ios_base::iostate _State = ios_base::goodbit;
 const typename _Myis::sentry _Ok(_Istr);

 if (_Ok)
  {
  try {
  _Meta = _Istr.rdbuf()->sbumpc();
  if (_Traits::eq_int_type(_Traits::eof(), _Meta))
   _State |= ios_base::eofbit | ios_base::failbit;
  else
   _Ch = _Traits::to_char_type(_Meta);
  } catch (...) { (_Istr).setstate(ios_base::badbit, true); }
  }

 _Istr.setstate(_State);
 return (_Istr);
 }

template<class _Traits> inline
 basic_istream<char, _Traits>& operator>>(
  basic_istream<char, _Traits> & _Istr, signed char *_Str)
 {
 return (_Istr >> (char *)_Str);
 }

template<class _Traits> inline
 basic_istream<char, _Traits>& operator>>(
  basic_istream<char, _Traits> & _Istr, signed char& _Ch)
 {
 return (_Istr >> (char&)_Ch);
 }

template<class _Traits> inline
 basic_istream<char, _Traits>& operator>>(
  basic_istream<char, _Traits> & _Istr, unsigned char *_Str)
 {
 return (_Istr >> (char *)_Str);
 }

template<class _Traits> inline
 basic_istream<char, _Traits>& operator>>(
  basic_istream<char, _Traits> & _Istr, unsigned char& _Ch)
 {
 return (_Istr >> (char&)_Ch);
 }
# 1052 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/istream" 3
template<class _Elem,
 class _Traits> inline
 basic_istream<_Elem, _Traits>&
  ws(basic_istream<_Elem, _Traits>& _Istr)
 {
 typedef basic_istream<_Elem, _Traits> _Myis;
 typedef ctype<_Elem> _Ctype;

 if (!_Istr.eof())
  {
  ios_base::iostate _State = ios_base::goodbit;
  const typename _Myis::sentry _Ok(_Istr, true);

  if (_Ok)
   {
   const _Ctype& _Ctype_fac = use_facet< _Ctype >(_Istr.getloc());

   try {
   for (typename _Traits::int_type _Meta = _Istr.rdbuf()->sgetc(); ;
    _Meta = _Istr.rdbuf()->snextc())
    if (_Traits::eq_int_type(_Traits::eof(), _Meta))
     {
     _State |= ios_base::eofbit;
     break;
     }
    else if (!_Ctype_fac.is(_Ctype::space,
     _Traits::to_char_type(_Meta)))
     break;
   } catch (...) { (_Istr).setstate(ios_base::badbit, true); }
   }

  _Istr.setstate(_State);
  }
 return (_Istr);
 }
}
# 5 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/string" 2 3

namespace std {

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 basic_string<_Elem, _Traits, _Alloc> operator+(
  const basic_string<_Elem, _Traits, _Alloc>& _Left,
  const basic_string<_Elem, _Traits, _Alloc>& _Right)
 {
 basic_string<_Elem, _Traits, _Alloc> _Ans;
 _Ans.reserve(_Left.size() + _Right.size());
 _Ans += _Left;
 _Ans += _Right;
 return (_Ans);
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 basic_string<_Elem, _Traits, _Alloc> operator+(
  const _Elem *_Left,
  const basic_string<_Elem, _Traits, _Alloc>& _Right)
 {
 basic_string<_Elem, _Traits, _Alloc> _Ans;
 _Ans.reserve(_Traits::length(_Left) + _Right.size());
 _Ans += _Left;
 _Ans += _Right;
 return (_Ans);
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 basic_string<_Elem, _Traits, _Alloc> operator+(
  const _Elem _Left,
  const basic_string<_Elem, _Traits, _Alloc>& _Right)
 {
 basic_string<_Elem, _Traits, _Alloc> _Ans;
 _Ans.reserve(1 + _Right.size());
 _Ans += _Left;
 _Ans += _Right;
 return (_Ans);
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 basic_string<_Elem, _Traits, _Alloc> operator+(
  const basic_string<_Elem, _Traits, _Alloc>& _Left,
  const _Elem *_Right)
 {
 basic_string<_Elem, _Traits, _Alloc> _Ans;
 _Ans.reserve(_Left.size() + _Traits::length(_Right));
 _Ans += _Left;
 _Ans += _Right;
 return (_Ans);
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 basic_string<_Elem, _Traits, _Alloc> operator+(
  const basic_string<_Elem, _Traits, _Alloc>& _Left,
  const _Elem _Right)
 {
 basic_string<_Elem, _Traits, _Alloc> _Ans;
 _Ans.reserve(_Left.size() + 1);
 _Ans += _Left;
 _Ans += _Right;
 return (_Ans);
 }
# 154 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/string" 3
template<class _Elem,
 class _Traits,
 class _Alloc> inline
 bool operator==(
  const basic_string<_Elem, _Traits, _Alloc>& _Left,
  const basic_string<_Elem, _Traits, _Alloc>& _Right)
 {
 return (_Left.compare(_Right) == 0);
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 bool operator==(
  const _Elem * _Left,
  const basic_string<_Elem, _Traits, _Alloc>& _Right)
 {
 return (_Right.compare(_Left) == 0);
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 bool operator==(
  const basic_string<_Elem, _Traits, _Alloc>& _Left,
  const _Elem *_Right)
 {
 return (_Left.compare(_Right) == 0);
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 bool operator!=(
  const basic_string<_Elem, _Traits, _Alloc>& _Left,
  const basic_string<_Elem, _Traits, _Alloc>& _Right)
 {
 return (!(_Left == _Right));
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 bool operator!=(
  const _Elem *_Left,
  const basic_string<_Elem, _Traits, _Alloc>& _Right)
 {
 return (!(_Left == _Right));
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 bool operator!=(
  const basic_string<_Elem, _Traits, _Alloc>& _Left,
  const _Elem *_Right)
 {
 return (!(_Left == _Right));
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 bool operator<(
  const basic_string<_Elem, _Traits, _Alloc>& _Left,
  const basic_string<_Elem, _Traits, _Alloc>& _Right)
 {
 return (_Left.compare(_Right) < 0);
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 bool operator<(
  const _Elem * _Left,
  const basic_string<_Elem, _Traits, _Alloc>& _Right)
 {
 return (_Right.compare(_Left) > 0);
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 bool operator<(
  const basic_string<_Elem, _Traits, _Alloc>& _Left,
  const _Elem *_Right)
 {
 return (_Left.compare(_Right) < 0);
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 bool operator>(
  const basic_string<_Elem, _Traits, _Alloc>& _Left,
  const basic_string<_Elem, _Traits, _Alloc>& _Right)
 {
 return (_Right < _Left);
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 bool operator>(
  const _Elem * _Left,
  const basic_string<_Elem, _Traits, _Alloc>& _Right)
 {
 return (_Right < _Left);
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 bool operator>(
  const basic_string<_Elem, _Traits, _Alloc>& _Left,
  const _Elem *_Right)
 {
 return (_Right < _Left);
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 bool operator<=(
  const basic_string<_Elem, _Traits, _Alloc>& _Left,
  const basic_string<_Elem, _Traits, _Alloc>& _Right)
 {
 return (!(_Right < _Left));
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 bool operator<=(
  const _Elem * _Left,
  const basic_string<_Elem, _Traits, _Alloc>& _Right)
 {
 return (!(_Right < _Left));
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 bool operator<=(
  const basic_string<_Elem, _Traits, _Alloc>& _Left,
  const _Elem *_Right)
 {
 return (!(_Right < _Left));
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 bool operator>=(
  const basic_string<_Elem, _Traits, _Alloc>& _Left,
  const basic_string<_Elem, _Traits, _Alloc>& _Right)
 {
 return (!(_Left < _Right));
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 bool operator>=(
  const _Elem * _Left,
  const basic_string<_Elem, _Traits, _Alloc>& _Right)
 {
 return (!(_Left < _Right));
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 bool operator>=(
  const basic_string<_Elem, _Traits, _Alloc>& _Left,
  const _Elem *_Right)
 {
 return (!(_Left < _Right));
 }


template<class _Elem,
 class _Traits,
 class _Alloc> inline
 basic_istream<_Elem, _Traits>& operator>>(
  basic_istream<_Elem, _Traits> & _Istr,
  basic_string<_Elem, _Traits, _Alloc>& _Str)
 {
 typedef ctype<_Elem> _Ctype;
 typedef basic_istream<_Elem, _Traits> _Myis;
 typedef basic_string<_Elem, _Traits, _Alloc> _Mystr;
 typedef typename _Mystr::size_type _Mysizt;

 ios_base::iostate _State = ios_base::goodbit;
 bool _Changed = false;
 const typename _Myis::sentry _Ok(_Istr);

 if (_Ok)
  {
  const _Ctype& _Ctype_fac = use_facet< _Ctype >(_Istr.getloc());
  _Str.erase();

  try {
  _Mysizt _Size = 0 < _Istr.width()
   && (_Mysizt)_Istr.width() < _Str.max_size()
    ? (_Mysizt)_Istr.width() : _Str.max_size();
  typename _Traits::int_type _Meta = _Istr.rdbuf()->sgetc();

  for (; 0 < _Size; --_Size, _Meta = _Istr.rdbuf()->snextc())
   if(_Traits::eq_int_type(_Traits::eof(), _Meta))
    {
    _State |= ios_base::eofbit;
    break;
    }
   else if (_Ctype_fac.is(_Ctype::space,
    _Traits::to_char_type(_Meta)))
    break;
   else
    {
    _Str.append(1, _Traits::to_char_type(_Meta));
    _Changed = true;
    }
  } catch (...) { (_Istr).setstate(ios_base::badbit, true); }
  }

 _Istr.width(0);
 if (!_Changed)
  _State |= ios_base::failbit;
 _Istr.setstate(_State);
 return (_Istr);
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 basic_istream<_Elem, _Traits>& getline(
  basic_istream<_Elem, _Traits> & _Istr,
  basic_string<_Elem, _Traits, _Alloc>& _Str,
  const _Elem _Delim)
 {
 typedef basic_istream<_Elem, _Traits> _Myis;

 ios_base::iostate _State = ios_base::goodbit;
 bool _Changed = false;
 const typename _Myis::sentry _Ok(_Istr, true);

 if (_Ok)
  {
  try {
  _Str.erase();
  const typename _Traits::int_type _Metadelim =
   _Traits::to_int_type(_Delim);
  typename _Traits::int_type _Meta = _Istr.rdbuf()->sgetc();

  for (; ; _Meta = _Istr.rdbuf()->snextc())
   if (_Traits::eq_int_type(_Traits::eof(), _Meta))
    {
    _State |= ios_base::eofbit;
    break;
    }
   else if (_Traits::eq_int_type(_Meta, _Metadelim))
    {
    _Changed = true;
    _Istr.rdbuf()->sbumpc();
    break;
    }
   else if (_Str.max_size() <= _Str.size())
    {
    _State |= ios_base::failbit;
    break;
    }
   else
    {
    _Str += _Traits::to_char_type(_Meta);
    _Changed = true;
    }
  } catch (...) { (_Istr).setstate(ios_base::badbit, true); }
  }

 if (!_Changed)
  _State |= ios_base::failbit;
 _Istr.setstate(_State);
 return (_Istr);
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 basic_istream<_Elem, _Traits>& getline(
  basic_istream<_Elem, _Traits> & _Istr,
  basic_string<_Elem, _Traits, _Alloc>& _Str)
 {
 return (getline(_Istr, _Str, _Istr.widen('\n')));
 }
# 482 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/string" 3
template<class _Elem,
 class _Traits,
 class _Alloc> inline
 basic_ostream<_Elem, _Traits>& operator<<(
  basic_ostream<_Elem, _Traits>& _Ostr,
  const basic_string<_Elem, _Traits, _Alloc>& _Str)
 {
 typedef basic_ostream<_Elem, _Traits> _Myos;
 typedef basic_string<_Elem, _Traits, _Alloc> _Mystr;
 typedef typename _Mystr::size_type _Mysizt;

 ios_base::iostate _State = ios_base::goodbit;
 _Mysizt _Size = _Str.size();
 _Mysizt _Pad = _Ostr.width() <= 0 || (_Mysizt)_Ostr.width() <= _Size
  ? 0 : (_Mysizt)_Ostr.width() - _Size;
 const typename _Myos::sentry _Ok(_Ostr);

 if (!_Ok)
  _State |= ios_base::badbit;
 else
  {
 try {
  if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left)
   for (; 0 < _Pad; --_Pad)
    if (_Traits::eq_int_type(_Traits::eof(),
     _Ostr.rdbuf()->sputc(_Ostr.fill())))
     {
     _State |= ios_base::badbit;
     break;
     }

  if (_State == ios_base::goodbit
   && _Ostr.rdbuf()->sputn(_Str.c_str(), (streamsize)_Size)
    != (streamsize)_Size)
    _State |= ios_base::badbit;
  else
   for (; 0 < _Pad; --_Pad)
    if (_Traits::eq_int_type(_Traits::eof(),
     _Ostr.rdbuf()->sputc(_Ostr.fill())))
     {
     _State |= ios_base::badbit;
     break;
     }
  _Ostr.width(0);
  } catch (...) { (_Ostr).setstate(ios_base::badbit, true); }
  }

 _Ostr.setstate(_State);
 return (_Ostr);
 }
# 552 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/string" 3
inline int stoi(const string& _Str, size_t *_Idx = 0,
 int _Base = 10)
 {
 const char *_Ptr = _Str.c_str();
 char *_Eptr;
 int _Errno = 0;
 long _Ans = :: _Stolx(_Ptr, &_Eptr, _Base, &_Errno);

 if (_Ptr == _Eptr)
  _Xinvalid_argument("invalid stoi argument");
 if (_Errno || _Ans < (-2147483647 - 1) != 2147483647 < _Ans)
  _Xout_of_range("stoi argument out of range");
 if (_Idx != 0)
  *_Idx = (size_t)(_Eptr - _Ptr);
 return ((int)_Ans);
 }

inline long stol(const string& _Str, size_t *_Idx = 0,
 int _Base = 10)
 {
 const char *_Ptr = _Str.c_str();
 char *_Eptr;
 int _Errno = 0;
 long _Ans = :: _Stoulx(_Ptr, &_Eptr, _Base, &_Errno);

 if (_Ptr == _Eptr)
  _Xinvalid_argument("invalid stol argument");
 if (_Errno)
  _Xout_of_range("stol argument out of range");
 if (_Idx != 0)
  *_Idx = (size_t)(_Eptr - _Ptr);
 return (_Ans);
 }

inline unsigned long stoul(const string& _Str, size_t *_Idx = 0,
 int _Base = 10)
 {
 const char *_Ptr = _Str.c_str();
 char *_Eptr;
 int _Errno = 0;
 unsigned long _Ans = :: _Stoulx(_Ptr, &_Eptr, _Base, &_Errno);

 if (_Ptr == _Eptr)
  _Xinvalid_argument("invalid stoul argument");
 if (_Errno)
  _Xout_of_range("stoul argument out of range");
 if (_Idx != 0)
  *_Idx = (size_t)(_Eptr - _Ptr);
 return (_Ans);
 }

inline _Longlong stoll(const string& _Str, size_t *_Idx = 0,
 int _Base = 10)
 {
 const char *_Ptr = _Str.c_str();
 char *_Eptr;
 int _Errno = 0;
 _Longlong _Ans = :: _Stollx(_Ptr, &_Eptr, _Base, &_Errno);

 if (_Ptr == _Eptr)
  _Xinvalid_argument("invalid stoll argument");
 if (_Errno)
  _Xout_of_range("stoll argument out of range");
 if (_Idx != 0)
  *_Idx = (size_t)(_Eptr - _Ptr);
 return (_Ans);
 }

inline _ULonglong stoull(const string& _Str, size_t *_Idx = 0,
 int _Base = 10)
 {
 const char *_Ptr = _Str.c_str();
 int _Errno = 0;
 char *_Eptr;
 _ULonglong _Ans = :: _Stoullx(_Ptr, &_Eptr, _Base, &_Errno);

 if (_Ptr == _Eptr)
  _Xinvalid_argument("invalid stoull argument");
 if (_Errno)
  _Xout_of_range("stoull argument out of range");
 if (_Idx != 0)
  *_Idx = (size_t)(_Eptr - _Ptr);
 return (_Ans);
 }

inline float stof(const string& _Str, size_t *_Idx = 0)
 {
 const char *_Ptr = _Str.c_str();
 int _Errno = 0;
 char *_Eptr;
 float _Ans = :: _Stofx(_Ptr, &_Eptr, 0, &_Errno);

 if (_Ptr == _Eptr)
  _Xinvalid_argument("invalid stof argument");
 if (_Errno)
  _Xout_of_range("stof argument out of range");
 if (_Idx != 0)
  *_Idx = (size_t)(_Eptr - _Ptr);
 return (_Ans);
 }

inline double stod(const string& _Str, size_t *_Idx = 0)
 {
 const char *_Ptr = _Str.c_str();
 int _Errno = 0;
 char *_Eptr;
 double _Ans = :: _Stodx(_Ptr, &_Eptr, 0, &_Errno);

 if (_Ptr == _Eptr)
  _Xinvalid_argument("invalid stod argument");
 if (_Errno)
  _Xout_of_range("stod argument out of range");
 if (_Idx != 0)
  *_Idx = (size_t)(_Eptr - _Ptr);
 return (_Ans);
 }

inline long double stold(const string& _Str, size_t *_Idx = 0)
 {
 const char *_Ptr = _Str.c_str();
 int _Errno = 0;
 char *_Eptr;
 long double _Ans = :: _Stoldx(_Ptr, &_Eptr, 0, &_Errno);

 if (_Ptr == _Eptr)
  _Xinvalid_argument("invalid stold argument");
 if (_Errno)
  _Xout_of_range("stold argument out of range");
 if (_Idx != 0)
  *_Idx = (size_t)(_Eptr - _Ptr);
 return (_Ans);
 }
# 695 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/string" 3
inline string to_string(int _Val)
 {
 char _Buf[2 * 32];

 :: sprintf(_Buf,"%" "d", _Val);
 return (string(_Buf));
 }


inline string to_string(_Longlong _Val)
 {
 char _Buf[2 * 32];

 :: sprintf(_Buf, "%ll" "d", _Val);
 return (string(_Buf));
 }

inline string to_string(_ULonglong _Val)
 {
 char _Buf[2 * 32];

 :: sprintf(_Buf, "%ll" "u", _Val);
 return (string(_Buf));
 }

inline string to_string(long double _Val)
 {
 char _Buf[8 + 48 + 64];

 :: sprintf(_Buf, "%Lg", _Val);
 return (string(_Buf));
 }


inline string _Narrow_str(wstring _Str)
 {
 string _Ans;

 for (const wchar_t *_Ptr = _Str.c_str(); *_Ptr != 0; ++_Ptr)
  _Ans.push_back((char):: wctob(*_Ptr));
 return (_Ans);
 }

inline int stoi(const wstring& _Str, size_t *_Idx = 0,
 int _Base = 10)
 {
 return (stoi(_Narrow_str(_Str), _Idx, _Base));
 }

inline long stol(const wstring& _Str, size_t *_Idx = 0,
 int _Base = 10)
 {
 return (stol(_Narrow_str(_Str), _Idx, _Base));
 }

inline unsigned long stoul(const wstring& _Str, size_t *_Idx = 0,
 int _Base = 10)
 {
 return (stoul(_Narrow_str(_Str), _Idx, _Base));
 }

inline _Longlong stoll(const wstring& _Str, size_t *_Idx = 0,
 int _Base = 10)
 {
 return (stoll(_Narrow_str(_Str), _Idx, _Base));
 }

inline _ULonglong stoull(const wstring& _Str, size_t *_Idx = 0,
 int _Base = 10)
 {
 return (stoull(_Narrow_str(_Str), _Idx, _Base));
 }

inline float stof(const wstring& _Str, size_t *_Idx = 0)
 {
 return (stof(_Narrow_str(_Str), _Idx));
 }

inline double stod(const wstring& _Str, size_t *_Idx = 0)
 {
 return (stod(_Narrow_str(_Str), _Idx));
 }

inline long double stold(const wstring& _Str, size_t *_Idx = 0)
 {
 return (stold(_Narrow_str(_Str), _Idx));
 }
# 790 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/string" 3
inline wstring to_wstring(_Longlong _Val)
 {
 wchar_t _Buf[2 * 32];

 :: swprintf(_Buf, sizeof (_Buf) / sizeof (_Buf[0]),
  L"%ll" L"d", _Val);
 return (wstring(_Buf));
 }

inline wstring to_wstring(_ULonglong _Val)
 {
 wchar_t _Buf[2 * 32];

 :: swprintf(_Buf, sizeof (_Buf) / sizeof (_Buf[0]),
  L"%ll" L"u", _Val);
 return (wstring(_Buf));
 }

inline wstring to_wstring(long double _Val)
 {
 wchar_t _Buf[8 + 48 + 64];

 :: swprintf(_Buf,sizeof (_Buf) / sizeof (_Buf[0]),
  L"%Lg", _Val);
 return (wstring(_Buf));
 }

}
# 24 "serial.h" 2
# 1 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/c/cstdint" 1 3



# 1 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/c/yvals.h" 1 3
# 5 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/c/cstdint" 2 3







# 1 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/c/stdint.h" 1 3
# 10 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/c/stdint.h" 3
# 1 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/c/machine/int_types.h" 1 3
# 46 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/c/machine/int_types.h" 3
typedef __signed char __int8_t;
typedef unsigned char __uint8_t;
typedef short int __int16_t;
typedef unsigned short int __uint16_t;
typedef int __int32_t;
typedef unsigned int __uint32_t;
# 60 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/c/machine/int_types.h" 3
__extension__
typedef long long int __int64_t;

__extension__
typedef unsigned long long int __uint64_t;
# 73 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/c/machine/int_types.h" 3
typedef int __intptr_t;
typedef unsigned int __uintptr_t;
# 11 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/c/stdint.h" 2 3
# 28 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/c/stdint.h" 3

# 40 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/c/stdint.h" 3
  typedef __int8_t int8_t;



  typedef __int16_t int16_t;



  typedef __int32_t int32_t;
# 63 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/c/stdint.h" 3
 typedef __int8_t uint8_t;



 typedef __int16_t uint16_t;
# 77 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/c/stdint.h" 3
 typedef __int32_t uint32_t;



 typedef __int32_t u_int32_t;







typedef signed char int_least8_t;
typedef short int_least16_t;
typedef _Int32t int_least32_t;
typedef unsigned char uint_least8_t;
typedef unsigned short uint_least16_t;
typedef _Uint32t uint_least32_t;


typedef _Int32t int_least24_t;
typedef _Uint32t uint_least24_t;
# 118 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/c/stdint.h" 3
typedef signed char int_fast8_t;
typedef short int_fast16_t;
typedef _Int32t int_fast32_t;

typedef unsigned char uint_fast8_t;
typedef unsigned short uint_fast16_t;
typedef _Uint32t uint_fast32_t;


typedef _Int32t int_fast24_t;
typedef _Uint32t uint_fast24_t;
# 146 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/c/stdint.h" 3
typedef unsigned int uintptr_t;
# 165 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/c/stdint.h" 3
typedef int intptr_t;
# 182 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/c/stdint.h" 3
  typedef __int64_t int64_t;
# 194 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/c/stdint.h" 3
  typedef __int64_t uint64_t;






typedef _Longlong int_least64_t;
typedef _ULonglong uint_least64_t;
# 213 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/c/stdint.h" 3
typedef _Longlong int_fast64_t;
typedef _ULonglong uint_fast64_t;




typedef _Longlong intmax_t;
typedef _ULonglong uintmax_t;
# 346 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/c/stdint.h" 3

# 13 "/opt/microchip/xc32/v2.15/pic32mx/include/Cpp/c/cstdint" 2 3



namespace std {
using :: __int8_t; using :: __int16_t;
using :: __int32_t; using :: __int64_t;
using :: __uint8_t; using :: __uint16_t;
using :: __uint32_t; using :: __uint64_t;

using :: int_least8_t; using :: int_least16_t;
using :: int_least32_t; using :: int_least64_t;
using :: uint_least8_t; using :: uint_least16_t;
using :: uint_least32_t; using :: uint_least64_t;

using :: int_fast8_t; using :: int_fast16_t;
using :: int_fast32_t; using :: int_fast64_t;
using :: uint_fast8_t; using :: uint_fast16_t;
using :: uint_fast32_t; using :: uint_fast64_t;

using :: intmax_t; using :: intptr_t;
using :: uintmax_t; using :: uintptr_t;


 namespace tr1 {
using :: __int8_t; using :: __int16_t;
using :: __int32_t; using :: __int64_t;
using :: __uint8_t; using :: __uint16_t;
using :: __uint32_t; using :: __uint64_t;

using :: int_least8_t; using :: int_least16_t;
using :: int_least32_t; using :: int_least64_t;
using :: uint_least8_t; using :: uint_least16_t;
using :: uint_least32_t; using :: uint_least64_t;

using :: int_fast8_t; using :: int_fast16_t;
using :: int_fast32_t; using :: int_fast64_t;
using :: uint_fast8_t; using :: uint_fast16_t;
using :: uint_fast32_t; using :: uint_fast64_t;

using :: intmax_t; using :: intptr_t;
using :: uintmax_t; using :: uintptr_t;
 }

}
# 25 "serial.h" 2





using namespace std;

typedef __uint32_t volatile dev_reg;
class serial {

public:

    serial(int n);
    void turnON();
    void baudRate(int rate);
    void transmit(string message);
    void pointerSet();
    char ReadChar(void);
   string ReadString();
    virtual ~serial();

private:




    static const unsigned int baseAddress =(0xBF822000);
    int n;
    int pbClk = 200000000 / 2;


    dev_reg *mode;
    dev_reg *status;
    dev_reg *txreg;
    dev_reg *rxreg;
    dev_reg *brg;
    dev_reg *readRegister;
    dev_reg *readRegister2;
    dev_reg *temp;


};
# 25 "serial.cpp" 2
# 45 "serial.cpp"
    serial::serial(int in){
        n=in;
        pointerSet();
    }

void serial::turnON(){



    *mode|=1<<15;






    if(n==0){
     __uint32_t &txPort=*reinterpret_cast<__uint32_t*>(0xBF8015FC);
     readRegister=&txPort;
         txPort=0b0001;



        __uint32_t &txPort2=*reinterpret_cast<__uint32_t*>(0xBF80154C);
         txPort2=0b0001;

         __uint32_t &rxPort=*reinterpret_cast<__uint32_t*>(0xBF801468);
         rxPort=0b0011;


         __uint32_t &input1=*reinterpret_cast<__uint32_t*>(0xBF860310);
         input1=1<<10;



    }
    if(n==1){
        __uint32_t &txPort=*reinterpret_cast<__uint32_t*>(0xBF801588);
         txPort=0b0010;
    }
     if(n==2){
        __uint32_t &txPort=*reinterpret_cast<__uint32_t*>(0xBF801684);
         txPort=0b0001;
    }
}







void serial::baudRate(int rate){
    *brg=pbClk / (16 * rate) - 1;
}






void serial::pointerSet(){
# 117 "serial.cpp"
    mode=reinterpret_cast<__uint32_t*>(baseAddress +n*512);
    status=reinterpret_cast<__uint32_t*>((baseAddress + n*512+16));
    txreg=reinterpret_cast<__uint32_t*>((baseAddress + n*512)+32);
    rxreg=reinterpret_cast<__uint32_t*>((baseAddress + n*512)+48);
    brg=reinterpret_cast<__uint32_t*>(baseAddress+n*512+64);
}





void serial::transmit(string message){

      *status |=1<<10;

     temp=status;

    for(int i=0;i<message.length();i++)
    {
        while(*status&(1<<9));
        *txreg=message[i];
    }
}


char serial::ReadChar()
{
  *status |=1<<12;


     while(!((*status>>0) & 1U));
     return *rxreg;
}

string serial::ReadString()
{
    string message="";
    char character;
    while(character!='\n'){

        character=ReadChar();
        string transfer(1,character);
        message+=transfer;
    }
    return message;
}

serial::~serial() {
}
